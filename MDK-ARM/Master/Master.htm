<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [Master\Master.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image Master\Master.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Fri Mar 10 15:15:24 2023
<BR><P>
<H3>Maximum Stack Usage =       1984 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
TCPServer &rArr; socketReceive &rArr; socketReceiveEx &rArr; tcpReceive &rArr; tcpUpdateReceiveWindow &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[d9]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[27]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27]">ADC_IRQHandler</a><BR>
 <LI><a href="#[f]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">BusFault_Handler</a><BR>
 <LI><a href="#[d]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">HardFault_Handler</a><BR>
 <LI><a href="#[e]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">MemManage_Handler</a><BR>
 <LI><a href="#[c]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">NMI_Handler</a><BR>
 <LI><a href="#[73]">StartDefaultTask</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[73]">StartDefaultTask</a><BR>
 <LI><a href="#[124]">UART_EndRxTransfer</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[124]">UART_EndRxTransfer</a><BR>
 <LI><a href="#[10]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">UsageFault_Handler</a><BR>
 <LI><a href="#[19d]">dnsParseName</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19d]">dnsParseName</a><BR>
 <LI><a href="#[198]">dnsCompareName</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[198]">dnsCompareName</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[27]">ADC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[f]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[29]">CAN1_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2a]">CAN1_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2b]">CAN1_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[28]">CAN1_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[55]">CAN2_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[56]">CAN2_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[57]">CAN2_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[54]">CAN2_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[63]">DCMI_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[20]">DMA1_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[21]">DMA1_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[22]">DMA1_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[23]">DMA1_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[24]">DMA1_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[25]">DMA1_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[26]">DMA1_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[44]">DMA1_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4d]">DMA2_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[51]">DMA2_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[59]">DMA2_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5a]">DMA2_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5b]">DMA2_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[12]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[52]">ETH_IRQHandler</a> from stm32f4xx_eth_driver.o(i.ETH_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[53]">ETH_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1b]">EXTI0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3d]">EXTI15_10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1c]">EXTI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1d]">EXTI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1e]">EXTI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1f]">EXTI4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2c]">EXTI9_5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[19]">FLASH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[45]">FMC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[65]">FPU_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[64]">HASH_RNG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[d]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[35]">I2C1_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[34]">I2C1_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[37]">I2C2_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[36]">I2C2_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5e]">I2C3_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5d]">I2C3_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[e]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[c]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[58]">OTG_FS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3f]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[60]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5f]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[62]">OTG_HS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[61]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[16]">PVD_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[13]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1a]">RCC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3e]">RTC_Alarm_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[18]">RTC_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[b]">Reset_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[46]">SDIO_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[38]">SPI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[39]">SPI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[48]">SPI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[11]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[73]">StartDefaultTask</a> from main.o(i.StartDefaultTask) referenced from main.o(.constdata)
 <LI><a href="#[74]">StartTask02</a> from main.o(i.StartTask02) referenced from main.o(.constdata)
 <LI><a href="#[75]">StartTask03</a> from main.o(i.StartTask03) referenced from main.o(.constdata)
 <LI><a href="#[14]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[66]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[17]">TAMP_STAMP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[76]">TCPServer</a> from main.o(i.TCPServer) referenced from main.o(.constdata)
 <LI><a href="#[2d]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[30]">TIM1_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2f]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2e]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[31]">TIM2_IRQHandler</a> from stm32f4xx_it.o(i.TIM2_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[32]">TIM3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[33]">TIM4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[47]">TIM5_IRQHandler</a> from stm32f4xx_it.o(i.TIM5_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4b]">TIM6_DAC_IRQHandler</a> from stm32f4xx_it.o(i.TIM6_DAC_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4c]">TIM7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[40]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[43]">TIM8_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[42]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[41]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[49]">UART4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4a]">UART5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6c]">UART_DMAAbortOnError</a> from stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[3a]">USART1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3b]">USART2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3c]">USART3_IRQHandler</a> from stm32f4xx_it.o(i.USART3_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5c]">USART6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[10]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[15]">WWDG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[86]">__main</a> from __main.o(!!!main) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[68]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[6a]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[69]">_sputc</a> from _sputc.o(.text) referenced from __2sprintf.o(.text)
 <LI><a href="#[6b]">fputc</a> from debug.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[7a]">lan8742DisableIrq</a> from lan8742_driver.o(i.lan8742DisableIrq) referenced from lan8742_driver.o(.constdata)
 <LI><a href="#[79]">lan8742EnableIrq</a> from lan8742_driver.o(i.lan8742EnableIrq) referenced from lan8742_driver.o(.constdata)
 <LI><a href="#[7b]">lan8742EventHandler</a> from lan8742_driver.o(i.lan8742EventHandler) referenced from lan8742_driver.o(.constdata)
 <LI><a href="#[77]">lan8742Init</a> from lan8742_driver.o(i.lan8742Init) referenced from lan8742_driver.o(.constdata)
 <LI><a href="#[78]">lan8742Tick</a> from lan8742_driver.o(i.lan8742Tick) referenced from lan8742_driver.o(.constdata)
 <LI><a href="#[6d]">llmnrProcessQuery</a> from llmnr_responder.o(i.llmnrProcessQuery) referenced from llmnr_responder.o(i.llmnrResponderInit)
 <LI><a href="#[6f]">nbnsProcessMessage</a> from nbns_common.o(i.nbnsProcessMessage) referenced from nbns_common.o(i.nbnsInit)
 <LI><a href="#[70]">netTask</a> from net.o(i.netTask) referenced from net.o(i.netInit)
 <LI><a href="#[72]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[71]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[7f]">stm32f4xxEthDisableIrq</a> from stm32f4xx_eth_driver.o(i.stm32f4xxEthDisableIrq) referenced from stm32f4xx_eth_driver.o(.constdata)
 <LI><a href="#[7e]">stm32f4xxEthEnableIrq</a> from stm32f4xx_eth_driver.o(i.stm32f4xxEthEnableIrq) referenced from stm32f4xx_eth_driver.o(.constdata)
 <LI><a href="#[80]">stm32f4xxEthEventHandler</a> from stm32f4xx_eth_driver.o(i.stm32f4xxEthEventHandler) referenced from stm32f4xx_eth_driver.o(.constdata)
 <LI><a href="#[7c]">stm32f4xxEthInit</a> from stm32f4xx_eth_driver.o(i.stm32f4xxEthInit) referenced from stm32f4xx_eth_driver.o(.constdata)
 <LI><a href="#[85]">stm32f4xxEthReadPhyReg</a> from stm32f4xx_eth_driver.o(i.stm32f4xxEthReadPhyReg) referenced from stm32f4xx_eth_driver.o(.constdata)
 <LI><a href="#[81]">stm32f4xxEthSendPacket</a> from stm32f4xx_eth_driver.o(i.stm32f4xxEthSendPacket) referenced from stm32f4xx_eth_driver.o(.constdata)
 <LI><a href="#[7d]">stm32f4xxEthTick</a> from stm32f4xx_eth_driver.o(i.stm32f4xxEthTick) referenced from stm32f4xx_eth_driver.o(.constdata)
 <LI><a href="#[82]">stm32f4xxEthUpdateMacAddrFilter</a> from stm32f4xx_eth_driver.o(i.stm32f4xxEthUpdateMacAddrFilter) referenced from stm32f4xx_eth_driver.o(.constdata)
 <LI><a href="#[83]">stm32f4xxEthUpdateMacConfig</a> from stm32f4xx_eth_driver.o(i.stm32f4xxEthUpdateMacConfig) referenced from stm32f4xx_eth_driver.o(.constdata)
 <LI><a href="#[84]">stm32f4xxEthWritePhyReg</a> from stm32f4xx_eth_driver.o(i.stm32f4xxEthWritePhyReg) referenced from stm32f4xx_eth_driver.o(.constdata)
 <LI><a href="#[6e]">webSocketClientRngCallback</a> from main.o(i.webSocketClientRngCallback) referenced from main.o(i.main)
 <LI><a href="#[a]">xBeeintervalRSSI</a> from xbee.o(i.xBeeintervalRSSI) referenced 2 times from xbee.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[86]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[87]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[89]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2b8]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2b9]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2ba]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[2bb]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[8a]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[2bc]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[8b]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[b8]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[8d]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[8e]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[2bd]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[9e]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[90]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[92]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[2be]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[2bf]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[94]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[2c0]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[2c1]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[2c2]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[96]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[2c3]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[2c4]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[2c5]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[2c6]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[2c7]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[2c8]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[2c9]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[2ca]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[2cb]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[97]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000024))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[2cc]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[2cd]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[2ce]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[2cf]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[2d0]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[2d1]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[a3]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[2d2]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[2d3]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[99]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_stdio_2 &rArr; _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[2d4]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[2d5]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[2d6]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[2d7]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[2d8]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[2d9]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[88]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[2da]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[9b]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[9d]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[2db]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[9f]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; netConfigInterface &rArr; llmnrResponderInit &rArr; ipv4JoinMulticastGroup &rArr; igmpHostJoinGroup &rArr; igmpHostSendMembershipReport &rArr; igmpSendMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[2dc]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[e2]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[a2]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[2dd]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[a4]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[11]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2ac]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[2ab]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[13]"></a>PendSV_Handler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[29e]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[b]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2de]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[27]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[d9]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[a7]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macStringToAddr
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4StringToAddr
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>

<P><STRONG><a name="[a8]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[ab]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[10b]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[2df]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>tolower</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tolower.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>

<P><STRONG><a name="[ad]"></a>toupper</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, toupper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = toupper &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsEncodeName
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsCompareName
</UL>

<P><STRONG><a name="[ae]"></a>__2fprintf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, __2fprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPServer
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolAlloc
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netProcessLinkChange
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientDumpConfig
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthInit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8742Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8742EventHandler
</UL>

<P><STRONG><a name="[b0]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeWeatherNodesensor
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MasternodeInfo
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;formatSystemTime
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4AddrToString
</UL>

<P><STRONG><a name="[b3]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[b4]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[b2]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[8c]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[b6]"></a>__printf</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[1cf]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipStringToAddr
</UL>

<P><STRONG><a name="[167]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethUpdateOutStats
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethUpdateInStats
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethCheckDestAddr
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessPacket
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethDropMacAddr
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethAcceptMacAddr
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessRequest
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessReply
</UL>

<P><STRONG><a name="[225]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetInterfaceName
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetHostname
</UL>

<P><STRONG><a name="[b9]"></a>strncasecmp</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, strncasecmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = strncasecmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsCompareName
</UL>

<P><STRONG><a name="[224]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetInterfaceName
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetHostname
</UL>

<P><STRONG><a name="[bd]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowRead
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferWrite
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferRead
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferCopy
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketProcessEthPacket
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketProcessIpPacket
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAddOption
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsParseName
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpAddOption
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthReceivePacket
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Update
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Final
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[ba]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[2e0]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[13e]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MasternodeInfo
</UL>

<P><STRONG><a name="[bc]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[2e1]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MasternodeInfo
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceiveEx
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendReply
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendProbe
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpEnqueuePacket
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRejectSegment
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpSendMessage
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrSendResponse
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendResponse
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[2e2]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2e3]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2e4]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[29b]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateSackBlocks
</UL>

<P><STRONG><a name="[2e5]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[be]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[2e6]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[185]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitRand
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
</UL>

<P><STRONG><a name="[c2]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[c1]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[cb]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowInit
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketInit
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpInit
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketInit
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4Init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsInit
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpInit
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethInit
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketAllocate
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpCreateEntry
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[2e7]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[2e8]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[159]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[2e9]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[a9]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[95]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[e4]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>

<P><STRONG><a name="[2ea]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[2eb]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[2ec]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[2ed]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[c5]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[93]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[c7]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[3]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[b1]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[69]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[c8]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[c9]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[8f]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[af]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>

<P><STRONG><a name="[98]"></a>_initio</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[9a]"></a>_terminateio</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_stdio_2
</UL>

<P><STRONG><a name="[2ee]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[d8]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2ef]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[ca]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[ce]"></a>setvbuf</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, setvbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[cc]"></a>freopen</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, fopen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[d2]"></a>fopen</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fopen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[cf]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[2f0]"></a>fclose</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text), UNUSED)

<P><STRONG><a name="[cd]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[c6]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[2f1]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2f2]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2f3]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[d1]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fseek &rArr; _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[2f4]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[dd]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[de]"></a>_writebuf</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _writebuf
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>

<P><STRONG><a name="[d3]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _fflush &rArr; _writebuf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[e1]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>

<P><STRONG><a name="[a1]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[d6]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[d5]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[d7]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[a5]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[db]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[2f5]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
</UL>

<P><STRONG><a name="[e5]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[f]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2a9]"></a>CheckNodeCaonnected</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, weathersensor.o(i.CheckNodeCaonnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CheckNodeCaonnected
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xBeeConnectionKeeper
</UL>

<P><STRONG><a name="[12f]"></a>ConvertStringtoHEX</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, stm32custombootloader.o(i.ConvertStringtoHEX))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ConvertStringtoHEX
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_verify_fanuc
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexIntelDecodeFlashProgramming
</UL>

<P><STRONG><a name="[12]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[e6]"></a>DecodeWeatherNodesensor</STRONG> (Thumb, 530 bytes, Stack size 72 bytes, weathersensor.o(i.DecodeWeatherNodesensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = DecodeWeatherNodesensor &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xBeeAPIhandle
</UL>

<P><STRONG><a name="[52]"></a>ETH_IRQHandler</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, stm32f4xx_eth_driver.o(i.ETH_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ETH_IRQHandler &rArr; osSetEventFromIsr &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEventFromIsr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[e8]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f4xx_hal_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetErrorCode
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[eb]"></a>GOTO_APP</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32custombootloader.o(i.GOTO_APP))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GOTO_APP &rArr; HAL_RCC_DeInit &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_DeInit
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexIntelDecodeFlashProgramming
</UL>

<P><STRONG><a name="[ee]"></a>HAL_DMA_Abort</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[125]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[ed]"></a>HAL_DeInit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GOTO_APP
</UL>

<P><STRONG><a name="[f0]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_Init
</UL>

<P><STRONG><a name="[131]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexIntelDecodeFlashProgramming
</UL>

<P><STRONG><a name="[f1]"></a>HAL_FLASH_Program</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, stm32f4xx_hal_flash.o(i.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Word
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_HalfWord
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_DoubleWord
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexIntelDecodeFlashProgramming
</UL>

<P><STRONG><a name="[130]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexIntelDecodeFlashProgramming
</UL>

<P><STRONG><a name="[fe]"></a>HAL_GPIO_Init</STRONG> (Thumb, 450 bytes, Stack size 40 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthInitGpio
</UL>

<P><STRONG><a name="[143]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask03
</UL>

<P><STRONG><a name="[135]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initxBee
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthInitGpio
</UL>

<P><STRONG><a name="[e9]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MasternodeInfo
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_DeInit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_GenerateRandomNumber
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[f6]"></a>HAL_I2C_Init</STRONG> (Thumb, 376 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f9]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 294 bytes, Stack size 64 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_Mem_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_WriteData
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_WriteCommand
</UL>

<P><STRONG><a name="[f7]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, stm32f4xx_hal_msp.o(i.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[153]"></a>HAL_IWDG_Refresh</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_iwdg.o(i.HAL_IWDG_Refresh))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPServer
</UL>

<P><STRONG><a name="[121]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[ff]"></a>HAL_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[101]"></a>HAL_InitTick</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, stm32f4xx_hal_timebase_tim.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_DeInit
</UL>

<P><STRONG><a name="[ef]"></a>HAL_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DeInit
</UL>

<P><STRONG><a name="[102]"></a>HAL_MspInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[104]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>

<P><STRONG><a name="[103]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[100]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[109]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[ec]"></a>HAL_RCC_DeInit</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, stm32f4xx_hal_rcc_ex.o(i.HAL_RCC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_RCC_DeInit &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GOTO_APP
</UL>

<P><STRONG><a name="[105]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[f8]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[157]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[10a]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[10c]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 856 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[10d]"></a>HAL_RNG_DeInit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f4xx_hal_rng.o(i.HAL_RNG_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RNG_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trngInit
</UL>

<P><STRONG><a name="[10f]"></a>HAL_RNG_GenerateRandomNumber</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, stm32f4xx_hal_rng.o(i.HAL_RNG_GenerateRandomNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RNG_GenerateRandomNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trngGetRandomData
</UL>

<P><STRONG><a name="[110]"></a>HAL_RNG_Init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32f4xx_hal_rng.o(i.HAL_RNG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RNG_Init &rArr; HAL_RNG_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trngInit
</UL>

<P><STRONG><a name="[10e]"></a>HAL_RNG_MspDeInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_msp.o(i.HAL_RNG_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_DeInit
</UL>

<P><STRONG><a name="[111]"></a>HAL_RNG_MspInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_RNG_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RNG_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_Init
</UL>

<P><STRONG><a name="[11e]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[120]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[137]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[106]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[112]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[107]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask02
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[114]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_TI2_ConfigInputStage
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[11a]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[119]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 358 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[11b]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[11c]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[11d]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[11f]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[127]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UARTEx_RxEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[126]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[122]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 610 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[129]"></a>HAL_UART_Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12a]"></a>HAL_UART_MspInit</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, stm32f4xx_hal_msp.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[156]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[12c]"></a>HAL_UART_Transmit</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xBeeintervalRSSI
</UL>

<P><STRONG><a name="[128]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[d]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[12e]"></a>HexIntelDecodeFlashProgramming</STRONG> (Thumb, 350 bytes, Stack size 88 bytes, stm32custombootloader.o(i.HexIntelDecodeFlashProgramming))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HexIntelDecodeFlashProgramming &rArr; GOTO_APP &rArr; HAL_RCC_DeInit &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GOTO_APP
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertStringtoHEX
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPServer
</UL>

<P><STRONG><a name="[142]"></a>Initweather</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, weathersensor.o(i.Initweather))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Initweather
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask03
</UL>

<P><STRONG><a name="[139]"></a>MasternodeInfo</STRONG> (Thumb, 340 bytes, Stack size 256 bytes, ssd1306_tests.o(i.MasternodeInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = MasternodeInfo &rArr; ssd1306_UpdateScreen &rArr; ssd1306_WriteCommand &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_WriteString
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_UpdateScreen
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_SetCursor
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_Fill
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>

<P><STRONG><a name="[e]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>StartDefaultTask</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.StartDefaultTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = StartDefaultTask &rArr;  StartDefaultTask (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MasternodeInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[74]"></a>StartTask02</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, main.o(i.StartTask02))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = StartTask02 &rArr; xBeeFunction &rArr; xBeeAPIhandle &rArr; DecodeWeatherNodesensor &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xBeeFunction
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initxBee
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>StartTask03</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, main.o(i.StartTask03))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = StartTask03 &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initweather
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[14]"></a>SysTick_Handler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[145]"></a>SystemClock_Config</STRONG> (Thumb, 140 bytes, Stack size 88 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66]"></a>SystemInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[76]"></a>TCPServer</STRONG> (Thumb, 346 bytes, Stack size 1184 bytes, main.o(i.TCPServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 1984 + Unknown Stack Size
<LI>Call Chain = TCPServer &rArr; socketReceive &rArr; socketReceiveEx &rArr; tcpReceive &rArr; tcpUpdateReceiveWindow &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpGetState
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSetTimeout
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceive
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketOpen
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketListen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketClose
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketBind
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketAccept
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;program_verify_fanuc
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelayTask
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipStringToAddr
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexIntelDecodeFlashProgramming
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Refresh
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[31]"></a>TIM2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM2_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM5_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.TIM5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM5_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WeatherProcesstimer
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xBeeTimer
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.TIM6_DAC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM6_DAC_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[113]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 156 bytes, Stack size 20 bytes, stm32f4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[115]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[3c]"></a>USART3_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART3_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xBee_IRQHandler
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[155]"></a>WeatherProcesstimer</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, weathersensor.o(i.WeatherProcesstimer))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
</UL>

<P><STRONG><a name="[b7]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[d4]"></a>_sys_close</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, retarget_io.o(i._sys_close))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[dc]"></a>_sys_flen</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, retarget_io.o(i._sys_flen))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[da]"></a>_sys_istty</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, retarget_io.o(i._sys_istty))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[d0]"></a>_sys_open</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, retarget_io.o(i._sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _sys_open
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[df]"></a>_sys_seek</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, retarget_io.o(i._sys_seek))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[e0]"></a>_sys_write</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, retarget_io.o(i._sys_write))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[2b5]"></a>aesEncryptBlock</STRONG> (Thumb, 540 bytes, Stack size 36 bytes, aes.o(i.aesEncryptBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = aesEncryptBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowGenerateBlock
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowFastReseed
</UL>

<P><STRONG><a name="[2b4]"></a>aesInit</STRONG> (Thumb, 386 bytes, Stack size 20 bytes, aes.o(i.aesInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = aesInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowRead
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowFastReseed
</UL>

<P><STRONG><a name="[15a]"></a>arpCreateEntry</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, arp.o(i.arpCreateEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = arpCreateEntry &rArr; arpFlushQueuedPackets &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFlushQueuedPackets
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpResolve
</UL>

<P><STRONG><a name="[15d]"></a>arpEnqueuePacket</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, arp.o(i.arpEnqueuePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = arpEnqueuePacket &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferCopy
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAlloc
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFindEntry
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
</UL>

<P><STRONG><a name="[15f]"></a>arpFindEntry</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, arp.o(i.arpFindEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = arpFindEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpResolve
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessReply
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpEnqueuePacket
</UL>

<P><STRONG><a name="[163]"></a>arpFlushCache</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, arp.o(i.arpFlushCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = arpFlushCache &rArr; arpFlushQueuedPackets &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFlushQueuedPackets
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4LinkChangeEvent
</UL>

<P><STRONG><a name="[15c]"></a>arpFlushQueuedPackets</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, arp.o(i.arpFlushQueuedPackets))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = arpFlushQueuedPackets &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpTick
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFlushCache
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpCreateEntry
</UL>

<P><STRONG><a name="[164]"></a>arpInit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arp.o(i.arpInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = arpInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
</UL>

<P><STRONG><a name="[165]"></a>arpProcessPacket</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, arp.o(i.arpProcessPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = arpProcessPacket &rArr; arpProcessRequest &rArr; arpSendReply &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessRequest
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessReply
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
</UL>

<P><STRONG><a name="[169]"></a>arpProcessReply</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, arp.o(i.arpProcessReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = arpProcessReply &rArr; arpSendQueuedPackets &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsTentativeAddr
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendQueuedPackets
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFindEntry
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsBroadcastAddr
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessPacket
</UL>

<P><STRONG><a name="[16a]"></a>arpProcessRequest</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, arp.o(i.arpProcessRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = arpProcessRequest &rArr; arpSendReply &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendReply
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsBroadcastAddr
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessPacket
</UL>

<P><STRONG><a name="[16f]"></a>arpResolve</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, arp.o(i.arpResolve))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFindEntry
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpCreateEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
</UL>

<P><STRONG><a name="[171]"></a>arpSendProbe</STRONG> (Thumb, 152 bytes, Stack size 64 bytes, arp.o(i.arpSendProbe))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = arpSendProbe &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethAllocBuffer
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateProbing
</UL>

<P><STRONG><a name="[16d]"></a>arpSendQueuedPackets</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, arp.o(i.arpSendQueuedPackets))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = arpSendQueuedPackets &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4UpdateOutStats
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessReply
</UL>

<P><STRONG><a name="[16e]"></a>arpSendReply</STRONG> (Thumb, 154 bytes, Stack size 72 bytes, arp.o(i.arpSendReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = arpSendReply &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethAllocBuffer
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessRequest
</UL>

<P><STRONG><a name="[170]"></a>arpSendRequest</STRONG> (Thumb, 168 bytes, Stack size 88 bytes, arp.o(i.arpSendRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SelectSourceAddr
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethAllocBuffer
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpTick
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpResolve
</UL>

<P><STRONG><a name="[177]"></a>arpTick</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, arp.o(i.arpTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = arpTick &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFlushQueuedPackets
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>

<P><STRONG><a name="[2a2]"></a>configureTimerForRunTimeStats</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, freertos.o(i.configureTimerForRunTimeStats))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[178]"></a>dhcpAddOption</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, dhcp_common.o(i.dhcpAddOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dhcpAddOption
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
</UL>

<P><STRONG><a name="[179]"></a>dhcpClientChangeState</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, dhcp_client_misc.o(i.dhcpClientChangeState))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = dhcpClientChangeState &rArr; formatSystemTime &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;formatSystemTime
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRequesting
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRenewing
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebooting
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebinding
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateProbing
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateInitReboot
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateInit
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateBound
</UL>

<P><STRONG><a name="[17d]"></a>dhcpClientCheckTimeout</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, dhcp_client_misc.o(i.dhcpClientCheckTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = dhcpClientCheckTimeout &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateSelecting
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRequesting
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebooting
</UL>

<P><STRONG><a name="[17e]"></a>dhcpClientComputeElapsedTime</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, dhcp_client_misc.o(i.dhcpClientComputeElapsedTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dhcpClientComputeElapsedTime
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
</UL>

<P><STRONG><a name="[17f]"></a>dhcpClientDumpConfig</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, dhcp_client_misc.o(i.dhcpClientDumpConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = dhcpClientDumpConfig &rArr; formatSystemTime &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;formatSystemTime
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4AddrToString
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateProbing
</UL>

<P><STRONG><a name="[181]"></a>dhcpClientLinkChangeEvent</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, dhcp_client_misc.o(i.dhcpClientLinkChangeEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = dhcpClientLinkChangeEvent &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientResetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4LinkChangeEvent
</UL>

<P><STRONG><a name="[182]"></a>dhcpClientResetConfig</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, dhcp_client_misc.o(i.dhcpClientResetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientLinkChangeEvent
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebinding
</UL>

<P><STRONG><a name="[183]"></a>dhcpClientSendDecline</STRONG> (Thumb, 284 bytes, Stack size 112 bytes, dhcp_client_misc.o(i.dhcpClientSendDecline))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = dhcpClientSendDecline &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAllocBuffer
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpAddOption
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateProbing
</UL>

<P><STRONG><a name="[189]"></a>dhcpClientSendDiscover</STRONG> (Thumb, 258 bytes, Stack size 112 bytes, dhcp_client_misc.o(i.dhcpClientSendDiscover))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = dhcpClientSendDiscover &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAllocBuffer
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpAddOption
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientComputeElapsedTime
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateSelecting
</UL>

<P><STRONG><a name="[18a]"></a>dhcpClientSendRequest</STRONG> (Thumb, 414 bytes, Stack size 112 bytes, dhcp_client_misc.o(i.dhcpClientSendRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = dhcpClientSendRequest &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAllocBuffer
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpGetOption
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpAddOption
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientComputeElapsedTime
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRequesting
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRenewing
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebooting
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebinding
</UL>

<P><STRONG><a name="[18c]"></a>dhcpClientStateBound</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, dhcp_client_fsm.o(i.dhcpClientStateBound))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = dhcpClientStateBound &rArr; dhcpClientChangeState &rArr; formatSystemTime &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[18d]"></a>dhcpClientStateInit</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, dhcp_client_fsm.o(i.dhcpClientStateInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = dhcpClientStateInit &rArr; dhcpClientChangeState &rArr; formatSystemTime &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRandRange
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[18f]"></a>dhcpClientStateInitReboot</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, dhcp_client_fsm.o(i.dhcpClientStateInitReboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = dhcpClientStateInitReboot &rArr; dhcpClientChangeState &rArr; formatSystemTime &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRandRange
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[190]"></a>dhcpClientStateProbing</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, dhcp_client_fsm.o(i.dhcpClientStateProbing))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = dhcpClientStateProbing &rArr; dhcpClientSendDecline &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendProbe
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientDumpConfig
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[191]"></a>dhcpClientStateRebinding</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, dhcp_client_fsm.o(i.dhcpClientStateRebinding))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = dhcpClientStateRebinding &rArr; dhcpClientSendRequest &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientResetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[193]"></a>dhcpClientStateRebooting</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, dhcp_client_fsm.o(i.dhcpClientStateRebooting))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = dhcpClientStateRebooting &rArr; dhcpClientSendRequest &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRandRange
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientCheckTimeout
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[194]"></a>dhcpClientStateRenewing</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, dhcp_client_fsm.o(i.dhcpClientStateRenewing))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = dhcpClientStateRenewing &rArr; dhcpClientSendRequest &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[195]"></a>dhcpClientStateRequesting</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, dhcp_client_fsm.o(i.dhcpClientStateRequesting))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = dhcpClientStateRequesting &rArr; dhcpClientSendRequest &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRandRange
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientCheckTimeout
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[196]"></a>dhcpClientStateSelecting</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, dhcp_client_fsm.o(i.dhcpClientStateSelecting))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = dhcpClientStateSelecting &rArr; dhcpClientSendDiscover &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRandRange
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientCheckTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[197]"></a>dhcpClientTick</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, dhcp_client_misc.o(i.dhcpClientTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = dhcpClientTick &rArr; dhcpClientStateRequesting &rArr; dhcpClientSendRequest &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateSelecting
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRequesting
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRenewing
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebooting
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebinding
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateProbing
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateInitReboot
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateInit
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateBound
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>

<P><STRONG><a name="[18b]"></a>dhcpGetOption</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, dhcp_common.o(i.dhcpGetOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = dhcpGetOption
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
</UL>

<P><STRONG><a name="[198]"></a>dnsCompareName</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, dns_common.o(i.dnsCompareName))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + In Cycle
<LI>Call Chain = dnsCompareName &rArr;  dnsCompareName (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsCompareName
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsCompareName
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrProcessQuery
</UL>

<P><STRONG><a name="[199]"></a>dnsDeleteEntry</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, dns_cache.o(i.dnsDeleteEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = dnsDeleteEntry &rArr; udpDetachRxCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpDetachRxCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsTick
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsFlushCache
</UL>

<P><STRONG><a name="[19f]"></a>dnsEncodeName</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, dns_common.o(i.dnsEncodeName))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dnsEncodeName
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrSendResponse
</UL>

<P><STRONG><a name="[19b]"></a>dnsFlushCache</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, dns_cache.o(i.dnsFlushCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = dnsFlushCache &rArr; dnsDeleteEntry &rArr; udpDetachRxCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsDeleteEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netProcessLinkChange
</UL>

<P><STRONG><a name="[19c]"></a>dnsInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dns_cache.o(i.dnsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dnsInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[19d]"></a>dnsParseName</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, dns_common.o(i.dnsParseName))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = dnsParseName &rArr;  dnsParseName (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsParseName
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsParseName
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrProcessQuery
</UL>

<P><STRONG><a name="[19e]"></a>dnsSendQuery</STRONG> (Thumb, 226 bytes, Stack size 72 bytes, dns_client.o(i.dnsSendQuery))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = dnsSendQuery &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAllocBuffer
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsEncodeName
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsTick
</UL>

<P><STRONG><a name="[1a0]"></a>dnsTick</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, dns_cache.o(i.dnsTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = dnsTick &rArr; nbnsSendQuery &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsDeleteEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>

<P><STRONG><a name="[1a2]"></a>ethAcceptMacAddr</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, ethernet.o(i.ethAcceptMacAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ethAcceptMacAddr &rArr; nicUpdateMacAddrFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicUpdateMacAddrFilter
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4JoinMulticastGroup
</UL>

<P><STRONG><a name="[172]"></a>ethAllocBuffer</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ethernet.o(i.ethAllocBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendReply
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendProbe
</UL>

<P><STRONG><a name="[1a5]"></a>ethCalcCrc</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ethernet_misc.o(i.ethCalcCrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ethCalcCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethCheckCrc
</UL>

<P><STRONG><a name="[1b2]"></a>ethCalcCrcEx</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, ethernet_misc.o(i.ethCalcCrcEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ethCalcCrcEx
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
</UL>

<P><STRONG><a name="[1a4]"></a>ethCheckCrc</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, ethernet_misc.o(i.ethCheckCrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ethCheckCrc &rArr; ethCalcCrc
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethCalcCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
</UL>

<P><STRONG><a name="[1a6]"></a>ethCheckDestAddr</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, ethernet_misc.o(i.ethCheckDestAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ethCheckDestAddr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
</UL>

<P><STRONG><a name="[1a7]"></a>ethDropMacAddr</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, ethernet.o(i.ethDropMacAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ethDropMacAddr &rArr; nicUpdateMacAddrFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicUpdateMacAddrFilter
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4JoinMulticastGroup
</UL>

<P><STRONG><a name="[1a8]"></a>ethInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ethernet.o(i.ethInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ethInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
</UL>

<P><STRONG><a name="[1a9]"></a>ethPadFrame</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ethernet_misc.o(i.ethPadFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ethPadFrame &rArr; netBufferAppend
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAppend
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
</UL>

<P><STRONG><a name="[1ab]"></a>ethProcessFrame</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, ethernet.o(i.ethProcessFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 976 + Unknown Stack Size
<LI>Call Chain = ethProcessFrame &rArr; ipv4ProcessPacket &rArr; ipv4ReassembleDatagram &rArr; ipv4ProcessDatagram &rArr; tcpProcessSegment &rArr; tcpStateSynReceived &rArr; tcpStateEstablished &rArr; tcpProcessSegmentData &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketProcessEthPacket
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPhysicalInterface
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethUpdateInStats
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethUpdateErrorStats
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethCheckDestAddr
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethCheckCrc
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicProcessPacket
</UL>

<P><STRONG><a name="[174]"></a>ethSendFrame</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, ethernet.o(i.ethSendFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ethSendFrame &rArr; nicSendPacket &rArr; osWaitForEvent &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicSendPacket
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPhysicalInterface
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAppend
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethUpdateOutStats
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethPadFrame
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethCalcCrcEx
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendReply
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendQueuedPackets
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendProbe
</UL>

<P><STRONG><a name="[1af]"></a>ethUpdateErrorStats</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ethernet_misc.o(i.ethUpdateErrorStats))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
</UL>

<P><STRONG><a name="[1ad]"></a>ethUpdateInStats</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ethernet_misc.o(i.ethUpdateInStats))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ethUpdateInStats &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
</UL>

<P><STRONG><a name="[1b1]"></a>ethUpdateOutStats</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ethernet_misc.o(i.ethUpdateOutStats))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ethUpdateOutStats &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
</UL>

<P><STRONG><a name="[17a]"></a>formatSystemTime</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, date_time.o(i.formatSystemTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = formatSystemTime &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientDumpConfig
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
</UL>

<P><STRONG><a name="[6b]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, debug.o(i.fputc))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[2a4]"></a>getRunTimeCounterValue</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, freertos.o(i.getRunTimeCounterValue))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[1b4]"></a>icmpProcessEchoRequest</STRONG> (Thumb, 232 bytes, Stack size 96 bytes, icmp.o(i.icmpProcessEchoRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = icmpProcessEchoRequest &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferConcat
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendDatagram
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SelectSourceAddr
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksumEx
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsBroadcastAddr
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessMessage
</UL>

<P><STRONG><a name="[1b9]"></a>icmpProcessMessage</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, icmp.o(i.icmpProcessMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = icmpProcessMessage &rArr; icmpProcessEchoRequest &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksumEx
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
</UL>

<P><STRONG><a name="[1ba]"></a>icmpSendErrorMessage</STRONG> (Thumb, 260 bytes, Stack size 96 bytes, icmp.o(i.icmpSendErrorMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = icmpSendErrorMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferConcat
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendDatagram
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksumEx
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsBroadcastAddr
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragTick
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
</UL>

<P><STRONG><a name="[1bb]"></a>igmpHostInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, igmp_host.o(i.igmpHostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = igmpHostInit &rArr; netStartTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpInit
</UL>

<P><STRONG><a name="[1bd]"></a>igmpHostJoinGroup</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, igmp_host.o(i.igmpHostJoinGroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = igmpHostJoinGroup &rArr; igmpHostSendMembershipReport &rArr; igmpSendMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostSendMembershipReport
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4JoinMulticastGroup
</UL>

<P><STRONG><a name="[1bf]"></a>igmpHostLinkChangeEvent</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, igmp_host.o(i.igmpHostLinkChangeEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = igmpHostLinkChangeEvent &rArr; igmpHostSendMembershipReport &rArr; igmpSendMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostSendMembershipReport
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpLinkChangeEvent
</UL>

<P><STRONG><a name="[1c0]"></a>igmpHostProcessMembershipQuery</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, igmp_host_misc.o(i.igmpHostProcessMembershipQuery))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = igmpHostProcessMembershipQuery &rArr; igmpRand &rArr; netGetRand &rArr; netGetRandBit
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpRand
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostProcessMessage
</UL>

<P><STRONG><a name="[1c3]"></a>igmpHostProcessMembershipReport</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, igmp_host_misc.o(i.igmpHostProcessMembershipReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = igmpHostProcessMembershipReport
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostProcessMessage
</UL>

<P><STRONG><a name="[1c2]"></a>igmpHostProcessMessage</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, igmp_host_misc.o(i.igmpHostProcessMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = igmpHostProcessMessage &rArr; igmpHostProcessMembershipQuery &rArr; igmpRand &rArr; netGetRand &rArr; netGetRandBit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostProcessMembershipReport
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostProcessMembershipQuery
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpProcessMessage
</UL>

<P><STRONG><a name="[1be]"></a>igmpHostSendMembershipReport</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, igmp_host_misc.o(i.igmpHostSendMembershipReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = igmpHostSendMembershipReport &rArr; igmpSendMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksum
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpSendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostJoinGroup
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostTick
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostLinkChangeEvent
</UL>

<P><STRONG><a name="[1c6]"></a>igmpHostTick</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, igmp_host.o(i.igmpHostTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = igmpHostTick &rArr; igmpHostSendMembershipReport &rArr; igmpSendMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTimerExpired
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostSendMembershipReport
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpTick
</UL>

<P><STRONG><a name="[1c8]"></a>igmpInit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, igmp_common.o(i.igmpInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = igmpInit &rArr; ipv4JoinMulticastGroup &rArr; igmpHostJoinGroup &rArr; igmpHostSendMembershipReport &rArr; igmpSendMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4JoinMulticastGroup
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostInit
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
</UL>

<P><STRONG><a name="[1ca]"></a>igmpLinkChangeEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, igmp_common.o(i.igmpLinkChangeEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = igmpLinkChangeEvent &rArr; igmpHostLinkChangeEvent &rArr; igmpHostSendMembershipReport &rArr; igmpSendMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostLinkChangeEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4LinkChangeEvent
</UL>

<P><STRONG><a name="[1cb]"></a>igmpProcessMessage</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, igmp_common.o(i.igmpProcessMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = igmpProcessMessage &rArr; igmpHostProcessMessage &rArr; igmpHostProcessMembershipQuery &rArr; igmpRand &rArr; netGetRand &rArr; netGetRandBit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksumEx
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostProcessMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
</UL>

<P><STRONG><a name="[1c1]"></a>igmpRand</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, igmp_host_misc.o(i.igmpRand))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = igmpRand &rArr; netGetRand &rArr; netGetRandBit
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostProcessMembershipQuery
</UL>

<P><STRONG><a name="[1c5]"></a>igmpSendMessage</STRONG> (Thumb, 116 bytes, Stack size 72 bytes, igmp_common.o(i.igmpSendMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = igmpSendMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendDatagram
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAppend
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostSendMembershipReport
</UL>

<P><STRONG><a name="[1cc]"></a>igmpTick</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, igmp_common.o(i.igmpTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = igmpTick &rArr; igmpHostTick &rArr; igmpHostSendMembershipReport &rArr; igmpSendMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostTick
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>

<P><STRONG><a name="[140]"></a>initxBee</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, xbee.o(i.initxBee))
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask02
</UL>

<P><STRONG><a name="[1b5]"></a>ipAllocBuffer</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ip.o(i.ipAllocBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = ipAllocBuffer &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethAllocBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragmentDatagram
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAllocBuffer
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRejectSegment
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpSendMessage
</UL>

<P><STRONG><a name="[1c4]"></a>ipCalcChecksum</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, ip.o(i.ipCalcChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ipCalcChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksumEx
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostSendMembershipReport
</UL>

<P><STRONG><a name="[1b7]"></a>ipCalcChecksumEx</STRONG> (Thumb, 118 bytes, Stack size 28 bytes, ip.o(i.ipCalcChecksumEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ipCalcChecksumEx &rArr; ipCalcChecksum
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpProcessMessage
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessMessage
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
</UL>

<P><STRONG><a name="[1cd]"></a>ipCalcUpperLayerChecksumEx</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ip.o(i.ipCalcUpperLayerChecksumEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ipCalcUpperLayerChecksumEx &rArr; ipCalcChecksumEx &rArr; ipCalcChecksum
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksumEx
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRejectSegment
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[1ce]"></a>ipSendDatagram</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ip.o(i.ipSendDatagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendDatagram
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRejectSegment
</UL>

<P><STRONG><a name="[14a]"></a>ipStringToAddr</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ip.o(i.ipStringToAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ipStringToAddr &rArr; ipv4StringToAddr &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4StringToAddr
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPServer
</UL>

<P><STRONG><a name="[1d1]"></a>ipv4AddRouterAlertOption</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ipv4_misc.o(i.ipv4AddRouterAlertOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ipv4AddRouterAlertOption &rArr; netBufferAt
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
</UL>

<P><STRONG><a name="[180]"></a>ipv4AddrToString</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ipv4.o(i.ipv4AddrToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = ipv4AddrToString &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientDumpConfig
</UL>

<P><STRONG><a name="[1d2]"></a>ipv4CheckDestAddr</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ipv4_misc.o(i.ipv4CheckDestAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ipv4CheckDestAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsBroadcastAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
</UL>

<P><STRONG><a name="[1d3]"></a>ipv4CheckSourceAddr</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ipv4_misc.o(i.ipv4CheckSourceAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ipv4CheckSourceAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsBroadcastAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
</UL>

<P><STRONG><a name="[1d7]"></a>ipv4DumpHeader</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ipv4.o(i.ipv4DumpHeader))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragTick
</UL>

<P><STRONG><a name="[1d4]"></a>ipv4FindHole</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ipv4_frag.o(i.ipv4FindHole))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ipv4FindHole &rArr; netBufferAt
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragTick
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ReassembleDatagram
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SearchFragQueue
</UL>

<P><STRONG><a name="[1d5]"></a>ipv4FlushFragQueue</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ipv4_frag.o(i.ipv4FlushFragQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ipv4FlushFragQueue &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4LinkChangeEvent
</UL>

<P><STRONG><a name="[1d6]"></a>ipv4FragTick</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, ipv4_frag.o(i.ipv4FragTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = ipv4FragTick &rArr; icmpSendErrorMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4DumpHeader
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FindHole
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>

<P><STRONG><a name="[1d8]"></a>ipv4FragmentDatagram</STRONG> (Thumb, 176 bytes, Stack size 72 bytes, ipv4_frag.o(i.ipv4FragmentDatagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferConcat
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendDatagram
</UL>

<P><STRONG><a name="[213]"></a>ipv4GetBroadcastAddr</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ipv4_misc.o(i.ipv4GetBroadcastAddr))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
</UL>

<P><STRONG><a name="[1da]"></a>ipv4Init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ipv4.o(i.ipv4Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ipv4Init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPhysicalInterface
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
</UL>

<P><STRONG><a name="[16b]"></a>ipv4IsBroadcastAddr</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ipv4_misc.o(i.ipv4IsBroadcastAddr))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4UpdateInStats
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4CheckSourceAddr
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4CheckDestAddr
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4UpdateOutStats
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessRequest
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessReply
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[1e6]"></a>ipv4IsLocalHostAddr</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, ipv4_misc.o(i.ipv4IsLocalHostAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ipv4IsLocalHostAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
</UL>

<P><STRONG><a name="[1e7]"></a>ipv4IsOnLink</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ipv4_misc.o(i.ipv4IsOnLink))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
</UL>

<P><STRONG><a name="[16c]"></a>ipv4IsTentativeAddr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ipv4_misc.o(i.ipv4IsTentativeAddr))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessReply
</UL>

<P><STRONG><a name="[1c9]"></a>ipv4JoinMulticastGroup</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, ipv4.o(i.ipv4JoinMulticastGroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = ipv4JoinMulticastGroup &rArr; igmpHostJoinGroup &rArr; igmpHostSendMembershipReport &rArr; igmpSendMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPhysicalInterface
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethDropMacAddr
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethAcceptMacAddr
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4MapMulticastAddrToMac
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostJoinGroup
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrResponderInit
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpInit
</UL>

<P><STRONG><a name="[1dc]"></a>ipv4LinkChangeEvent</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ipv4.o(i.ipv4LinkChangeEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = ipv4LinkChangeEvent &rArr; igmpLinkChangeEvent &rArr; igmpHostLinkChangeEvent &rArr; igmpHostSendMembershipReport &rArr; igmpSendMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPhysicalInterface
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FlushFragQueue
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpLinkChangeEvent
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientLinkChangeEvent
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFlushCache
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netProcessLinkChange
</UL>

<P><STRONG><a name="[1db]"></a>ipv4MapMulticastAddrToMac</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ipv4_misc.o(i.ipv4MapMulticastAddrToMac))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4JoinMulticastGroup
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
</UL>

<P><STRONG><a name="[1dd]"></a>ipv4ProcessDatagram</STRONG> (Thumb, 226 bytes, Stack size 56 bytes, ipv4.o(i.ipv4ProcessDatagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = ipv4ProcessDatagram &rArr; tcpProcessSegment &rArr; tcpStateSynReceived &rArr; tcpStateEstablished &rArr; tcpProcessSegmentData &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketProcessIpPacket
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4UpdateErrorStats
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpProcessMessage
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessMessage
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ReassembleDatagram
</UL>

<P><STRONG><a name="[1b0]"></a>ipv4ProcessPacket</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, ipv4.o(i.ipv4ProcessPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 936 + Unknown Stack Size
<LI>Call Chain = ipv4ProcessPacket &rArr; ipv4ReassembleDatagram &rArr; ipv4ProcessDatagram &rArr; tcpProcessSegment &rArr; tcpStateSynReceived &rArr; tcpStateEstablished &rArr; tcpProcessSegmentData &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksum
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4UpdateInStats
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4UpdateErrorStats
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ReassembleDatagram
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4CheckSourceAddr
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4CheckDestAddr
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsTentativeAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
</UL>

<P><STRONG><a name="[1e3]"></a>ipv4ReassembleDatagram</STRONG> (Thumb, 408 bytes, Stack size 56 bytes, ipv4_frag.o(i.ipv4ReassembleDatagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = ipv4ReassembleDatagram &rArr; ipv4ProcessDatagram &rArr; tcpProcessSegment &rArr; tcpStateSynReceived &rArr; tcpStateEstablished &rArr; tcpProcessSegmentData &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferWrite
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SearchFragQueue
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FindHole
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
</UL>

<P><STRONG><a name="[1e4]"></a>ipv4SearchFragQueue</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, ipv4_frag.o(i.ipv4SearchFragQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = ipv4SearchFragQueue &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferWrite
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FindHole
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ReassembleDatagram
</UL>

<P><STRONG><a name="[1e8]"></a>ipv4SelectDefaultGateway</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ipv4_misc.o(i.ipv4SelectDefaultGateway))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
</UL>

<P><STRONG><a name="[176]"></a>ipv4SelectSourceAddr</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ipv4_misc.o(i.ipv4SelectSourceAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ipv4SelectSourceAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
</UL>

<P><STRONG><a name="[1b8]"></a>ipv4SendDatagram</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, ipv4.o(i.ipv4SendDatagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragmentDatagram
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipSendDatagram
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpSendMessage
</UL>

<P><STRONG><a name="[1d9]"></a>ipv4SendPacket</STRONG> (Thumb, 414 bytes, Stack size 64 bytes, ipv4.o(i.ipv4SendPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksumEx
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPhysicalInterface
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SelectDefaultGateway
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4MapMulticastAddrToMac
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsOnLink
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsLocalHostAddr
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4CheckSourceAddr
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4AddRouterAlertOption
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4UpdateOutStats
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpResolve
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpEnqueuePacket
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsBroadcastAddr
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendDatagram
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragmentDatagram
</UL>

<P><STRONG><a name="[204]"></a>ipv4SetDefaultGateway</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ipv4.o(i.ipv4SetDefaultGateway))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e9]"></a>ipv4SetDefaultGatewayEx</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ipv4.o(i.ipv4SetDefaultGatewayEx), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>

<P><STRONG><a name="[1ea]"></a>ipv4SetDnsServer</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ipv4.o(i.ipv4SetDnsServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ipv4SetDnsServer &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[202]"></a>ipv4SetHostAddr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ipv4.o(i.ipv4SetHostAddr))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1eb]"></a>ipv4SetHostAddrEx</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ipv4.o(i.ipv4SetHostAddrEx), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>

<P><STRONG><a name="[203]"></a>ipv4SetSubnetMask</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ipv4.o(i.ipv4SetSubnetMask))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ec]"></a>ipv4SetSubnetMaskEx</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ipv4.o(i.ipv4SetSubnetMaskEx), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>

<P><STRONG><a name="[1d0]"></a>ipv4StringToAddr</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, ipv4.o(i.ipv4StringToAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ipv4StringToAddr &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipStringToAddr
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e1]"></a>ipv4UpdateErrorStats</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ipv4_misc.o(i.ipv4UpdateErrorStats))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
</UL>

<P><STRONG><a name="[1e2]"></a>ipv4UpdateInStats</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ipv4_misc.o(i.ipv4UpdateInStats))
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsBroadcastAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
</UL>

<P><STRONG><a name="[175]"></a>ipv4UpdateOutStats</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ipv4_misc.o(i.ipv4UpdateOutStats))
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsBroadcastAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendQueuedPackets
</UL>

<P><STRONG><a name="[7a]"></a>lan8742DisableIrq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lan8742_driver.o(i.lan8742DisableIrq))
<BR>[Address Reference Count : 1]<UL><LI> lan8742_driver.o(.constdata)
</UL>
<P><STRONG><a name="[1f0]"></a>lan8742DumpPhyReg</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lan8742_driver.o(i.lan8742DumpPhyReg))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8742Init
</UL>

<P><STRONG><a name="[79]"></a>lan8742EnableIrq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lan8742_driver.o(i.lan8742EnableIrq))
<BR>[Address Reference Count : 1]<UL><LI> lan8742_driver.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>lan8742EventHandler</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, lan8742_driver.o(i.lan8742EventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = lan8742EventHandler &rArr; nicNotifyLinkChange &rArr; netProcessLinkChange &rArr; ipv4LinkChangeEvent &rArr; igmpLinkChangeEvent &rArr; igmpHostLinkChangeEvent &rArr; igmpHostSendMembershipReport &rArr; igmpSendMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicNotifyLinkChange
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8742ReadPhyReg
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lan8742_driver.o(.constdata)
</UL>
<P><STRONG><a name="[77]"></a>lan8742Init</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, lan8742_driver.o(i.lan8742Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = lan8742Init &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEvent
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8742WritePhyReg
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8742ReadPhyReg
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8742DumpPhyReg
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lan8742_driver.o(.constdata)
</UL>
<P><STRONG><a name="[1ed]"></a>lan8742ReadPhyReg</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lan8742_driver.o(i.lan8742ReadPhyReg))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8742Tick
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8742Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8742EventHandler
</UL>

<P><STRONG><a name="[78]"></a>lan8742Tick</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lan8742_driver.o(i.lan8742Tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lan8742Tick &rArr; osSetEvent &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEvent
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8742ReadPhyReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lan8742_driver.o(.constdata)
</UL>
<P><STRONG><a name="[1ef]"></a>lan8742WritePhyReg</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lan8742_driver.o(i.lan8742WritePhyReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lan8742WritePhyReg
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8742Init
</UL>

<P><STRONG><a name="[6d]"></a>llmnrProcessQuery</STRONG> (Thumb, 232 bytes, Stack size 48 bytes, llmnr_responder.o(i.llmnrProcessQuery))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = llmnrProcessQuery &rArr; llmnrSendResponse &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsParseName
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsCompareName
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrSendResponse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llmnr_responder.o(i.llmnrResponderInit)
</UL>
<P><STRONG><a name="[1f3]"></a>llmnrResponderInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llmnr_responder.o(i.llmnrResponderInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = llmnrResponderInit &rArr; ipv4JoinMulticastGroup &rArr; igmpHostJoinGroup &rArr; igmpHostSendMembershipReport &rArr; igmpSendMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4JoinMulticastGroup
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAttachRxCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
</UL>

<P><STRONG><a name="[1f2]"></a>llmnrSendResponse</STRONG> (Thumb, 272 bytes, Stack size 96 bytes, llmnr_responder.o(i.llmnrSendResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = llmnrSendResponse &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAllocBuffer
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsEncodeName
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrProcessQuery
</UL>

<P><STRONG><a name="[226]"></a>macAddrToEui64</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ethernet.o(i.macAddrToEui64))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetMacAddr
</UL>

<P><STRONG><a name="[1f5]"></a>macStringToAddr</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, ethernet.o(i.macStringToAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = macStringToAddr &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a0]"></a>main</STRONG> (Thumb, 644 bytes, Stack size 96 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = main &rArr; netConfigInterface &rArr; llmnrResponderInit &rArr; ipv4JoinMulticastGroup &rArr; igmpHostJoinGroup &rArr; igmpHostSendMembershipReport &rArr; igmpSendMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_Init
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowSeed
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowInit
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketRegisterRandCallback
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trngGetRandomData
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxCryptoInit
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetPhyDriver
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetMacAddr
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetInterfaceName
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetHostname
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetDriver
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macStringToAddr
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4StringToAddr
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetSubnetMask
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetHostAddr
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetDnsServer
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetDefaultGateway
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_Init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[208]"></a>memPoolAlloc</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, net_mem.o(i.memPoolAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAlloc
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateListen
</UL>

<P><STRONG><a name="[20a]"></a>memPoolFree</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_mem.o(i.memPoolFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = memPoolFree &rArr; osFreeMem &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFlushSynQueue
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFlushRetransmitQueue
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateRetransmitQueue
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateListen
</UL>

<P><STRONG><a name="[21a]"></a>memPoolInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_mem.o(i.memPoolInit))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[20c]"></a>nbnsCompareName</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, nbns_common.o(i.nbnsCompareName))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nbnsCompareName &rArr; toupper &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessQuery
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessResponse
</UL>

<P><STRONG><a name="[20d]"></a>nbnsEncodeName</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, nbns_common.o(i.nbnsEncodeName))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nbnsEncodeName &rArr; toupper &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendResponse
</UL>

<P><STRONG><a name="[20e]"></a>nbnsInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nbns_common.o(i.nbnsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nbnsInit &rArr; udpAttachRxCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAttachRxCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
</UL>

<P><STRONG><a name="[211]"></a>nbnsParseName</STRONG> (Thumb, 118 bytes, Stack size 12 bytes, nbns_common.o(i.nbnsParseName))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nbnsParseName
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessQuery
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessResponse
</UL>

<P><STRONG><a name="[6f]"></a>nbnsProcessMessage</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, nbns_common.o(i.nbnsProcessMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = nbnsProcessMessage &rArr; nbnsProcessQuery &rArr; nbnsSendResponse &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessQuery
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessResponse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nbns_common.o(i.nbnsInit)
</UL>
<P><STRONG><a name="[20f]"></a>nbnsProcessQuery</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, nbns_responder.o(i.nbnsProcessQuery))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = nbnsProcessQuery &rArr; nbnsSendResponse &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendResponse
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsParseName
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsCompareName
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessMessage
</UL>

<P><STRONG><a name="[210]"></a>nbnsProcessResponse</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, nbns_client.o(i.nbnsProcessResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nbnsProcessResponse &rArr; nbnsCompareName &rArr; toupper &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsParseName
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsCompareName
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessMessage
</UL>

<P><STRONG><a name="[1a1]"></a>nbnsSendQuery</STRONG> (Thumb, 166 bytes, Stack size 72 bytes, nbns_client.o(i.nbnsSendQuery))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = nbnsSendQuery &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAllocBuffer
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4GetBroadcastAddr
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsEncodeName
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsTick
</UL>

<P><STRONG><a name="[212]"></a>nbnsSendResponse</STRONG> (Thumb, 196 bytes, Stack size 80 bytes, nbns_responder.o(i.nbnsSendResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = nbnsSendResponse &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAllocBuffer
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsEncodeName
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessQuery
</UL>

<P><STRONG><a name="[161]"></a>netBufferAlloc</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, net_mem.o(i.netBufferAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketProcessEthPacket
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethAllocBuffer
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketProcessIpPacket
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpEnqueuePacket
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
</UL>

<P><STRONG><a name="[1aa]"></a>netBufferAppend</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, net_mem.o(i.netBufferAppend))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netBufferAppend
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethPadFrame
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpSendMessage
</UL>

<P><STRONG><a name="[173]"></a>netBufferAt</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, net_mem.o(i.netBufferAt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netBufferAt
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketProcessEthPacket
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketProcessIpPacket
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ReassembleDatagram
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4AddRouterAlertOption
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpProcessMessage
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessMessage
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendReply
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendProbe
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRejectSegment
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SearchFragQueue
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FindHole
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrSendResponse
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrProcessQuery
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendResponse
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessMessage
</UL>

<P><STRONG><a name="[1b6]"></a>netBufferConcat</STRONG> (Thumb, 114 bytes, Stack size 20 bytes, net_mem.o(i.netBufferConcat))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = netBufferConcat
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragmentDatagram
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReadTxBuffer
</UL>

<P><STRONG><a name="[162]"></a>netBufferCopy</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, net_mem.o(i.netBufferCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = netBufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketProcessIpPacket
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpEnqueuePacket
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWriteRxBuffer
</UL>

<P><STRONG><a name="[160]"></a>netBufferFree</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, net_mem.o(i.netBufferFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketClose
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAlloc
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpReceiveDatagram
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketReceiveIpPacket
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketReceiveEthPacket
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragmentDatagram
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendReply
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendQueuedPackets
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendProbe
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFlushQueuedPackets
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpEnqueuePacket
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRejectSegment
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpSendMessage
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrSendResponse
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendResponse
</UL>

<P><STRONG><a name="[15e]"></a>netBufferGetLength</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, net_mem.o(i.netBufferGetLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netBufferGetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendDatagram
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketProcessIpPacket
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragmentDatagram
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpProcessMessage
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessMessage
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendQueuedPackets
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpEnqueuePacket
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthSendPacket
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrProcessQuery
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessMessage
</UL>

<P><STRONG><a name="[214]"></a>netBufferRead</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, net_mem.o(i.netBufferRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = netBufferRead
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReadRxBuffer
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpReceiveDatagram
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketReceiveIpPacket
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketReceiveEthPacket
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthSendPacket
</UL>

<P><STRONG><a name="[187]"></a>netBufferSetLength</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, net_mem.o(i.netBufferSetLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolAlloc
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAlloc
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragTick
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ReassembleDatagram
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragmentDatagram
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FlushFragQueue
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SearchFragQueue
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrSendResponse
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendResponse
</UL>

<P><STRONG><a name="[1e5]"></a>netBufferWrite</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, net_mem.o(i.netBufferWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = netBufferWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketProcessEthPacket
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ReassembleDatagram
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SearchFragQueue
</UL>

<P><STRONG><a name="[201]"></a>netConfigInterface</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, net.o(i.netConfigInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = netConfigInterface &rArr; llmnrResponderInit &rArr; ipv4JoinMulticastGroup &rArr; igmpHostJoinGroup &rArr; igmpHostSendMembershipReport &rArr; igmpSendMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitRand
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsInit
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrResponderInit
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4Init
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpInit
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpInit
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethInit
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDeleteEvent
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateEvent
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[192]"></a>netGetRand</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, net_misc.o(i.netGetRand))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = netGetRand &rArr; netGetRandBit
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRandBit
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpGenerateInitialSeqNum
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpGetDynamicPort
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpGetDynamicPort
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRandRange
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateSelecting
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRequesting
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRenewing
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebooting
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebinding
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpRand
</UL>

<P><STRONG><a name="[218]"></a>netGetRandBit</STRONG> (Thumb, 170 bytes, Stack size 20 bytes, net_misc.o(i.netGetRandBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = netGetRandBit
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitRand
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
</UL>

<P><STRONG><a name="[18e]"></a>netGetRandRange</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, net_misc.o(i.netGetRandRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = netGetRandRange &rArr; netGetRand &rArr; netGetRandBit
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateSelecting
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRequesting
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebooting
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateInitReboot
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateInit
</UL>

<P><STRONG><a name="[1fb]"></a>netInit</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, net.o(i.netInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = netInit &rArr; osCreateTask &rArr; xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketInit
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpInit
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpInit
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketInit
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolInit
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsInit
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateTask
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateMutex
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateEvent
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[217]"></a>netInitRand</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, net_misc.o(i.netInitRand))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = netInitRand &rArr; netGetRandBit
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRandBit
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
</UL>

<P><STRONG><a name="[220]"></a>netProcessLinkChange</STRONG> (Thumb, 274 bytes, Stack size 16 bytes, net_misc.o(i.netProcessLinkChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = netProcessLinkChange &rArr; ipv4LinkChangeEvent &rArr; igmpLinkChangeEvent &rArr; igmpHostLinkChangeEvent &rArr; igmpHostSendMembershipReport &rArr; igmpSendMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpUpdateEvents
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketUpdateEvents
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4LinkChangeEvent
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsFlushCache
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicNotifyLinkChange
</UL>

<P><STRONG><a name="[1ff]"></a>netSetDriver</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, net.o(i.netSetDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = netSetDriver &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1fd]"></a>netSetHostname</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, net.o(i.netSetHostname))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = netSetHostname &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1fc]"></a>netSetInterfaceName</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, net.o(i.netSetInterfaceName))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = netSetInterfaceName &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1fe]"></a>netSetMacAddr</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, net.o(i.netSetMacAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = netSetMacAddr &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macAddrToEui64
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[200]"></a>netSetPhyDriver</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, net.o(i.netSetPhyDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = netSetPhyDriver &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1bc]"></a>netStartTimer</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, net_misc.o(i.netStartTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = netStartTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckRetransmitTimer
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckPersistTimer
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckOverrideTimer
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateSendWindow
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateRetransmitQueue
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateTimeWait
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosing
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostLinkChangeEvent
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostInit
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostProcessMembershipQuery
</UL>

<P><STRONG><a name="[27d]"></a>netStopTimer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_misc.o(i.netStopTimer))
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckRetransmitTimer
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFlushRetransmitQueue
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateRetransmitQueue
</UL>

<P><STRONG><a name="[70]"></a>netTask</STRONG> (Thumb, 180 bytes, Stack size 0 bytes, net.o(i.netTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = netTask &rArr; netTick &rArr; dhcpClientTick &rArr; dhcpClientStateRequesting &rArr; dhcpClientSendRequest &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osWaitForEvent
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net.o(i.netInit)
</UL>
<P><STRONG><a name="[228]"></a>netTick</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, net_misc.o(i.netTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = netTick &rArr; dhcpClientTick &rArr; dhcpClientStateRequesting &rArr; dhcpClientSendRequest &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTick
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTick
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragTick
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpTick
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsTick
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpTick
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTask
</UL>

<P><STRONG><a name="[1c7]"></a>netTimerExpired</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, net_misc.o(i.netTimerExpired))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = netTimerExpired
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckTimeWaitTimer
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckRetransmitTimer
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckPersistTimer
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckOverrideTimer
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckFinWait2Timer
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostTick
</UL>

<P><STRONG><a name="[298]"></a>netTimerRunning</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_misc.o(i.netTimerRunning))
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>

<P><STRONG><a name="[166]"></a>nicGetLogicalInterface</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nic.o(i.nicGetLogicalInterface))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethCheckDestAddr
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessPacket
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendReply
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendProbe
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessRequest
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
</UL>

<P><STRONG><a name="[1ac]"></a>nicGetPhysicalInterface</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nic.o(i.nicGetPhysicalInterface))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4Init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4JoinMulticastGroup
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4LinkChangeEvent
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
</UL>

<P><STRONG><a name="[22b]"></a>nicIsParentInterface</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nic.o(i.nicIsParentInterface))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicNotifyLinkChange
</UL>

<P><STRONG><a name="[1ee]"></a>nicNotifyLinkChange</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, nic.o(i.nicNotifyLinkChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = nicNotifyLinkChange &rArr; netProcessLinkChange &rArr; ipv4LinkChangeEvent &rArr; igmpLinkChangeEvent &rArr; igmpHostLinkChangeEvent &rArr; igmpHostSendMembershipReport &rArr; igmpSendMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netProcessLinkChange
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicIsParentInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8742EventHandler
</UL>

<P><STRONG><a name="[22c]"></a>nicProcessPacket</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, nic.o(i.nicProcessPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000 + Unknown Stack Size
<LI>Call Chain = nicProcessPacket &rArr; ethProcessFrame &rArr; ipv4ProcessPacket &rArr; ipv4ReassembleDatagram &rArr; ipv4ProcessDatagram &rArr; tcpProcessSegment &rArr; tcpStateSynReceived &rArr; tcpStateEstablished &rArr; tcpProcessSegmentData &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthReceivePacket
</UL>

<P><STRONG><a name="[1b3]"></a>nicSendPacket</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, nic.o(i.nicSendPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = nicSendPacket &rArr; osWaitForEvent &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osWaitForEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
</UL>

<P><STRONG><a name="[229]"></a>nicTick</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, nic.o(i.nicTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nicTick
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>

<P><STRONG><a name="[1a3]"></a>nicUpdateMacAddrFilter</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, nic.o(i.nicUpdateMacAddrFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nicUpdateMacAddrFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethDropMacAddr
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethAcceptMacAddr
</UL>

<P><STRONG><a name="[17c]"></a>osAcquireMutex</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, os_port_freertos.o(i.osAcquireMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osAcquireMutex &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowRead
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trngGetRandomData
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpGetState
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSetTimeout
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketOpen
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketListen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketClose
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetPhyDriver
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetMacAddr
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetInterfaceName
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetHostname
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetDriver
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetDnsServer
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTask
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWaitForEvents
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpReceiveDatagram
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketReceiveIpPacket
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketReceiveEthPacket
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceiveEx
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientLinkChangeEvent
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetSubnetMaskEx
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetHostAddrEx
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetDefaultGatewayEx
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientCheckTimeout
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
</UL>

<P><STRONG><a name="[209]"></a>osAllocMem</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, os_port_freertos.o(i.osAllocMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolAlloc
</UL>

<P><STRONG><a name="[215]"></a>osCreateEvent</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, os_port_freertos.o(i.osCreateEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = osCreateEvent &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketInit
</UL>

<P><STRONG><a name="[219]"></a>osCreateMutex</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os_port_freertos.o(i.osCreateMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osCreateMutex &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowInit
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxCryptoInit
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[21f]"></a>osCreateTask</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, os_port_freertos.o(i.osCreateTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = osCreateTask &rArr; xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[13f]"></a>osDelay</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cmsis_os.o(i.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask03
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask02
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MasternodeInfo
</UL>

<P><STRONG><a name="[152]"></a>osDelayTask</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, os_port_freertos.o(i.osDelayTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osDelayTask &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPServer
</UL>

<P><STRONG><a name="[216]"></a>osDeleteEvent</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, os_port_freertos.o(i.osDeleteEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osDeleteEvent &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketInit
</UL>

<P><STRONG><a name="[20b]"></a>osFreeMem</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, os_port_freertos.o(i.osFreeMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osFreeMem &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolFree
</UL>

<P><STRONG><a name="[15b]"></a>osGetSystemTime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, os_port_freertos.o(i.osGetSystemTime))
<BR><BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTask
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicSendPacket
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpKillOldestConnection
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicProcessPacket
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicNotifyLinkChange
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragTick
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsTick
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpTick
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTimerExpired
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostJoinGroup
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpResolve
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessReply
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpCreateEntry
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpComputeRto
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostTick
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostLinkChangeEvent
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientComputeElapsedTime
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientCheckTimeout
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateSelecting
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRequesting
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRenewing
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebooting
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebinding
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateProbing
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateInitReboot
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateInit
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateBound
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SearchFragQueue
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessResponse
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostProcessMembershipQuery
</UL>

<P><STRONG><a name="[207]"></a>osKernelStart</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmsis_os.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = osKernelStart &rArr; vTaskStartScheduler &rArr; xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17b]"></a>osReleaseMutex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, os_port_freertos.o(i.osReleaseMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowRead
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trngGetRandomData
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpGetState
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSetTimeout
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketOpen
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketListen
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketClose
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetPhyDriver
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetMacAddr
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetInterfaceName
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetHostname
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetDriver
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetDnsServer
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTask
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWaitForEvents
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpReceiveDatagram
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketReceiveIpPacket
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketReceiveEthPacket
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceiveEx
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientLinkChangeEvent
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetSubnetMaskEx
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetHostAddrEx
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetDefaultGatewayEx
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientCheckTimeout
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
</UL>

<P><STRONG><a name="[238]"></a>osResetEvent</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os_port_freertos.o(i.osResetEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osResetEvent &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWaitForEvents
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpReceiveDatagram
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketReceiveIpPacket
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketReceiveEthPacket
</UL>

<P><STRONG><a name="[148]"></a>osResumeAllTasks</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os_port_freertos.o(i.osResumeAllTasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osResumeAllTasks &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPServer
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolAlloc
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netProcessLinkChange
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientDumpConfig
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthInit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8742Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8742EventHandler
</UL>

<P><STRONG><a name="[1f1]"></a>osSetEvent</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, os_port_freertos.o(i.osSetEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osSetEvent &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpUpdateEvents
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketUpdateEvents
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthSendPacket
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthInit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8742Tick
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8742Init
</UL>

<P><STRONG><a name="[e7]"></a>osSetEventFromIsr</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, os_port_freertos.o(i.osSetEventFromIsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osSetEventFromIsr &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>

<P><STRONG><a name="[147]"></a>osSuspendAllTasks</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os_port_freertos.o(i.osSuspendAllTasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osSuspendAllTasks
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPServer
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolAlloc
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netProcessLinkChange
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientDumpConfig
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthInit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8742Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8742EventHandler
</UL>

<P><STRONG><a name="[206]"></a>osThreadCreate</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, cmsis_os.o(i.osThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = osThreadCreate &rArr; xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeFreeRtosPriority
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[227]"></a>osWaitForEvent</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, os_port_freertos.o(i.osWaitForEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osWaitForEvent &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTask
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicSendPacket
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWaitForEvents
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpReceiveDatagram
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketReceiveIpPacket
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketReceiveEthPacket
</UL>

<P><STRONG><a name="[14f]"></a>program_verify_fanuc</STRONG> (Thumb, 186 bytes, Stack size 68 bytes, stm32custombootloader.o(i.program_verify_fanuc))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = program_verify_fanuc &rArr; ConvertStringtoHEX
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertStringtoHEX
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPServer
</UL>

<P><STRONG><a name="[22e]"></a>pvPortMalloc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, heap_3.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[2b0]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[24b]"></a>pxPortInitialiseStack</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[1ae]"></a>rawSocketProcessEthPacket</STRONG> (Thumb, 238 bytes, Stack size 56 bytes, raw_socket.o(i.rawSocketProcessEthPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = rawSocketProcessEthPacket &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferWrite
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAlloc
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketUpdateEvents
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
</UL>

<P><STRONG><a name="[1de]"></a>rawSocketProcessIpPacket</STRONG> (Thumb, 284 bytes, Stack size 56 bytes, raw_socket.o(i.rawSocketProcessIpPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = rawSocketProcessIpPacket &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferCopy
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAlloc
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketUpdateEvents
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
</UL>

<P><STRONG><a name="[250]"></a>rawSocketReceiveEthPacket</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, raw_socket.o(i.rawSocketReceiveEthPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = rawSocketReceiveEthPacket &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferRead
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osWaitForEvent
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResetEvent
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketUpdateEvents
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceiveEx
</UL>

<P><STRONG><a name="[251]"></a>rawSocketReceiveIpPacket</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, raw_socket.o(i.rawSocketReceiveIpPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = rawSocketReceiveIpPacket &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferRead
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osWaitForEvent
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResetEvent
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketUpdateEvents
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceiveEx
</UL>

<P><STRONG><a name="[223]"></a>rawSocketUpdateEvents</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, raw_socket.o(i.rawSocketUpdateEvents))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = rawSocketUpdateEvents &rArr; osSetEvent &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netProcessLinkChange
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketProcessEthPacket
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketReceiveIpPacket
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketReceiveEthPacket
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketProcessIpPacket
</UL>

<P><STRONG><a name="[252]"></a>sha256Final</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, sha256.o(i.sha256Final))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = sha256Final &rArr; sha256Update &rArr; sha256ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Update
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256ProcessBlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowFastReseed
</UL>

<P><STRONG><a name="[2b6]"></a>sha256Init</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, sha256.o(i.sha256Init))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowInit
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowFastReseed
</UL>

<P><STRONG><a name="[254]"></a>sha256ProcessBlock</STRONG> (Thumb, 318 bytes, Stack size 48 bytes, sha256.o(i.sha256ProcessBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sha256ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Update
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Final
</UL>

<P><STRONG><a name="[253]"></a>sha256Update</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, sha256.o(i.sha256Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sha256Update &rArr; sha256ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256ProcessBlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowSeed
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Final
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowFastReseed
</UL>

<P><STRONG><a name="[14d]"></a>socketAccept</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, socket.o(i.socketAccept))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = socketAccept &rArr; tcpAccept &rArr; tcpAbort &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPServer
</UL>

<P><STRONG><a name="[256]"></a>socketAllocate</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, socket_misc.o(i.socketAllocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = socketAllocate &rArr; tcpKillOldestConnection &rArr; tcpDeleteControlBlock &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpGetDynamicPort
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpKillOldestConnection
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpGetDynamicPort
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketOpen
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
</UL>

<P><STRONG><a name="[14b]"></a>socketBind</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, socket.o(i.socketBind))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPServer
</UL>

<P><STRONG><a name="[151]"></a>socketClose</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, socket.o(i.socketClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = socketClose &rArr; tcpAbort &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAbort
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPServer
</UL>

<P><STRONG><a name="[21b]"></a>socketInit</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, socket.o(i.socketInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = socketInit &rArr; osCreateEvent &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDeleteEvent
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateEvent
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[14c]"></a>socketListen</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, socket.o(i.socketListen))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = socketListen &rArr; tcpListen &rArr; tcpChangeState &rArr; tcpUpdateEvents &rArr; osSetEvent &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpListen
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPServer
</UL>

<P><STRONG><a name="[146]"></a>socketOpen</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, socket.o(i.socketOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = socketOpen &rArr; socketAllocate &rArr; tcpKillOldestConnection &rArr; tcpDeleteControlBlock &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketAllocate
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPServer
</UL>

<P><STRONG><a name="[14e]"></a>socketReceive</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, socket.o(i.socketReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = socketReceive &rArr; socketReceiveEx &rArr; tcpReceive &rArr; tcpUpdateReceiveWindow &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceiveEx
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPServer
</UL>

<P><STRONG><a name="[25c]"></a>socketReceiveEx</STRONG> (Thumb, 312 bytes, Stack size 96 bytes, socket.o(i.socketReceiveEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = socketReceiveEx &rArr; tcpReceive &rArr; tcpUpdateReceiveWindow &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpReceiveDatagram
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReceive
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketReceiveIpPacket
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketReceiveEthPacket
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceive
</UL>

<P><STRONG><a name="[149]"></a>socketSetTimeout</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, socket.o(i.socketSetTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = socketSetTimeout &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPServer
</UL>

<P><STRONG><a name="[264]"></a>ssd1306_DrawPixel</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, ssd1306.o(i.ssd1306_DrawPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ssd1306_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_WriteChar
</UL>

<P><STRONG><a name="[13a]"></a>ssd1306_Fill</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ssd1306.o(i.ssd1306_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ssd1306_Fill
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_Init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MasternodeInfo
</UL>

<P><STRONG><a name="[1f6]"></a>ssd1306_Init</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, ssd1306.o(i.ssd1306_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ssd1306_Init &rArr; ssd1306_UpdateScreen &rArr; ssd1306_WriteCommand &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_WriteCommand
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_UpdateScreen
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_SetDisplayOn
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_SetContrast
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_Fill
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[261]"></a>ssd1306_SetContrast</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ssd1306.o(i.ssd1306_SetContrast))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ssd1306_SetContrast &rArr; ssd1306_WriteCommand &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_WriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_Init
</UL>

<P><STRONG><a name="[13b]"></a>ssd1306_SetCursor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ssd1306.o(i.ssd1306_SetCursor))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MasternodeInfo
</UL>

<P><STRONG><a name="[25f]"></a>ssd1306_SetDisplayOn</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ssd1306.o(i.ssd1306_SetDisplayOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ssd1306_SetDisplayOn &rArr; ssd1306_WriteCommand &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_WriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_Init
</UL>

<P><STRONG><a name="[13d]"></a>ssd1306_UpdateScreen</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ssd1306.o(i.ssd1306_UpdateScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ssd1306_UpdateScreen &rArr; ssd1306_WriteCommand &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_WriteData
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_WriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_Init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MasternodeInfo
</UL>

<P><STRONG><a name="[263]"></a>ssd1306_WriteChar</STRONG> (Thumb, 154 bytes, Stack size 52 bytes, ssd1306.o(i.ssd1306_WriteChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ssd1306_WriteChar &rArr; ssd1306_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_WriteString
</UL>

<P><STRONG><a name="[260]"></a>ssd1306_WriteCommand</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ssd1306.o(i.ssd1306_WriteCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ssd1306_WriteCommand &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_UpdateScreen
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_SetDisplayOn
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_SetContrast
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_Init
</UL>

<P><STRONG><a name="[262]"></a>ssd1306_WriteData</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ssd1306.o(i.ssd1306_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ssd1306_WriteData &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_UpdateScreen
</UL>

<P><STRONG><a name="[13c]"></a>ssd1306_WriteString</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, ssd1306.o(i.ssd1306_WriteString))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ssd1306_WriteString &rArr; ssd1306_WriteChar &rArr; ssd1306_DrawPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssd1306_WriteChar
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MasternodeInfo
</UL>

<P><STRONG><a name="[1f7]"></a>stm32f4xxCryptoInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_crypto.o(i.stm32f4xxCryptoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = stm32f4xxCryptoInit &rArr; osCreateMutex &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateMutex
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trngInit
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[269]"></a>stm32f4xxEthCalcCrc</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, stm32f4xx_eth_driver.o(i.stm32f4xxEthCalcCrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = stm32f4xxEthCalcCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthUpdateMacAddrFilter
</UL>

<P><STRONG><a name="[7f]"></a>stm32f4xxEthDisableIrq</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_eth_driver.o(i.stm32f4xxEthDisableIrq))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_eth_driver.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>stm32f4xxEthEnableIrq</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_eth_driver.o(i.stm32f4xxEthEnableIrq))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_eth_driver.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>stm32f4xxEthEventHandler</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32f4xx_eth_driver.o(i.stm32f4xxEthEventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056 + Unknown Stack Size
<LI>Call Chain = stm32f4xxEthEventHandler &rArr; stm32f4xxEthReceivePacket &rArr; nicProcessPacket &rArr; ethProcessFrame &rArr; ipv4ProcessPacket &rArr; ipv4ReassembleDatagram &rArr; ipv4ProcessDatagram &rArr; tcpProcessSegment &rArr; tcpStateSynReceived &rArr; tcpStateEstablished &rArr; tcpProcessSegmentData &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthReceivePacket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_eth_driver.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>stm32f4xxEthInit</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, stm32f4xx_eth_driver.o(i.stm32f4xxEthInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = stm32f4xxEthInit &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEvent
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthUpdateMacAddrFilter
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthInitGpio
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthInitDmaDesc
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_eth_driver.o(.constdata)
</UL>
<P><STRONG><a name="[268]"></a>stm32f4xxEthInitDmaDesc</STRONG> (Thumb, 140 bytes, Stack size 20 bytes, stm32f4xx_eth_driver.o(i.stm32f4xxEthInitDmaDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = stm32f4xxEthInitDmaDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthInit
</UL>

<P><STRONG><a name="[267]"></a>stm32f4xxEthInitGpio</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, stm32f4xx_eth_driver.o(i.stm32f4xxEthInitGpio))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = stm32f4xxEthInitGpio &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthInit
</UL>

<P><STRONG><a name="[85]"></a>stm32f4xxEthReadPhyReg</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f4xx_eth_driver.o(i.stm32f4xxEthReadPhyReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stm32f4xxEthReadPhyReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_eth_driver.o(.constdata)
</UL>
<P><STRONG><a name="[266]"></a>stm32f4xxEthReceivePacket</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, stm32f4xx_eth_driver.o(i.stm32f4xxEthReceivePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040 + Unknown Stack Size
<LI>Call Chain = stm32f4xxEthReceivePacket &rArr; nicProcessPacket &rArr; ethProcessFrame &rArr; ipv4ProcessPacket &rArr; ipv4ReassembleDatagram &rArr; ipv4ProcessDatagram &rArr; tcpProcessSegment &rArr; tcpStateSynReceived &rArr; tcpStateEstablished &rArr; tcpProcessSegmentData &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicProcessPacket
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthEventHandler
</UL>

<P><STRONG><a name="[81]"></a>stm32f4xxEthSendPacket</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, stm32f4xx_eth_driver.o(i.stm32f4xxEthSendPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = stm32f4xxEthSendPacket &rArr; osSetEvent &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferRead
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_eth_driver.o(.constdata)
</UL>
<P><STRONG><a name="[7d]"></a>stm32f4xxEthTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_eth_driver.o(i.stm32f4xxEthTick))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_eth_driver.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>stm32f4xxEthUpdateMacAddrFilter</STRONG> (Thumb, 284 bytes, Stack size 56 bytes, stm32f4xx_eth_driver.o(i.stm32f4xxEthUpdateMacAddrFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = stm32f4xxEthUpdateMacAddrFilter &rArr; stm32f4xxEthCalcCrc
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthCalcCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_eth_driver.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>stm32f4xxEthUpdateMacConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_eth_driver.o(i.stm32f4xxEthUpdateMacConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stm32f4xxEthUpdateMacConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_eth_driver.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>stm32f4xxEthWritePhyReg</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, stm32f4xx_eth_driver.o(i.stm32f4xxEthWritePhyReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = stm32f4xxEthWritePhyReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_eth_driver.o(.constdata)
</UL>
<P><STRONG><a name="[168]"></a>swapInt16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpu_endian.o(i.swapInt16))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketProcessEthPacket
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessPacket
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceiveEx
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ReassembleDatagram
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendReply
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendProbe
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpInvokeRxCallback
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRejectSegment
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynSent
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateListen
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpSendMessage
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientComputeElapsedTime
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrSendResponse
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrProcessQuery
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessQuery
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessResponse
</UL>

<P><STRONG><a name="[186]"></a>swapInt32</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpu_endian.o(i.swapInt32))
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateRetransmitQueue
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRejectSegment
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Final
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessResponse
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256ProcessBlock
</UL>

<P><STRONG><a name="[25a]"></a>tcpAbort</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, tcp.o(i.tcpAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = tcpAbort &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendResetSegment
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketClose
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
</UL>

<P><STRONG><a name="[255]"></a>tcpAccept</STRONG> (Thumb, 402 bytes, Stack size 48 bytes, tcp.o(i.tcpAccept))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = tcpAccept &rArr; tcpAbort &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpGetState
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolFree
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osWaitForEvent
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResetEvent
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpGenerateInitialSeqNum
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAbort
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketAllocate
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketAccept
</UL>

<P><STRONG><a name="[26f]"></a>tcpAddOption</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, tcp_misc.o(i.tcpAddOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcpAddOption
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>

<P><STRONG><a name="[26b]"></a>tcpChangeState</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tcp_misc.o(i.tcpChangeState))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = tcpChangeState &rArr; tcpUpdateEvents &rArr; osSetEvent &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpKillOldestConnection
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpListen
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAbort
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckTimeWaitTimer
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckRetransmitTimer
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckPersistTimer
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckFinWait2Timer
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateTimeWait
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynSent
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynReceived
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateLastAck
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosing
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateCloseWait
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[270]"></a>tcpCheckAck</STRONG> (Thumb, 364 bytes, Stack size 32 bytes, tcp_misc.o(i.tcpCheckAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = tcpCheckAck &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateSendWindow
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpIsDuplicateAck
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFastRetransmit
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFastRecovery
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFastLossRecovery
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateRetransmitQueue
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpComputeRto
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosing
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateCloseWait
</UL>

<P><STRONG><a name="[278]"></a>tcpCheckFinWait2Timer</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, tcp_timer.o(i.tcpCheckFinWait2Timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = tcpCheckFinWait2Timer &rArr; tcpChangeState &rArr; tcpUpdateEvents &rArr; osSetEvent &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTimerExpired
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTick
</UL>

<P><STRONG><a name="[279]"></a>tcpCheckOverrideTimer</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, tcp_timer.o(i.tcpCheckOverrideTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = tcpCheckOverrideTimer &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTimerExpired
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTick
</UL>

<P><STRONG><a name="[27a]"></a>tcpCheckPersistTimer</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, tcp_timer.o(i.tcpCheckPersistTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = tcpCheckPersistTimer &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendResetSegment
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTimerExpired
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTick
</UL>

<P><STRONG><a name="[27b]"></a>tcpCheckRetransmitTimer</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, tcp_timer.o(i.tcpCheckRetransmitTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = tcpCheckRetransmitTimer &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendResetSegment
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTimerExpired
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStopTimer
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTick
</UL>

<P><STRONG><a name="[27e]"></a>tcpCheckSeqNum</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, tcp_misc.o(i.tcpCheckSeqNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = tcpCheckSeqNum &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateTimeWait
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynReceived
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateLastAck
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosing
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateCloseWait
</UL>

<P><STRONG><a name="[27f]"></a>tcpCheckSyn</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tcp_misc.o(i.tcpCheckSyn))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = tcpCheckSyn &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendResetSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateTimeWait
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynReceived
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateLastAck
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosing
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateCloseWait
</UL>

<P><STRONG><a name="[280]"></a>tcpCheckTimeWaitTimer</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, tcp_timer.o(i.tcpCheckTimeWaitTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = tcpCheckTimeWaitTimer &rArr; tcpDeleteControlBlock &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTimerExpired
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTick
</UL>

<P><STRONG><a name="[273]"></a>tcpComputeRto</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, tcp_misc.o(i.tcpComputeRto))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcpComputeRto
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynSent
</UL>

<P><STRONG><a name="[26c]"></a>tcpDeleteControlBlock</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, tcp_misc.o(i.tcpDeleteControlBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = tcpDeleteControlBlock &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFlushSynQueue
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFlushRetransmitQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpKillOldestConnection
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAbort
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckTimeWaitTimer
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateTimeWait
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosing
</UL>

<P><STRONG><a name="[284]"></a>tcpDumpHeader</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tcp_misc.o(i.tcpDumpHeader))
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[276]"></a>tcpFastLossRecovery</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, tcp_misc.o(i.tcpFastLossRecovery))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = tcpFastLossRecovery &rArr; tcpRetransmitSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
</UL>

<P><STRONG><a name="[275]"></a>tcpFastRecovery</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, tcp_misc.o(i.tcpFastRecovery))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = tcpFastRecovery &rArr; tcpRetransmitSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
</UL>

<P><STRONG><a name="[277]"></a>tcpFastRetransmit</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, tcp_misc.o(i.tcpFastRetransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = tcpFastRetransmit &rArr; tcpRetransmitSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
</UL>

<P><STRONG><a name="[281]"></a>tcpFlushRetransmitQueue</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tcp_misc.o(i.tcpFlushRetransmitQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tcpFlushRetransmitQueue &rArr; memPoolFree &rArr; osFreeMem &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolFree
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStopTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
</UL>

<P><STRONG><a name="[282]"></a>tcpFlushSynQueue</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tcp_misc.o(i.tcpFlushSynQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tcpFlushSynQueue &rArr; memPoolFree &rArr; osFreeMem &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolFree
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
</UL>

<P><STRONG><a name="[26d]"></a>tcpGenerateInitialSeqNum</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp_misc.o(i.tcpGenerateInitialSeqNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tcpGenerateInitialSeqNum &rArr; netGetRand &rArr; netGetRandBit
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
</UL>

<P><STRONG><a name="[257]"></a>tcpGetDynamicPort</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, tcp.o(i.tcpGetDynamicPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = tcpGetDynamicPort &rArr; netGetRand &rArr; netGetRandBit
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketAllocate
</UL>

<P><STRONG><a name="[29a]"></a>tcpGetOption</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tcp_misc.o(i.tcpGetOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tcpGetOption
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynSent
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateListen
</UL>

<P><STRONG><a name="[150]"></a>tcpGetState</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tcp.o(i.tcpGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = tcpGetState &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPServer
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
</UL>

<P><STRONG><a name="[21e]"></a>tcpInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tcp.o(i.tcpInit))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[271]"></a>tcpIsDuplicateAck</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, tcp_misc.o(i.tcpIsDuplicateAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcpIsDuplicateAck
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
</UL>

<P><STRONG><a name="[299]"></a>tcpIsDuplicateSyn</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, tcp_misc.o(i.tcpIsDuplicateSyn))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tcpIsDuplicateSyn
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateListen
</UL>

<P><STRONG><a name="[259]"></a>tcpKillOldestConnection</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, tcp.o(i.tcpKillOldestConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = tcpKillOldestConnection &rArr; tcpDeleteControlBlock &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketAllocate
</UL>

<P><STRONG><a name="[25b]"></a>tcpListen</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tcp.o(i.tcpListen))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = tcpListen &rArr; tcpChangeState &rArr; tcpUpdateEvents &rArr; osSetEvent &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketListen
</UL>

<P><STRONG><a name="[283]"></a>tcpNagleAlgo</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, tcp_misc.o(i.tcpNagleAlgo))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateCloseWait
</UL>

<P><STRONG><a name="[1df]"></a>tcpProcessSegment</STRONG> (Thumb, 568 bytes, Stack size 56 bytes, tcp_fsm.o(i.tcpProcessSegment))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = tcpProcessSegment &rArr; tcpStateSynReceived &rArr; tcpStateEstablished &rArr; tcpProcessSegmentData &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRejectSegment
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDumpHeader
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsBroadcastAddr
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateTimeWait
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynSent
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynReceived
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateListen
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateLastAck
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosing
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosed
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateCloseWait
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
</UL>

<P><STRONG><a name="[291]"></a>tcpProcessSegmentData</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, tcp_misc.o(i.tcpProcessSegmentData))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = tcpProcessSegmentData &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWriteRxBuffer
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateSackBlocks
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
</UL>

<P><STRONG><a name="[294]"></a>tcpReadRxBuffer</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, tcp_misc.o(i.tcpReadRxBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tcpReadRxBuffer &rArr; netBufferRead
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferRead
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReceive
</UL>

<P><STRONG><a name="[295]"></a>tcpReadTxBuffer</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, tcp_misc.o(i.tcpReadTxBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = tcpReadTxBuffer &rArr; netBufferConcat
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferConcat
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
</UL>

<P><STRONG><a name="[25d]"></a>tcpReceive</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, tcp.o(i.tcpReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = tcpReceive &rArr; tcpUpdateReceiveWindow &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWaitForEvents
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateReceiveWindow
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReadRxBuffer
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceiveEx
</UL>

<P><STRONG><a name="[285]"></a>tcpRejectSegment</STRONG> (Thumb, 248 bytes, Stack size 88 bytes, tcp_misc.o(i.tcpRejectSegment))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = tcpRejectSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipSendDatagram
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateListen
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosed
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[27c]"></a>tcpRetransmitSegment</STRONG> (Thumb, 162 bytes, Stack size 80 bytes, tcp_misc.o(i.tcpRetransmitSegment))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = tcpRetransmitSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipSendDatagram
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAppend
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReadTxBuffer
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckRetransmitTimer
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFastRetransmit
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFastRecovery
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFastLossRecovery
</UL>

<P><STRONG><a name="[26a]"></a>tcpSendResetSegment</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tcp_misc.o(i.tcpSendResetSegment))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAbort
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckRetransmitTimer
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckPersistTimer
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynSent
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynReceived
</UL>

<P><STRONG><a name="[26e]"></a>tcpSendSegment</STRONG> (Thumb, 484 bytes, Stack size 96 bytes, tcp_misc.o(i.tcpSendSegment))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolAlloc
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipSendDatagram
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTimerRunning
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReadTxBuffer
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAddOption
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateReceiveWindow
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendResetSegment
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpNagleAlgo
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckPersistTimer
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckOverrideTimer
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegmentData
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSeqNum
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateTimeWait
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynSent
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
</UL>

<P><STRONG><a name="[28b]"></a>tcpStateCloseWait</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, tcp_fsm.o(i.tcpStateCloseWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = tcpStateCloseWait &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpNagleAlgo
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSeqNum
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[286]"></a>tcpStateClosed</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tcp_fsm.o(i.tcpStateClosed))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = tcpStateClosed &rArr; tcpRejectSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRejectSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[28f]"></a>tcpStateClosing</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, tcp_fsm.o(i.tcpStateClosing))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = tcpStateClosing &rArr; tcpCheckSyn &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSeqNum
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[28a]"></a>tcpStateEstablished</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, tcp_fsm.o(i.tcpStateEstablished))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = tcpStateEstablished &rArr; tcpProcessSegmentData &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpNagleAlgo
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegmentData
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSeqNum
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynReceived
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[28d]"></a>tcpStateFinWait1</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, tcp_fsm.o(i.tcpStateFinWait1))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = tcpStateFinWait1 &rArr; tcpProcessSegmentData &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegmentData
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSeqNum
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[28e]"></a>tcpStateFinWait2</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, tcp_fsm.o(i.tcpStateFinWait2))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = tcpStateFinWait2 &rArr; tcpProcessSegmentData &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegmentData
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSeqNum
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[28c]"></a>tcpStateLastAck</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, tcp_fsm.o(i.tcpStateLastAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = tcpStateLastAck &rArr; tcpCheckSyn &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSeqNum
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[287]"></a>tcpStateListen</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, tcp_fsm.o(i.tcpStateListen))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = tcpStateListen &rArr; tcpRejectSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolFree
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolAlloc
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRejectSegment
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpIsDuplicateSyn
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpGetOption
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[289]"></a>tcpStateSynReceived</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, tcp_fsm.o(i.tcpStateSynReceived))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = tcpStateSynReceived &rArr; tcpStateEstablished &rArr; tcpProcessSegmentData &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendResetSegment
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSeqNum
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[288]"></a>tcpStateSynSent</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, tcp_fsm.o(i.tcpStateSynSent))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = tcpStateSynSent &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendResetSegment
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateRetransmitQueue
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpGetOption
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpComputeRto
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[290]"></a>tcpStateTimeWait</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, tcp_fsm.o(i.tcpStateTimeWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = tcpStateTimeWait &rArr; tcpCheckSyn &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSeqNum
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[22a]"></a>tcpTick</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, tcp_timer.o(i.tcpTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = tcpTick &rArr; tcpCheckPersistTimer &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckTimeWaitTimer
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckRetransmitTimer
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckPersistTimer
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckOverrideTimer
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckFinWait2Timer
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>

<P><STRONG><a name="[221]"></a>tcpUpdateEvents</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, tcp_misc.o(i.tcpUpdateEvents))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = tcpUpdateEvents &rArr; osSetEvent &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netProcessLinkChange
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWaitForEvents
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpNagleAlgo
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReceive
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAccept
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckOverrideTimer
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegmentData
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateListen
</UL>

<P><STRONG><a name="[297]"></a>tcpUpdateReceiveWindow</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, tcp_misc.o(i.tcpUpdateReceiveWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = tcpUpdateReceiveWindow &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReceive
</UL>

<P><STRONG><a name="[274]"></a>tcpUpdateRetransmitQueue</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, tcp_misc.o(i.tcpUpdateRetransmitQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tcpUpdateRetransmitQueue &rArr; memPoolFree &rArr; osFreeMem &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolFree
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStopTimer
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynSent
</UL>

<P><STRONG><a name="[293]"></a>tcpUpdateSackBlocks</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, tcp_misc.o(i.tcpUpdateSackBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcpUpdateSackBlocks &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegmentData
</UL>

<P><STRONG><a name="[272]"></a>tcpUpdateSendWindow</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, tcp_misc.o(i.tcpUpdateSendWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcpUpdateSendWindow &rArr; netStartTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
</UL>

<P><STRONG><a name="[296]"></a>tcpWaitForEvents</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, tcp_misc.o(i.tcpWaitForEvents))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = tcpWaitForEvents &rArr; tcpUpdateEvents &rArr; osSetEvent &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osWaitForEvent
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResetEvent
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReceive
</UL>

<P><STRONG><a name="[292]"></a>tcpWriteRxBuffer</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, tcp_misc.o(i.tcpWriteRxBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tcpWriteRxBuffer &rArr; netBufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegmentData
</UL>

<P><STRONG><a name="[1f8]"></a>trngGetRandomData</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, stm32f4xx_crypto_trng.o(i.trngGetRandomData))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = trngGetRandomData &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_GenerateRandomNumber
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[265]"></a>trngInit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_crypto_trng.o(i.trngInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = trngInit &rArr; HAL_RNG_Init &rArr; HAL_RNG_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxCryptoInit
</UL>

<P><STRONG><a name="[184]"></a>udpAllocBuffer</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, udp.o(i.udpAllocBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = udpAllocBuffer &rArr; ipAllocBuffer &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrSendResponse
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendResponse
</UL>

<P><STRONG><a name="[1f4]"></a>udpAttachRxCallback</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, udp.o(i.udpAttachRxCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = udpAttachRxCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsInit
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrResponderInit
</UL>

<P><STRONG><a name="[19a]"></a>udpDetachRxCallback</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, udp.o(i.udpDetachRxCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = udpDetachRxCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsDeleteEntry
</UL>

<P><STRONG><a name="[258]"></a>udpGetDynamicPort</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, udp.o(i.udpGetDynamicPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = udpGetDynamicPort &rArr; netGetRand &rArr; netGetRandBit
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketAllocate
</UL>

<P><STRONG><a name="[21d]"></a>udpInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, udp.o(i.udpInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = udpInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[29c]"></a>udpInvokeRxCallback</STRONG> (Thumb, 88 bytes, Stack size 64 bytes, udp.o(i.udpInvokeRxCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = udpInvokeRxCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
</UL>

<P><STRONG><a name="[1e0]"></a>udpProcessDatagram</STRONG> (Thumb, 402 bytes, Stack size 64 bytes, udp.o(i.udpProcessDatagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = udpProcessDatagram &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferCopy
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAlloc
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpUpdateEvents
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpInvokeRxCallback
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
</UL>

<P><STRONG><a name="[25e]"></a>udpReceiveDatagram</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, udp.o(i.udpReceiveDatagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = udpReceiveDatagram &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferRead
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osWaitForEvent
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResetEvent
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpUpdateEvents
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceiveEx
</UL>

<P><STRONG><a name="[188]"></a>udpSendBuffer</STRONG> (Thumb, 210 bytes, Stack size 72 bytes, udp.o(i.udpSendBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SelectSourceAddr
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipSendDatagram
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrSendResponse
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendResponse
</UL>

<P><STRONG><a name="[222]"></a>udpUpdateEvents</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, udp.o(i.udpUpdateEvents))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = udpUpdateEvents &rArr; osSetEvent &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netProcessLinkChange
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpReceiveDatagram
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
</UL>

<P><STRONG><a name="[23f]"></a>uxListRemove</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[244]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[24a]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[241]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[240]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[243]"></a>vPortEnterCritical</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[245]"></a>vPortExitCritical</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[234]"></a>vPortFree</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, heap_3.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
</UL>

<P><STRONG><a name="[2aa]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[29d]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, port.o(i.vPortValidateInterruptPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>

<P><STRONG><a name="[233]"></a>vQueueDelete</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, queue.o(i.vQueueDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueUnregisterQueue
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDeleteEvent
</UL>

<P><STRONG><a name="[29f]"></a>vQueueUnregisterQueue</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, queue.o(i.vQueueUnregisterQueue))
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>

<P><STRONG><a name="[232]"></a>vTaskDelay</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelayTask
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[2ae]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[24f]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[2a0]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[2a1]"></a>vTaskPriorityDisinheritAfterTimeout</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, tasks.o(i.vTaskPriorityDisinheritAfterTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityDisinheritAfterTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[236]"></a>vTaskStartScheduler</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = vTaskStartScheduler &rArr; xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureTimerForRunTimeStats
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[23c]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[a6]"></a>vTaskSwitchContext</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRunTimeCounterValue
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[6e]"></a>webSocketClientRngCallback</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i.webSocketClientRngCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = webSocketClientRngCallback &rArr; yarrowRead &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[21c]"></a>webSocketInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, web_socket.o(i.webSocketInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = webSocketInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[205]"></a>webSocketRegisterRandCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, web_socket.o(i.webSocketRegisterRandCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2a6]"></a>xBeeAPIhandle</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, xbee.o(i.xBeeAPIhandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = xBeeAPIhandle &rArr; DecodeWeatherNodesensor &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeWeatherNodesensor
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xBeeChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xBeeFunction
</UL>

<P><STRONG><a name="[2a7]"></a>xBeeChecksum</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, xbee.o(i.xBeeChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xBeeChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xBeeAPIhandle
</UL>

<P><STRONG><a name="[2a8]"></a>xBeeConnectionKeeper</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, xbee.o(i.xBeeConnectionKeeper))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xBeeConnectionKeeper &rArr; CheckNodeCaonnected
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNodeCaonnected
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xBeeFunction
</UL>

<P><STRONG><a name="[141]"></a>xBeeFunction</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, xbee.o(i.xBeeFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = xBeeFunction &rArr; xBeeAPIhandle &rArr; DecodeWeatherNodesensor &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xBeeConnectionKeeper
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xBeeAPIhandle
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask02
</UL>

<P><STRONG><a name="[154]"></a>xBeeTimer</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, xbee.o(i.xBeeTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xBeeTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
</UL>

<P><STRONG><a name="[158]"></a>xBee_IRQHandler</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, xbee.o(i.xBee_IRQHandler))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[a]"></a>xBeeintervalRSSI</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, xbee.o(i.xBeeintervalRSSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xBeeintervalRSSI &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xbee.o(.data)
</UL>
<P><STRONG><a name="[2a3]"></a>xPortStartScheduler</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[230]"></a>xQueueCreateMutex</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, queue.o(i.xQueueCreateMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateMutex
</UL>

<P><STRONG><a name="[22f]"></a>xQueueGenericCreate</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateEvent
</UL>

<P><STRONG><a name="[2ad]"></a>xQueueGenericReset</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[237]"></a>xQueueGenericSend</STRONG> (Thumb, 346 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEvent
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
</UL>

<P><STRONG><a name="[23b]"></a>xQueueGiveFromISR</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, queue.o(i.xQueueGiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEventFromIsr
</UL>

<P><STRONG><a name="[22d]"></a>xQueueSemaphoreTake</STRONG> (Thumb, 372 bytes, Stack size 48 bytes, queue.o(i.xQueueSemaphoreTake))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osWaitForEvent
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResetEvent
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>

<P><STRONG><a name="[2af]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[231]"></a>xTaskCreate</STRONG> (Thumb, 86 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateTask
</UL>

<P><STRONG><a name="[239]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[235]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>

<P><STRONG><a name="[144]"></a>xTaskIncrementTick</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[247]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[2b1]"></a>xTaskPriorityInherit</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[24e]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[23a]"></a>xTaskResumeAll</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[2b3]"></a>yarrowFastReseed</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, yarrow.o(i.yarrowFastReseed))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = yarrowFastReseed &rArr; sha256Final &rArr; sha256Update &rArr; sha256ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Update
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Init
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Final
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aesInit
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aesEncryptBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowSeed
</UL>

<P><STRONG><a name="[2b7]"></a>yarrowGenerateBlock</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, yarrow.o(i.yarrowGenerateBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = yarrowGenerateBlock &rArr; aesEncryptBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aesEncryptBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowRead
</UL>

<P><STRONG><a name="[1f9]"></a>yarrowInit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, yarrow.o(i.yarrowInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = yarrowInit &rArr; osCreateMutex &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateMutex
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2a5]"></a>yarrowRead</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, yarrow.o(i.yarrowRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = yarrowRead &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aesInit
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowGenerateBlock
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketClientRngCallback
</UL>

<P><STRONG><a name="[1fa]"></a>yarrowSeed</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, yarrow.o(i.yarrowSeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = yarrowSeed &rArr; yarrowFastReseed &rArr; sha256Final &rArr; sha256Update &rArr; sha256ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Update
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowFastReseed
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[68]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[91]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[2f6]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[2f7]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[134]"></a>MX_GPIO_Init</STRONG> (Thumb, 216 bytes, Stack size 56 bytes, main.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[136]"></a>MX_TIM2_Init</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, main.o(i.MX_TIM2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MX_TIM2_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[138]"></a>MX_TIM5_Init</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, main.o(i.MX_TIM5_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MX_TIM5_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f3]"></a>FLASH_Program_Byte</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.FLASH_Program_Byte))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[f2]"></a>FLASH_Program_DoubleWord</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f4xx_hal_flash.o(i.FLASH_Program_DoubleWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_Program_DoubleWord
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[f4]"></a>FLASH_Program_HalfWord</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.FLASH_Program_HalfWord))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[f5]"></a>FLASH_Program_Word</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.FLASH_Program_Word))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[ea]"></a>FLASH_SetErrorCode</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.FLASH_SetErrorCode))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[108]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[133]"></a>I2C_IsAcknowledgeFailed</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i.I2C_IsAcknowledgeFailed))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
</UL>

<P><STRONG><a name="[fb]"></a>I2C_RequestMemoryWrite</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, stm32f4xx_hal_i2c.o(i.I2C_RequestMemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[fd]"></a>I2C_WaitOnBTFFlagUntilTimeout</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnBTFFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_WaitOnBTFFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[fa]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>

<P><STRONG><a name="[132]"></a>I2C_WaitOnMasterAddressFlagUntilTimeout</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnMasterAddressFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>

<P><STRONG><a name="[fc]"></a>I2C_WaitOnTXEFlagUntilTimeout</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnTXEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_WaitOnTXEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>

<P><STRONG><a name="[118]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[116]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[117]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[6c]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[124]"></a>UART_EndRxTransfer</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>

<P><STRONG><a name="[123]"></a>UART_Receive_IT</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[12b]"></a>UART_SetConfig</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[12d]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[246]"></a>prvCopyDataToQueue</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[24c]"></a>prvIsQueueEmpty</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[24d]"></a>prvUnlockQueue</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[23e]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[242]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvAddNewTaskToReadyList
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[248]"></a>prvDeleteTCB</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[72]"></a>prvIdleTask</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvIdleTask &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[249]"></a>prvInitialiseNewTask</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[2b2]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[23d]"></a>makeFreeRtosPriority</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmsis_os.o(i.makeFreeRtosPriority))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[71]"></a>prvTaskExitError</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[6a]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
