<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [Master\Master.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image Master\Master.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Sat Aug 20 17:46:43 2022
<BR><P>
<H3>Maximum Stack Usage =       1824 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
StartTask03 &rArr; webSocketClient &rArr; webSocketShutdown &rArr; webSocketReceive &rArr; webSocketReceiveEx &rArr; webSocketReceiveData &rArr; tlsRead &rArr; tlsConnect &rArr; tlsPerformHandshake &rArr; tlsPerformClientHandshake &rArr; tlsReceiveHandshakeMessage &rArr; tlsParseHandshakeMessage &rArr; tlsParseServerHandshakeMessage &rArr; tlsParseCertificate &rArr; tlsParseCertificateList &rArr; tlsValidateCertificate &rArr; x509ValidateCertificate &rArr; x509VerifySignature &rArr; x509VerifyEcdsaSignature &rArr; ecdsaVerifySignature &rArr; ecTwinMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[119]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[3c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3c]">ADC_IRQHandler</a><BR>
 <LI><a href="#[24]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">BusFault_Handler</a><BR>
 <LI><a href="#[22]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">HardFault_Handler</a><BR>
 <LI><a href="#[23]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">MemManage_Handler</a><BR>
 <LI><a href="#[21]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">NMI_Handler</a><BR>
 <LI><a href="#[19d]">UART_EndRxTransfer</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19d]">UART_EndRxTransfer</a><BR>
 <LI><a href="#[25]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">UsageFault_Handler</a><BR>
 <LI><a href="#[24e]">dnsParseName</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24e]">dnsParseName</a><BR>
 <LI><a href="#[247]">dnsCompareName</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[247]">dnsCompareName</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[3c]">ADC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[24]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3e]">CAN1_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3f]">CAN1_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[40]">CAN1_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3d]">CAN1_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6a]">CAN2_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6b]">CAN2_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6c]">CAN2_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[69]">CAN2_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[13]">CDC_Control_FS</a> from usbd_cdc_if.o(i.CDC_Control_FS) referenced 2 times from usbd_cdc_if.o(.data)
 <LI><a href="#[12]">CDC_DeInit_FS</a> from usbd_cdc_if.o(i.CDC_DeInit_FS) referenced 2 times from usbd_cdc_if.o(.data)
 <LI><a href="#[11]">CDC_Init_FS</a> from usbd_cdc_if.o(i.CDC_Init_FS) referenced 2 times from usbd_cdc_if.o(.data)
 <LI><a href="#[14]">CDC_Receive_FS</a> from usbd_cdc_if.o(i.CDC_Receive_FS) referenced 2 times from usbd_cdc_if.o(.data)
 <LI><a href="#[15]">CDC_TransmitCplt_FS</a> from usbd_cdc_if.o(i.CDC_TransmitCplt_FS) referenced 2 times from usbd_cdc_if.o(.data)
 <LI><a href="#[78]">DCMI_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[35]">DMA1_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[36]">DMA1_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[37]">DMA1_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[38]">DMA1_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[39]">DMA1_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3a]">DMA1_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3b]">DMA1_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[59]">DMA1_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[62]">DMA2_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[63]">DMA2_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[64]">DMA2_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[65]">DMA2_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[66]">DMA2_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6e]">DMA2_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6f]">DMA2_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[70]">DMA2_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[27]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[67]">ETH_IRQHandler</a> from stm32f4xx_eth_driver.o(i.ETH_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[68]">ETH_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[30]">EXTI0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[52]">EXTI15_10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[31]">EXTI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[32]">EXTI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[33]">EXTI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[34]">EXTI4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[41]">EXTI9_5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2e]">FLASH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5a]">FMC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[7a]">FPU_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[79]">HASH_RNG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[22]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4a]">I2C1_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[49]">I2C1_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4c]">I2C2_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4b]">I2C2_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[73]">I2C3_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[72]">I2C3_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[23]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[21]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6d]">OTG_FS_IRQHandler</a> from stm32f4xx_it.o(i.OTG_FS_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[54]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[75]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[74]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[77]">OTG_HS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[76]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2b]">PVD_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[28]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2f]">RCC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[53]">RTC_Alarm_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2d]">RTC_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[20]">Reset_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5b]">SDIO_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4d]">SPI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4e]">SPI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5d]">SPI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[26]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[8b]">StartDefaultTask</a> from main.o(i.StartDefaultTask) referenced from main.o(.constdata)
 <LI><a href="#[8c]">StartTask02</a> from main.o(i.StartTask02) referenced from main.o(.constdata)
 <LI><a href="#[8d]">StartTask03</a> from main.o(i.StartTask03) referenced from main.o(.constdata)
 <LI><a href="#[29]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[7b]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[2c]">TAMP_STAMP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[42]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[45]">TIM1_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[44]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[43]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[46]">TIM2_IRQHandler</a> from stm32f4xx_it.o(i.TIM2_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[47]">TIM3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[48]">TIM4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5c]">TIM5_IRQHandler</a> from stm32f4xx_it.o(i.TIM5_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[60]">TIM6_DAC_IRQHandler</a> from stm32f4xx_it.o(i.TIM6_DAC_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[61]">TIM7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[55]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[58]">TIM8_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[57]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[56]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5e]">UART4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5f]">UART5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[81]">UART_DMAAbortOnError</a> from stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[4f]">USART1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[50]">USART2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[51]">USART3_IRQHandler</a> from xbee.o(i.USART3_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[71]">USART6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1a]">USBD_CDC_DataIn</a> from usbd_cdc.o(i.USBD_CDC_DataIn) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[1b]">USBD_CDC_DataOut</a> from usbd_cdc.o(i.USBD_CDC_DataOut) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[17]">USBD_CDC_DeInit</a> from usbd_cdc.o(i.USBD_CDC_DeInit) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[19]">USBD_CDC_EP0_RxReady</a> from usbd_cdc.o(i.USBD_CDC_EP0_RxReady) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[1f]">USBD_CDC_GetDeviceQualifierDescriptor</a> from usbd_cdc.o(i.USBD_CDC_GetDeviceQualifierDescriptor) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[1d]">USBD_CDC_GetFSCfgDesc</a> from usbd_cdc.o(i.USBD_CDC_GetFSCfgDesc) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[1c]">USBD_CDC_GetHSCfgDesc</a> from usbd_cdc.o(i.USBD_CDC_GetHSCfgDesc) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[1e]">USBD_CDC_GetOtherSpeedCfgDesc</a> from usbd_cdc.o(i.USBD_CDC_GetOtherSpeedCfgDesc) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[16]">USBD_CDC_Init</a> from usbd_cdc.o(i.USBD_CDC_Init) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[18]">USBD_CDC_Setup</a> from usbd_cdc.o(i.USBD_CDC_Setup) referenced 2 times from usbd_cdc.o(.data)
 <LI><a href="#[f]">USBD_FS_ConfigStrDescriptor</a> from usbd_desc.o(i.USBD_FS_ConfigStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[a]">USBD_FS_DeviceDescriptor</a> from usbd_desc.o(i.USBD_FS_DeviceDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[10]">USBD_FS_InterfaceStrDescriptor</a> from usbd_desc.o(i.USBD_FS_InterfaceStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[b]">USBD_FS_LangIDStrDescriptor</a> from usbd_desc.o(i.USBD_FS_LangIDStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[c]">USBD_FS_ManufacturerStrDescriptor</a> from usbd_desc.o(i.USBD_FS_ManufacturerStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[d]">USBD_FS_ProductStrDescriptor</a> from usbd_desc.o(i.USBD_FS_ProductStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[e]">USBD_FS_SerialStrDescriptor</a> from usbd_desc.o(i.USBD_FS_SerialStrDescriptor) referenced 2 times from usbd_desc.o(.data)
 <LI><a href="#[25]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2a]">WWDG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[bc]">__main</a> from __main.o(!!!main) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[7d]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[7f]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[7e]">_sputc</a> from _sputc.o(.text) referenced from __2sprintf.o(.text)
 <LI><a href="#[9f]">aesDecryptBlock</a> from aes.o(i.aesDecryptBlock) referenced from aes.o(.constdata)
 <LI><a href="#[9e]">aesEncryptBlock</a> from aes.o(i.aesEncryptBlock) referenced from aes.o(.constdata)
 <LI><a href="#[9d]">aesInit</a> from aes.o(i.aesInit) referenced from aes.o(.constdata)
 <LI><a href="#[82]">dnsProcessResponse</a> from dns_client.o(i.dnsProcessResponse) referenced from dns_client.o(i.dnsResolve)
 <LI><a href="#[80]">fputc</a> from debug.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[91]">lan8742DisableIrq</a> from lan8742_driver.o(i.lan8742DisableIrq) referenced from lan8742_driver.o(.constdata)
 <LI><a href="#[90]">lan8742EnableIrq</a> from lan8742_driver.o(i.lan8742EnableIrq) referenced from lan8742_driver.o(.constdata)
 <LI><a href="#[92]">lan8742EventHandler</a> from lan8742_driver.o(i.lan8742EventHandler) referenced from lan8742_driver.o(.constdata)
 <LI><a href="#[8e]">lan8742Init</a> from lan8742_driver.o(i.lan8742Init) referenced from lan8742_driver.o(.constdata)
 <LI><a href="#[8f]">lan8742Tick</a> from lan8742_driver.o(i.lan8742Tick) referenced from lan8742_driver.o(.constdata)
 <LI><a href="#[83]">llmnrProcessQuery</a> from llmnr_responder.o(i.llmnrProcessQuery) referenced from llmnr_responder.o(i.llmnrResponderInit)
 <LI><a href="#[b7]">md5Compute</a> from md5.o(i.md5Compute) referenced from md5.o(.constdata)
 <LI><a href="#[ba]">md5Final</a> from md5.o(i.md5Final) referenced from md5.o(.constdata)
 <LI><a href="#[bb]">md5FinalRaw</a> from md5.o(i.md5FinalRaw) referenced from md5.o(.constdata)
 <LI><a href="#[b8]">md5Init</a> from md5.o(i.md5Init) referenced from md5.o(.constdata)
 <LI><a href="#[b9]">md5Update</a> from md5.o(i.md5Update) referenced from md5.o(.constdata)
 <LI><a href="#[85]">nbnsProcessMessage</a> from nbns_common.o(i.nbnsProcessMessage) referenced from nbns_common.o(i.nbnsInit)
 <LI><a href="#[86]">netTask</a> from net.o(i.netTask) referenced from net.o(i.netInit)
 <LI><a href="#[88]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[87]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[a0]">secp224r1Mod</a> from ec_curves.o(i.secp224r1Mod) referenced from ec_curves.o(.constdata)
 <LI><a href="#[a1]">secp256r1Mod</a> from ec_curves.o(i.secp256r1Mod) referenced from ec_curves.o(.constdata)
 <LI><a href="#[a2]">secp384r1Mod</a> from ec_curves.o(i.secp384r1Mod) referenced from ec_curves.o(.constdata)
 <LI><a href="#[a3]">secp521r1Mod</a> from ec_curves.o(i.secp521r1Mod) referenced from ec_curves.o(.constdata)
 <LI><a href="#[a4]">sha1Compute</a> from sha1.o(i.sha1Compute) referenced from sha1.o(.constdata)
 <LI><a href="#[a7]">sha1Final</a> from sha1.o(i.sha1Final) referenced from sha1.o(.constdata)
 <LI><a href="#[a8]">sha1FinalRaw</a> from sha1.o(i.sha1FinalRaw) referenced from sha1.o(.constdata)
 <LI><a href="#[a5]">sha1Init</a> from sha1.o(i.sha1Init) referenced from sha1.o(.constdata)
 <LI><a href="#[a6]">sha1Update</a> from sha1.o(i.sha1Update) referenced from sha1.o(.constdata)
 <LI><a href="#[a9]">sha256Compute</a> from sha256.o(i.sha256Compute) referenced from sha256.o(.constdata)
 <LI><a href="#[ac]">sha256Final</a> from sha256.o(i.sha256Final) referenced from sha256.o(.constdata)
 <LI><a href="#[ad]">sha256FinalRaw</a> from sha256.o(i.sha256FinalRaw) referenced from sha256.o(.constdata)
 <LI><a href="#[aa]">sha256Init</a> from sha256.o(i.sha256Init) referenced from sha256.o(.constdata)
 <LI><a href="#[ab]">sha256Update</a> from sha256.o(i.sha256Update) referenced from sha256.o(.constdata)
 <LI><a href="#[ae]">sha384Compute</a> from sha384.o(i.sha384Compute) referenced from sha384.o(.constdata)
 <LI><a href="#[b1]">sha384Final</a> from sha384.o(i.sha384Final) referenced from sha384.o(.constdata)
 <LI><a href="#[b2]">sha384FinalRaw</a> from sha384.o(i.sha384FinalRaw) referenced from sha384.o(.constdata)
 <LI><a href="#[af]">sha384Init</a> from sha384.o(i.sha384Init) referenced from sha384.o(.constdata)
 <LI><a href="#[b0]">sha384Update</a> from sha384.o(i.sha384Update) referenced from sha384.o(.constdata)
 <LI><a href="#[b3]">sha512Compute</a> from sha512.o(i.sha512Compute) referenced from sha512.o(.constdata)
 <LI><a href="#[b6]">sha512Final</a> from sha512.o(i.sha512Final) referenced from sha512.o(.constdata)
 <LI><a href="#[b4]">sha512Init</a> from sha512.o(i.sha512Init) referenced from sha512.o(.constdata)
 <LI><a href="#[b5]">sha512Update</a> from sha512.o(i.sha512Update) referenced from sha512.o(.constdata)
 <LI><a href="#[89]">socketReceive</a> from socket.o(i.socketReceive) referenced from web_socket_transport.o(i.webSocketOpenConnection)
 <LI><a href="#[8a]">socketSend</a> from socket.o(i.socketSend) referenced from web_socket_transport.o(i.webSocketOpenConnection)
 <LI><a href="#[96]">stm32f4xxEthDisableIrq</a> from stm32f4xx_eth_driver.o(i.stm32f4xxEthDisableIrq) referenced from stm32f4xx_eth_driver.o(.constdata)
 <LI><a href="#[95]">stm32f4xxEthEnableIrq</a> from stm32f4xx_eth_driver.o(i.stm32f4xxEthEnableIrq) referenced from stm32f4xx_eth_driver.o(.constdata)
 <LI><a href="#[97]">stm32f4xxEthEventHandler</a> from stm32f4xx_eth_driver.o(i.stm32f4xxEthEventHandler) referenced from stm32f4xx_eth_driver.o(.constdata)
 <LI><a href="#[93]">stm32f4xxEthInit</a> from stm32f4xx_eth_driver.o(i.stm32f4xxEthInit) referenced from stm32f4xx_eth_driver.o(.constdata)
 <LI><a href="#[9c]">stm32f4xxEthReadPhyReg</a> from stm32f4xx_eth_driver.o(i.stm32f4xxEthReadPhyReg) referenced from stm32f4xx_eth_driver.o(.constdata)
 <LI><a href="#[98]">stm32f4xxEthSendPacket</a> from stm32f4xx_eth_driver.o(i.stm32f4xxEthSendPacket) referenced from stm32f4xx_eth_driver.o(.constdata)
 <LI><a href="#[94]">stm32f4xxEthTick</a> from stm32f4xx_eth_driver.o(i.stm32f4xxEthTick) referenced from stm32f4xx_eth_driver.o(.constdata)
 <LI><a href="#[99]">stm32f4xxEthUpdateMacAddrFilter</a> from stm32f4xx_eth_driver.o(i.stm32f4xxEthUpdateMacAddrFilter) referenced from stm32f4xx_eth_driver.o(.constdata)
 <LI><a href="#[9a]">stm32f4xxEthUpdateMacConfig</a> from stm32f4xx_eth_driver.o(i.stm32f4xxEthUpdateMacConfig) referenced from stm32f4xx_eth_driver.o(.constdata)
 <LI><a href="#[9b]">stm32f4xxEthWritePhyReg</a> from stm32f4xx_eth_driver.o(i.stm32f4xxEthWritePhyReg) referenced from stm32f4xx_eth_driver.o(.constdata)
 <LI><a href="#[84]">webSocketClientRngCallback</a> from main.o(i.webSocketClientRngCallback) referenced from main.o(i.main)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[bc]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[bd]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[bf]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[50b]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[50c]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[50d]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[50e]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[50f]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[c0]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[ef]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[c2]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[c3]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[c5]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[510]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[d5]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[c7]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[c9]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[511]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[512]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[cb]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[513]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[514]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[515]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[cd]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[516]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[517]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[518]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[519]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[51a]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[51b]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[51c]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[51d]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[51e]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[ce]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000024))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[51f]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[520]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[521]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[522]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[523]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[524]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[da]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[525]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[526]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[d0]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_stdio_2 &rArr; _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[527]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[528]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[529]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[52a]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[52b]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[52c]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[be]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[52d]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[d2]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[d4]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[52e]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[d6]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; netConfigInterface &rArr; llmnrResponderInit &rArr; ipv4JoinMulticastGroup &rArr; igmpHostJoinGroup &rArr; igmpHostSendMembershipReport &rArr; igmpSendMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[52f]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[122]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[d9]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[530]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[db]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[26]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[502]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[501]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[28]"></a>PendSV_Handler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4a4]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[20]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[531]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[3c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[119]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[de]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macStringToAddr
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4StringToAddr
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strTrimWhitespace
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseInt
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>

<P><STRONG><a name="[df]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[e2]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[184]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[532]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>tolower</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tolower.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509CompareSubtree
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509CompareSubjectName
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>

<P><STRONG><a name="[e4]"></a>toupper</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, toupper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = toupper &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsEncodeName
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsCompareName
</UL>

<P><STRONG><a name="[e5]"></a>__2fprintf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, __2fprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketClient
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugDisplayArray
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolAlloc
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netProcessLinkChange
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsProcessResponse
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientDumpConfig
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthInit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8742Init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8742EventHandler
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsReadRecord
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendAlert
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseServerSupportedVersionsExtension
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseNewSessionTicket
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseHelloRetryRequest
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseEncryptedExtensions
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13SendKeyUpdate
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseKeyUpdate
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendClientKeyExchange
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendClientHello
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerKeyExchange
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHelloDone
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHello
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseNewSessionTicket
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseHelloRequest
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificateRequest
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificateList
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendFinished
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendChangeCipherSpec
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendCertificateVerify
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendCertificate
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseFinished
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificateVerify
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificate
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsPerformClientHandshake
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseChangeCipherSpec
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseAlert
</UL>

<P><STRONG><a name="[e7]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketClient
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;formatSystemTime
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4AddrToString
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketFormatClientHandshake
</UL>

<P><STRONG><a name="[ea]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[eb]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[e9]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[c1]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[c4]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[533]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>__printf</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[f0]"></a>strtoul</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketParseStatusLine
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketParseHeaderField
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketDecodePercentEncodedString
</UL>

<P><STRONG><a name="[f3]"></a>_strtok_r</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, strtok_r.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtok_internal
</UL>

<P><STRONG><a name="[4c4]"></a>strtok_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, strtok_r.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketParseStatusLine
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketParseRequestLine
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketParseConnectionField
</UL>

<P><STRONG><a name="[2ba]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipStringToAddr
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHostByName
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketParseRequestLine
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketParseHeaderField
</UL>

<P><STRONG><a name="[1f2]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethUpdateOutStats
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethUpdateInStats
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethCheckDestAddr
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessPacket
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethDropMacAddr
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethAcceptMacAddr
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessRequest
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessReply
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509CompareName
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13IsHelloRetryRequest
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsRemoveFromCache
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseHelloRetryRequest
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHello
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSelectClientVersion
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsResumeSession
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseFinished
</UL>

<P><STRONG><a name="[250]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetInterfaceName
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetHostname
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsResolve
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketParseRequestLine
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSaveSessionId
</UL>

<P><STRONG><a name="[f5]"></a>strncasecmp</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, strncasecmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = strncasecmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsCompareName
</UL>

<P><STRONG><a name="[f6]"></a>strcasecmp</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, strcasecmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = strcasecmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHostByName
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsFindEntry
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketParseRequestLine
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketParseHeaderField
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketParseConnectionField
</UL>

<P><STRONG><a name="[12b]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeWeatherNodesensor
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetInterfaceName
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetHostname
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHostByName
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strSafeCopy
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketVerifyServerKey
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketVerifyServerHandshake
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketParseRequestLine
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketVerifyClientKey
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketFormatClientHandshake
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509CompareSubtree
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509CompareSubjectName
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13HkdfExpandLabel
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemFindTag
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemDecodeFile
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13FormatClientPreSharedKeyExtension
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsPrf
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls12Prf
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSaveSessionId
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatClientSniExtension
</UL>

<P><STRONG><a name="[4c8]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketParseHandshake
</UL>

<P><STRONG><a name="[fa]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowRead
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strSafeCopy
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketProcessEthPacket
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferWrite
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferRead
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferCopy
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketProcessIpPacket
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAddOption
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsParseName
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpAddOption
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthReceivePacket
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacFinalRaw
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacInit
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacFinal
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hkdfExpand
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384FinalRaw
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384Final
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512Update
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512Final
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256FinalRaw
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1FinalRaw
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Update
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Final
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsRead
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1Update
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1Final
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketSendEx
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketReceiveEx
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curve25519Import
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curve25519Export
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbcEncrypt
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbcDecrypt
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poly1305Update
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcmEncrypt
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsInitEncryptionEngine
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFinalizeTranscriptHash
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13SaveSessionTicket
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13RestoreSessionTicket
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatNonce
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13HkdfExpandLabel
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ComputePskBinder
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5Update
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5FinalRaw
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5Final
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emsaPssEncode
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emsaPkcs1v15Encode
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emePkcs1v15Encode
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13FormatCookieExtension
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13FormatClientPreSharedKeyExtension
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateRsaSignature
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls12Prf
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsExtractMac
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSaveSessionTicket
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsRestoreSessionTicket
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseCookieExtension
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseNewSessionTicket
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13VerifySignature
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13GenerateSignature
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatClientSniExtension
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHello
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatClientHello
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatSessionId
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatFinished
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatCertificate
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[f7]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[534]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[20c]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1WriteTag
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsWriteRecord
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsWriteProtocolData
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsReadRecord
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsReadProtocolData
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsEncryptCbcRecord
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsEncryptAeadRecord
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsDecryptCbcRecord
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsDecryptAeadRecord
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendHandshakeMessage
</UL>

<P><STRONG><a name="[f9]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[535]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSendTo
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagram
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketSendIpPacket
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketSendEthPacket
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceiveEx
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendReply
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendProbe
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpEnqueuePacket
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRejectSegment
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrSendResponse
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendResponse
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpSendMessage
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGrow
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCopy
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp521r1Mod
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp384r1Mod
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256r1Mod
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp224r1Mod
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcmDecrypt
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13SaveSessionTicket
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13RestoreSessionTicket
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateMasterSecret
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateKeyBlock
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateExtendedMasterSecret
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsComputeVerifyData
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSaveSessionTicket
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSaveSessionId
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsRestoreSessionTicket
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsRestoreSessionId
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSelectCipherSuite
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificateList
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[536]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[537]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[538]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[3e4]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateSackBlocks
</UL>

<P><STRONG><a name="[539]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[fc]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[fb]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[53a]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[fd]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emsaPkcs1v15Encode
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateRsaSignature
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13VerifySignature
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13GenerateSignature
</UL>

<P><STRONG><a name="[234]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitRand
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacInit
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFree
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFreeSessionState
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiExport
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFreeEncryptionEngine
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13RestoreSessionTicket
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatNonce
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emsaPssEncode
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13FormatClientPreSharedKeyExtension
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsExtractMac
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsRestoreSessionTicket
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseNewSessionTicket
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatClientHelloPaddingExtension
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsInitHandshake
</UL>

<P><STRONG><a name="[ff]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[fe]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[109]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowInit
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketOpen
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Init
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethInit
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketInit
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpInit
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketInit
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4Init
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsInit
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpInit
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketAllocate
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpCreateEntry
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsCreateEntry
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hkdfExtract
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSetValue
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsInit
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFree
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsInitSessionState
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFreeSessionState
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGrow
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCopy
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp384r1Mod
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiShiftRight
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMul
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiImport
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x25519
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chacha20Poly1305Encrypt
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chacha20Poly1305Decrypt
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseName
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseCertificateEx
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseSubjectPublicKeyInfo
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ParsePrivateKeyInfo
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiRand
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFreeEncryptionEngine
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13GenerateServerAppTrafficKeys
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13GenerateHandshakeTrafficKeys
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13GenerateClientAppTrafficKeys
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseHelloExtensions
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemImportRsaPrivateKey
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemImportEcPrivateKey
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateSessionKeys
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendAlert
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFreeTranscriptHash
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseAlert
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[53b]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[53c]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[100]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[1e4]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketVerifyServerKey
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketParseHandshake
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13VerifySignature
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[53d]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[cc]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[f1]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>

<P><STRONG><a name="[53e]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[53f]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[540]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[541]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[102]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[ca]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[104]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[3]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[e8]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[7e]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[105]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[106]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[c6]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[e6]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>

<P><STRONG><a name="[f2]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>

<P><STRONG><a name="[cf]"></a>_initio</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[d1]"></a>_terminateio</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_stdio_2
</UL>

<P><STRONG><a name="[f4]"></a>__strtok_internal</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, strtok_int.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strspn
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcspn
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtok_r
</UL>

<P><STRONG><a name="[542]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[118]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[543]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[101]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[108]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[107]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[10c]"></a>setvbuf</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, setvbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[10a]"></a>freopen</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, fopen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[112]"></a>fopen</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fopen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[10d]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[544]"></a>fclose</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text), UNUSED)

<P><STRONG><a name="[10b]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[103]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[10f]"></a>strcspn</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, strcspn.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtok_internal
</UL>

<P><STRONG><a name="[10e]"></a>strspn</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, strspn.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtok_internal
</UL>

<P><STRONG><a name="[545]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[546]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[547]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[111]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fseek &rArr; _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[548]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[11d]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[11e]"></a>_writebuf</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _writebuf
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>

<P><STRONG><a name="[113]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _fflush &rArr; _writebuf
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[121]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>

<P><STRONG><a name="[d8]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[116]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[115]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[117]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[dc]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[11b]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[549]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[123]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
</UL>

<P><STRONG><a name="[124]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[24]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[128]"></a>CDC_Transmit_FS</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, usbd_cdc_if.o(i.CDC_Transmit_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CDC_Transmit_FS &rArr; USBD_CDC_TransmitPacket &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_TransmitPacket
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_SetTxBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[27]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[12a]"></a>DecodeWeatherNodesensor</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, weathersensor.o(i.DecodeWeatherNodesensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = DecodeWeatherNodesensor &rArr; StringSearch
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringSearch
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xBeeAPIhandle
</UL>

<P><STRONG><a name="[67]"></a>ETH_IRQHandler</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, stm32f4xx_eth_driver.o(i.ETH_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ETH_IRQHandler &rArr; osSetEventFromIsr &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEventFromIsr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[176]"></a>Error_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[12e]"></a>HAL_DMA_Abort</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[19e]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[130]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
</UL>

<P><STRONG><a name="[134]"></a>HAL_GPIO_Init</STRONG> (Thumb, 450 bytes, Stack size 40 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthInitGpio
</UL>

<P><STRONG><a name="[1a6]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initxBee
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthInitGpio
</UL>

<P><STRONG><a name="[12f]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_GenerateRandomNumber
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>

<P><STRONG><a name="[131]"></a>HAL_I2C_Init</STRONG> (Thumb, 376 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[132]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, stm32f4xx_hal_msp.o(i.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[19a]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[135]"></a>HAL_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[137]"></a>HAL_InitTick</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, stm32f4xx_hal_timebase_tim.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[138]"></a>HAL_MspInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[13a]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initxBee
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>

<P><STRONG><a name="[139]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[136]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[166]"></a>HAL_PCDEx_LPM_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_pcd_ex.o(i.HAL_PCDEx_LPM_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1d3]"></a>HAL_PCDEx_SetRxFiFo</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_hal_pcd_ex.o(i.HAL_PCDEx_SetRxFiFo))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[1d4]"></a>HAL_PCDEx_SetTxFiFo</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, stm32f4xx_hal_pcd_ex.o(i.HAL_PCDEx_SetTxFiFo))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_PCDEx_SetTxFiFo
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[13f]"></a>HAL_PCD_ConnectCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_ConnectCallback))
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DevConnected
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[141]"></a>HAL_PCD_DataInStageCallback</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_DataInStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_PCD_DataInStageCallback &rArr; USBD_LL_DataInStage &rArr; USBD_CtlReceiveStatus &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[143]"></a>HAL_PCD_DataOutStageCallback</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_DataOutStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_PCD_DataOutStageCallback &rArr; USBD_LL_DataOutStage &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_OutXfrComplete_int
</UL>

<P><STRONG><a name="[145]"></a>HAL_PCD_DisconnectCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_DisconnectCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_DisconnectCallback &rArr; USBD_LL_DevDisconnected
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DevDisconnected
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[147]"></a>HAL_PCD_EP_Abort</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PCD_EP_Abort &rArr; USB_EPStopXfer
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStopXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[149]"></a>HAL_PCD_EP_Close</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DeactivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_CloseEP
</UL>

<P><STRONG><a name="[14b]"></a>HAL_PCD_EP_ClrStall</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_ClrStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PCD_EP_ClrStall
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPClearStall
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
</UL>

<P><STRONG><a name="[1d2]"></a>HAL_PCD_EP_GetRxCount</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_GetRxCount))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_GetRxDataSize
</UL>

<P><STRONG><a name="[14d]"></a>HAL_PCD_EP_Open</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ActivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
</UL>

<P><STRONG><a name="[14f]"></a>HAL_PCD_EP_Receive</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>

<P><STRONG><a name="[152]"></a>HAL_PCD_EP_SetStall</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_SetStall))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_PCD_EP_SetStall &rArr; USB_EP0_OutStart
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPSetStall
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>

<P><STRONG><a name="[155]"></a>HAL_PCD_EP_Transmit</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_EP_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>

<P><STRONG><a name="[156]"></a>HAL_PCD_IRQHandler</STRONG> (Thumb, 1376 bytes, Stack size 48 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HAL_PCD_IRQHandler &rArr; HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_SetConfig &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetTurnaroundTime
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadPacket
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadInterrupts
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevOutEPInterrupt
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevInEPInterrupt
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevAllOutEpInterrupt
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadDevAllInEpInterrupt
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetMode
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetDevSpeed
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0_OutStart
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ActivateSetup
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_LPM_Callback
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Abort
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteEmptyTxFifo
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_OutXfrComplete_int
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SuspendCallback
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetupStageCallback
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SOFCallback
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResumeCallback
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOOUTIncompleteCallback
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOINIncompleteCallback
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DisconnectCallback
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataInStageCallback
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ConnectCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[162]"></a>HAL_PCD_ISOINIncompleteCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_ISOINIncompleteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_ISOINIncompleteCallback &rArr; USBD_LL_IsoINIncomplete
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_IsoINIncomplete
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[15e]"></a>HAL_PCD_ISOOUTIncompleteCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_ISOOUTIncompleteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_ISOOUTIncompleteCallback &rArr; USBD_LL_IsoOUTIncomplete
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_IsoOUTIncomplete
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[16f]"></a>HAL_PCD_Init</STRONG> (Thumb, 226 bytes, Stack size 64 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableGlobalInt
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevDisconnect
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreInit
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_MspInit
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>

<P><STRONG><a name="[170]"></a>HAL_PCD_MspInit</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, usbd_conf.o(i.HAL_PCD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_PCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[16b]"></a>HAL_PCD_ResetCallback</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, usbd_conf.o(i.HAL_PCD_ResetCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_PCD_ResetCallback &rArr; USBD_LL_Reset &rArr; USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetSpeed
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Reset
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[164]"></a>HAL_PCD_ResumeCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_ResumeCallback))
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Resume
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[16c]"></a>HAL_PCD_SOFCallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_SOFCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_SOFCallback &rArr; USBD_LL_SOF
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SOF
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[17b]"></a>HAL_PCD_SetAddress</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_SetAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetDevAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
</UL>

<P><STRONG><a name="[15d]"></a>HAL_PCD_SetupStageCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_conf.o(i.HAL_PCD_SetupStageCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_SetConfig &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[17e]"></a>HAL_PCD_Start</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32f4xx_hal_pcd.o(i.HAL_PCD_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableGlobalInt
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Start
</UL>

<P><STRONG><a name="[165]"></a>HAL_PCD_SuspendCallback</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, usbd_conf.o(i.HAL_PCD_SuspendCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PCD_SuspendCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[182]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[13b]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[169]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[133]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1ba]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[183]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[185]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 856 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[186]"></a>HAL_RNG_DeInit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f4xx_hal_rng.o(i.HAL_RNG_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RNG_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trngInit
</UL>

<P><STRONG><a name="[188]"></a>HAL_RNG_GenerateRandomNumber</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, stm32f4xx_hal_rng.o(i.HAL_RNG_GenerateRandomNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RNG_GenerateRandomNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trngGetRandomData
</UL>

<P><STRONG><a name="[189]"></a>HAL_RNG_Init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32f4xx_hal_rng.o(i.HAL_RNG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RNG_Init &rArr; HAL_RNG_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trngInit
</UL>

<P><STRONG><a name="[187]"></a>HAL_RNG_MspDeInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_msp.o(i.HAL_RNG_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_DeInit
</UL>

<P><STRONG><a name="[18a]"></a>HAL_RNG_MspInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_RNG_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RNG_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_Init
</UL>

<P><STRONG><a name="[197]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[199]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1a8]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[13c]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[18b]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[13d]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask02
</UL>

<P><STRONG><a name="[18d]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_ETR_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[193]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[192]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 358 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[194]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[195]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[196]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[198]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1a0]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UARTEx_RxEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[19f]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[19b]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 610 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[1a2]"></a>HAL_UART_Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a3]"></a>HAL_UART_MspInit</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, stm32f4xx_hal_msp.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1b9]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[1a1]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[22]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1b4]"></a>Initweather</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, weathersensor.o(i.Initweather))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Initweather
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask03
</UL>

<P><STRONG><a name="[1aa]"></a>MX_USB_DEVICE_Init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, usb_device.o(i.MX_USB_DEVICE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MX_USB_DEVICE_Init &rArr; USBD_Init &rArr; USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Start
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_RegisterClass
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_RegisterInterface
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>

<P><STRONG><a name="[23]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.OTG_FS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = OTG_FS_IRQHandler &rArr; HAL_PCD_IRQHandler &rArr; HAL_PCD_SetupStageCallback &rArr; USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_SetConfig &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>StartDefaultTask</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.StartDefaultTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = StartDefaultTask &rArr; MX_USB_DEVICE_Init &rArr; USBD_Init &rArr; USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>StartTask02</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(i.StartTask02))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = StartTask02 &rArr; xBeeFunction &rArr; xBeeAPIhandle &rArr; DecodeWeatherNodesensor &rArr; StringSearch
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_weatherdataprocess
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xBeeFunction
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initxBee
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>StartTask03</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(i.StartTask03))
<BR><BR>[Stack]<UL><LI>Max Depth = 1824 + Unknown Stack Size
<LI>Call Chain = StartTask03 &rArr; webSocketClient &rArr; webSocketShutdown &rArr; webSocketReceive &rArr; webSocketReceiveEx &rArr; webSocketReceiveData &rArr; tlsRead &rArr; tlsConnect &rArr; tlsPerformHandshake &rArr; tlsPerformClientHandshake &rArr; tlsReceiveHandshakeMessage &rArr; tlsParseHandshakeMessage &rArr; tlsParseServerHandshakeMessage &rArr; tlsParseCertificate &rArr; tlsParseCertificateList &rArr; tlsValidateCertificate &rArr; x509ValidateCertificate &rArr; x509VerifySignature &rArr; x509VerifyEcdsaSignature &rArr; ecdsaVerifySignature &rArr; ecTwinMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Initweather
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketClient
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[12c]"></a>StringSearch</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, generalfunction.o(i.StringSearch))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = StringSearch
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeWeatherNodesensor
</UL>

<P><STRONG><a name="[29]"></a>SysTick_Handler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1b7]"></a>SystemClock_Config</STRONG> (Thumb, 134 bytes, Stack size 88 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7b]"></a>SystemInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[46]"></a>TIM2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM2_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.TIM5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM5_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xBeeTimer
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.TIM6_DAC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM6_DAC_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[18c]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 156 bytes, Stack size 20 bytes, stm32f4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[18e]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[51]"></a>USART3_IRQHandler</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, xbee.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART3_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>USBD_CDC_GetDeviceQualifierDescriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_cdc.o(i.USBD_CDC_GetDeviceQualifierDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[127]"></a>USBD_CDC_ReceivePacket</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, usbd_cdc.o(i.USBD_CDC_ReceivePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_CDC_ReceivePacket &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Receive_FS
</UL>

<P><STRONG><a name="[1ad]"></a>USBD_CDC_RegisterInterface</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usbd_cdc.o(i.USBD_CDC_RegisterInterface))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[126]"></a>USBD_CDC_SetRxBuffer</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usbd_cdc.o(i.USBD_CDC_SetRxBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Receive_FS
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Init_FS
</UL>

<P><STRONG><a name="[125]"></a>USBD_CDC_SetTxBuffer</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usbd_cdc.o(i.USBD_CDC_SetTxBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Transmit_FS
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Init_FS
</UL>

<P><STRONG><a name="[129]"></a>USBD_CDC_TransmitPacket</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, usbd_cdc.o(i.USBD_CDC_TransmitPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_CDC_TransmitPacket &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Transmit_FS
</UL>

<P><STRONG><a name="[1dd]"></a>USBD_ClrClassConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_ClrClassConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_ClrClassConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[1df]"></a>USBD_CoreFindEP</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_CoreFindEP))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[1e1]"></a>USBD_CoreFindIF</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_CoreFindIF))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
</UL>

<P><STRONG><a name="[1c6]"></a>USBD_CtlContinueRx</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlContinueRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_CtlContinueRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
</UL>

<P><STRONG><a name="[1c7]"></a>USBD_CtlContinueSendData</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlContinueSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_CtlContinueSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[1c5]"></a>USBD_CtlError</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_ctlreq.o(i.USBD_CtlError))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBD_CtlError &rArr; USBD_LL_StallEP &rArr; HAL_PCD_EP_SetStall &rArr; USB_EP0_OutStart
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Setup
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1c3]"></a>USBD_CtlPrepareRx</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlPrepareRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_CtlPrepareRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Setup
</UL>

<P><STRONG><a name="[1c9]"></a>USBD_CtlReceiveStatus</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlReceiveStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_CtlReceiveStatus &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
</UL>

<P><STRONG><a name="[1c4]"></a>USBD_CtlSendData</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Setup
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1ca]"></a>USBD_CtlSendStatus</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbd_ioreq.o(i.USBD_CtlSendStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataOutStage
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[f]"></a>USBD_FS_ConfigStrDescriptor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_FS_ConfigStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_FS_ConfigStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>USBD_FS_DeviceDescriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_desc.o(i.USBD_FS_DeviceDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>USBD_FS_InterfaceStrDescriptor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_FS_InterfaceStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_FS_InterfaceStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>USBD_FS_LangIDStrDescriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_desc.o(i.USBD_FS_LangIDStrDescriptor))
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>USBD_FS_ManufacturerStrDescriptor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_FS_ManufacturerStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_FS_ManufacturerStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>USBD_FS_ProductStrDescriptor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_FS_ProductStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_FS_ProductStrDescriptor &rArr; USBD_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetString
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>USBD_FS_SerialStrDescriptor</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usbd_desc.o(i.USBD_FS_SerialStrDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USBD_FS_SerialStrDescriptor &rArr; IntToUnicode
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntToUnicode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_desc.o(.data)
</UL>
<P><STRONG><a name="[1bf]"></a>USBD_GetEpDesc</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, usbd_core.o(i.USBD_GetEpDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USBD_GetEpDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetNextDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_GetOtherSpeedCfgDesc
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_GetHSCfgDesc
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_GetFSCfgDesc
</UL>

<P><STRONG><a name="[1ce]"></a>USBD_GetNextDesc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_GetNextDesc))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetEpDesc
</UL>

<P><STRONG><a name="[1cb]"></a>USBD_GetString</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_GetString))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_GetString
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_ProductStrDescriptor
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_ManufacturerStrDescriptor
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_InterfaceStrDescriptor
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_ConfigStrDescriptor
</UL>

<P><STRONG><a name="[1d1]"></a>USBD_Get_USB_Status</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usbd_conf.o(i.USBD_Get_USB_Status))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Start
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_CloseEP
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
</UL>

<P><STRONG><a name="[1ab]"></a>USBD_Init</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USBD_Init &rArr; USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[1d0]"></a>USBD_LL_ClearStallEP</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_ClearStallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBD_LL_ClearStallEP &rArr; HAL_PCD_EP_ClrStall
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_ClrStall
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[1bd]"></a>USBD_LL_CloseEP</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_CloseEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USBD_LL_CloseEP &rArr; HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Close
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_DeInit
</UL>

<P><STRONG><a name="[142]"></a>USBD_LL_DataInStage</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, usbd_core.o(i.USBD_LL_DataInStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USBD_LL_DataInStage &rArr; USBD_CtlReceiveStatus &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataInStageCallback
</UL>

<P><STRONG><a name="[144]"></a>USBD_LL_DataOutStage</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_LL_DataOutStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_LL_DataOutStage &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataOutStageCallback
</UL>

<P><STRONG><a name="[140]"></a>USBD_LL_DevConnected</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_DevConnected))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ConnectCallback
</UL>

<P><STRONG><a name="[146]"></a>USBD_LL_DevDisconnected</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_LL_DevDisconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_DevDisconnected
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DisconnectCallback
</UL>

<P><STRONG><a name="[1bc]"></a>USBD_LL_GetRxDataSize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbd_conf.o(i.USBD_LL_GetRxDataSize))
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_GetRxCount
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_DataOut
</UL>

<P><STRONG><a name="[1cf]"></a>USBD_LL_Init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USBD_LL_Init &rArr; HAL_PCD_Init &rArr; HAL_PCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_SetTxFiFo
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCDEx_SetRxFiFo
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Init
</UL>

<P><STRONG><a name="[1e0]"></a>USBD_LL_IsStallEP</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usbd_conf.o(i.USBD_LL_IsStallEP))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[16d]"></a>USBD_LL_IsoINIncomplete</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_LL_IsoINIncomplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_IsoINIncomplete
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOINIncompleteCallback
</UL>

<P><STRONG><a name="[16e]"></a>USBD_LL_IsoOUTIncomplete</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_LL_IsoOUTIncomplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_IsoOUTIncomplete
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ISOOUTIncompleteCallback
</UL>

<P><STRONG><a name="[1c1]"></a>USBD_LL_OpenEP</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_OpenEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Open
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Reset
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Init
</UL>

<P><STRONG><a name="[1c2]"></a>USBD_LL_PrepareReceive</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_PrepareReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ReceivePacket
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlPrepareRx
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlReceiveStatus
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueRx
</UL>

<P><STRONG><a name="[178]"></a>USBD_LL_Reset</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, usbd_core.o(i.USBD_LL_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBD_LL_Reset &rArr; USBD_LL_OpenEP &rArr; HAL_PCD_EP_Open &rArr; USB_ActivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
</UL>

<P><STRONG><a name="[179]"></a>USBD_LL_Resume</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_Resume))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResumeCallback
</UL>

<P><STRONG><a name="[17a]"></a>USBD_LL_SOF</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, usbd_core.o(i.USBD_LL_SOF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_LL_SOF
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SOFCallback
</UL>

<P><STRONG><a name="[177]"></a>USBD_LL_SetSpeed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_SetSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_ResetCallback
</UL>

<P><STRONG><a name="[1d5]"></a>USBD_LL_SetUSBAddress</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_SetUSBAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_LL_SetUSBAddress &rArr; HAL_PCD_SetAddress
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetAddress
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[17d]"></a>USBD_LL_SetupStage</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_LL_SetupStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBD_LL_SetupStage &rArr; USBD_StdDevReq &rArr; USBD_SetConfig &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdItfReq
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ParseSetupRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetupStageCallback
</UL>

<P><STRONG><a name="[1c8]"></a>USBD_LL_StallEP</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_StallEP))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_LL_StallEP &rArr; HAL_PCD_EP_SetStall &rArr; USB_EP0_OutStart
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_DataInStage
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdEPReq
</UL>

<P><STRONG><a name="[1da]"></a>USBD_LL_Start</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_LL_Start &rArr; HAL_PCD_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Start
</UL>

<P><STRONG><a name="[181]"></a>USBD_LL_Suspend</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_LL_Suspend))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SuspendCallback
</UL>

<P><STRONG><a name="[1bb]"></a>USBD_LL_Transmit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbd_conf.o(i.USBD_LL_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Get_USB_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_TransmitPacket
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_DataIn
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlContinueSendData
</UL>

<P><STRONG><a name="[1d6]"></a>USBD_ParseSetupRequest</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_ParseSetupRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_ParseSetupRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWAPBYTE
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[1ac]"></a>USBD_RegisterClass</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, usbd_core.o(i.USBD_RegisterClass))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_RegisterClass
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[1de]"></a>USBD_SetClassConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_SetClassConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
</UL>

<P><STRONG><a name="[1ae]"></a>USBD_Start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_core.o(i.USBD_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_Start &rArr; USBD_LL_Start &rArr; HAL_PCD_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_DEVICE_Init
</UL>

<P><STRONG><a name="[1d7]"></a>USBD_StdDevReq</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, usbd_ctlreq.o(i.USBD_StdDevReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBD_StdDevReq &rArr; USBD_SetConfig &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetUSBAddress
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetConfig
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[1d9]"></a>USBD_StdEPReq</STRONG> (Thumb, 352 bytes, Stack size 24 bytes, usbd_ctlreq.o(i.USBD_StdEPReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USBD_StdEPReq &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_StallEP
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_IsStallEP
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_ClearStallEP
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CoreFindEP
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[1d8]"></a>USBD_StdItfReq</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, usbd_ctlreq.o(i.USBD_StdItfReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_StdItfReq &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CoreFindIF
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_SetupStage
</UL>

<P><STRONG><a name="[1be]"></a>USBD_static_free</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbd_conf.o(i.USBD_static_free))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_DeInit
</UL>

<P><STRONG><a name="[1c0]"></a>USBD_static_malloc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_conf.o(i.USBD_static_malloc))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_Init
</UL>

<P><STRONG><a name="[14e]"></a>USB_ActivateEndpoint</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, stm32f4xx_ll_usb.o(i.USB_ActivateEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_ActivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Open
</UL>

<P><STRONG><a name="[167]"></a>USB_ActivateSetup</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ActivateSetup))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[172]"></a>USB_CoreInit</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32f4xx_ll_usb.o(i.USB_CoreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_CoreInit &rArr; USB_CoreReset
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreReset
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[14a]"></a>USB_DeactivateEndpoint</STRONG> (Thumb, 194 bytes, Stack size 12 bytes, stm32f4xx_ll_usb.o(i.USB_DeactivateEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_DeactivateEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Close
</UL>

<P><STRONG><a name="[180]"></a>USB_DevConnect</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_DevConnect))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
</UL>

<P><STRONG><a name="[175]"></a>USB_DevDisconnect</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_DevDisconnect))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[174]"></a>USB_DevInit</STRONG> (Thumb, 362 bytes, Stack size 36 bytes, stm32f4xx_ll_usb.o(i.USB_DevInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USB_DevInit &rArr; USB_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushRxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[171]"></a>USB_DisableGlobalInt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_DisableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[151]"></a>USB_EP0StartXfer</STRONG> (Thumb, 280 bytes, Stack size 16 bytes, stm32f4xx_ll_usb.o(i.USB_EP0StartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_EP0StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
</UL>

<P><STRONG><a name="[154]"></a>USB_EP0_OutStart</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_EP0_OutStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_EP0_OutStart
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_EP_OutXfrComplete_int
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[14c]"></a>USB_EPClearStall</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_EPClearStall))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_ClrStall
</UL>

<P><STRONG><a name="[153]"></a>USB_EPSetStall</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_EPSetStall))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_SetStall
</UL>

<P><STRONG><a name="[150]"></a>USB_EPStartXfer</STRONG> (Thumb, 480 bytes, Stack size 24 bytes, stm32f4xx_ll_usb.o(i.USB_EPStartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Transmit
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Receive
</UL>

<P><STRONG><a name="[148]"></a>USB_EPStopXfer</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, stm32f4xx_ll_usb.o(i.USB_EPStopXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_EPStopXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_EP_Abort
</UL>

<P><STRONG><a name="[17f]"></a>USB_EnableGlobalInt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_EnableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Start
</UL>

<P><STRONG><a name="[1e3]"></a>USB_FlushRxFifo</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_FlushRxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_FlushRxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
</UL>

<P><STRONG><a name="[161]"></a>USB_FlushTxFifo</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, stm32f4xx_ll_usb.o(i.USB_FlushTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_FlushTxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevInit
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[168]"></a>USB_GetDevSpeed</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_GetDevSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[157]"></a>USB_GetMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_GetMode))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[15f]"></a>USB_ReadDevAllInEpInterrupt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ReadDevAllInEpInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[15a]"></a>USB_ReadDevAllOutEpInterrupt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ReadDevAllOutEpInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[160]"></a>USB_ReadDevInEPInterrupt</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_ReadDevInEPInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_ReadDevInEPInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[15b]"></a>USB_ReadDevOutEPInterrupt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ReadDevOutEPInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[158]"></a>USB_ReadInterrupts</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ReadInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[159]"></a>USB_ReadPacket</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, stm32f4xx_ll_usb.o(i.USB_ReadPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[173]"></a>USB_SetCurrentMode</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32f4xx_ll_usb.o(i.USB_SetCurrentMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_SetCurrentMode &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_Init
</UL>

<P><STRONG><a name="[17c]"></a>USB_SetDevAddress</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_SetDevAddress))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_SetAddress
</UL>

<P><STRONG><a name="[16a]"></a>USB_SetTurnaroundTime</STRONG> (Thumb, 158 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_SetTurnaroundTime))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1af]"></a>USB_WritePacket</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_WritePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EPStartXfer
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCD_WriteEmptyTxFifo
</UL>

<P><STRONG><a name="[25]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[ee]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[114]"></a>_sys_close</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, retarget_io.o(i._sys_close))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[11c]"></a>_sys_flen</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, retarget_io.o(i._sys_flen))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[11a]"></a>_sys_istty</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, retarget_io.o(i._sys_istty))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[110]"></a>_sys_open</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, retarget_io.o(i._sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _sys_open
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[11f]"></a>_sys_seek</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, retarget_io.o(i._sys_seek))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[120]"></a>_sys_write</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, retarget_io.o(i._sys_write))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[9f]"></a>aesDecryptBlock</STRONG> (Thumb, 550 bytes, Stack size 36 bytes, aes.o(i.aesDecryptBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = aesDecryptBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aes.o(.constdata)
</UL>
<P><STRONG><a name="[9e]"></a>aesEncryptBlock</STRONG> (Thumb, 540 bytes, Stack size 36 bytes, aes.o(i.aesEncryptBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = aesEncryptBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowGenerateBlock
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowFastReseed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aes.o(.constdata)
</UL>
<P><STRONG><a name="[9d]"></a>aesInit</STRONG> (Thumb, 386 bytes, Stack size 20 bytes, aes.o(i.aesInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = aesInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowRead
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowFastReseed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aes.o(.constdata)
</UL>
<P><STRONG><a name="[1e5]"></a>arpCreateEntry</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, arp.o(i.arpCreateEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = arpCreateEntry &rArr; arpFlushQueuedPackets &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFlushQueuedPackets
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpResolve
</UL>

<P><STRONG><a name="[1e8]"></a>arpEnqueuePacket</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, arp.o(i.arpEnqueuePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = arpEnqueuePacket &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAlloc
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferCopy
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFindEntry
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
</UL>

<P><STRONG><a name="[1ea]"></a>arpFindEntry</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, arp.o(i.arpFindEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = arpFindEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpResolve
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessReply
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpEnqueuePacket
</UL>

<P><STRONG><a name="[1ee]"></a>arpFlushCache</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, arp.o(i.arpFlushCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = arpFlushCache &rArr; arpFlushQueuedPackets &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFlushQueuedPackets
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4LinkChangeEvent
</UL>

<P><STRONG><a name="[1e7]"></a>arpFlushQueuedPackets</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, arp.o(i.arpFlushQueuedPackets))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = arpFlushQueuedPackets &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpTick
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFlushCache
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpCreateEntry
</UL>

<P><STRONG><a name="[1ef]"></a>arpInit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arp.o(i.arpInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = arpInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
</UL>

<P><STRONG><a name="[1f0]"></a>arpProcessPacket</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, arp.o(i.arpProcessPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = arpProcessPacket &rArr; arpProcessRequest &rArr; arpSendReply &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessRequest
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessReply
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
</UL>

<P><STRONG><a name="[1f4]"></a>arpProcessReply</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, arp.o(i.arpProcessReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = arpProcessReply &rArr; arpSendQueuedPackets &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsTentativeAddr
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendQueuedPackets
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFindEntry
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsBroadcastAddr
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessPacket
</UL>

<P><STRONG><a name="[1f5]"></a>arpProcessRequest</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, arp.o(i.arpProcessRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = arpProcessRequest &rArr; arpSendReply &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendReply
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsBroadcastAddr
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessPacket
</UL>

<P><STRONG><a name="[1fa]"></a>arpResolve</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, arp.o(i.arpResolve))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFindEntry
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpCreateEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
</UL>

<P><STRONG><a name="[1fc]"></a>arpSendProbe</STRONG> (Thumb, 152 bytes, Stack size 64 bytes, arp.o(i.arpSendProbe))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = arpSendProbe &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethAllocBuffer
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateProbing
</UL>

<P><STRONG><a name="[1f8]"></a>arpSendQueuedPackets</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, arp.o(i.arpSendQueuedPackets))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = arpSendQueuedPackets &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4UpdateOutStats
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessReply
</UL>

<P><STRONG><a name="[1f9]"></a>arpSendReply</STRONG> (Thumb, 154 bytes, Stack size 72 bytes, arp.o(i.arpSendReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = arpSendReply &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethAllocBuffer
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessRequest
</UL>

<P><STRONG><a name="[1fb]"></a>arpSendRequest</STRONG> (Thumb, 168 bytes, Stack size 88 bytes, arp.o(i.arpSendRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethAllocBuffer
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SelectSourceAddr
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpTick
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpResolve
</UL>

<P><STRONG><a name="[202]"></a>arpTick</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, arp.o(i.arpTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = arpTick &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFlushQueuedPackets
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>

<P><STRONG><a name="[203]"></a>asn1CheckOid</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, asn1.o(i.asn1CheckOid))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = asn1CheckOid &rArr; oidComp
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oidComp
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckTag
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseAlgorithmIdentifier
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ParsePrivateKeyAlgo
</UL>

<P><STRONG><a name="[204]"></a>asn1CheckTag</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, asn1.o(i.asn1CheckTag))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = asn1CheckTag
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadOid
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadOctetString
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadInt32
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckOid
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadSequence
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaReadSignature
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseVersion
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseTime
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseSubjectUniqueId
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseSignatureValue
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseSerialNumber
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseNsCertType
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseNameAttribute
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseKeyUsage
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseIssuerUniqueId
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseExtensions
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseExtension
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseBasicConstraints
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseSubjectPublicKeyInfo
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseRsaPublicKey
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseDsaPublicKey
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseDsaParameters
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ParseRsaPrivateKey
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ParseDsaPrivateKey
</UL>

<P><STRONG><a name="[294]"></a>asn1DumpObject</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, asn1.o(i.asn1DumpObject))
<BR><BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaReadSignature
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemDecodeFile
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificateList
</UL>

<P><STRONG><a name="[206]"></a>asn1ReadInt32</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, asn1.o(i.asn1ReadInt32))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = asn1ReadInt32 &rArr; asn1ReadTag
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckTag
</UL>
<BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseVersion
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseBasicConstraints
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ParseRsaPrivateKey
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ParsePrivateKeyInfo
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ParseEcPrivateKey
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ParseDsaPrivateKey
</UL>

<P><STRONG><a name="[208]"></a>asn1ReadOctetString</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, asn1.o(i.asn1ReadOctetString))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = asn1ReadOctetString &rArr; asn1ReadTag
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckTag
</UL>
<BR>[Called By]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseSubjectKeyId
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseExtension
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ParsePrivateKeyInfo
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ParseEcPrivateKey
</UL>

<P><STRONG><a name="[209]"></a>asn1ReadOid</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, asn1.o(i.asn1ReadOid))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = asn1ReadOid &rArr; asn1ReadTag
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckTag
</UL>
<BR>[Called By]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseSignatureAlgo
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseNameAttribute
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseExtension
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseExtendedKeyUsage
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseAlgorithmIdentifier
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseEcParameters
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ParsePrivateKeyAlgo
</UL>

<P><STRONG><a name="[20a]"></a>asn1ReadSequence</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, asn1.o(i.asn1ReadSequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = asn1ReadSequence &rArr; asn1ReadTag
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckTag
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaReadSignature
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseValidity
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseSubjectAltName
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseSignatureAlgo
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseNameConstraints
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseNameAttribute
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseName
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseGeneralSubtree
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseExtensions
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseExtension
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseExtendedKeyUsage
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseBasicConstraints
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseAuthorityKeyId
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseSubjectPublicKeyInfo
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseRsaPublicKey
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseAlgorithmIdentifier
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseDsaParameters
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ParseRsaPrivateKey
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ParsePrivateKeyInfo
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ParsePrivateKeyAlgo
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ParseEcPrivateKey
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ParseDsaPrivateKey
</UL>

<P><STRONG><a name="[207]"></a>asn1ReadTag</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, asn1.o(i.asn1ReadTag))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = asn1ReadTag
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadOid
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadOctetString
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadInt32
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadSequence
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaReadSignature
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseVersion
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseTime
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseTbsCertificate
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseSubjectUniqueId
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseSignatureValue
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseSerialNumber
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseNsCertType
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseNameConstraints
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseNameAttribute
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseKeyUsage
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseIssuerUniqueId
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseGeneralName
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseExtensions
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseExtension
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseCertificateEx
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseBasicConstraints
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseAuthorityKeyId
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseSubjectPublicKeyInfo
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseRsaPublicKey
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseDsaPublicKey
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseDsaParameters
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ParseRsaPrivateKey
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ParseEcPrivateKey
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ParseDsaPrivateKey
</UL>

<P><STRONG><a name="[20b]"></a>asn1WriteTag</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, asn1.o(i.asn1WriteTag))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = asn1WriteTag
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaWriteSignature
</UL>

<P><STRONG><a name="[35b]"></a>base64Decode</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, base64.o(i.base64Decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = base64Decode
</UL>
<BR>[Called By]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketVerifyClientKey
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemDecodeFile
</UL>

<P><STRONG><a name="[4bf]"></a>base64Encode</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, base64.o(i.base64Encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = base64Encode
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketVerifyServerKey
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketGenerateClientKey
</UL>

<P><STRONG><a name="[20d]"></a>cbcDecrypt</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, cbc.o(i.cbcDecrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cbcDecrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsDecryptCbcRecord
</UL>

<P><STRONG><a name="[20e]"></a>cbcEncrypt</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, cbc.o(i.cbcEncrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cbcEncrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsEncryptCbcRecord
</UL>

<P><STRONG><a name="[20f]"></a>chacha20Poly1305Decrypt</STRONG> (Thumb, 314 bytes, Stack size 328 bytes, chacha20_poly1305.o(i.chacha20Poly1305Decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = chacha20Poly1305Decrypt &rArr; poly1305Final &rArr; poly1305ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poly1305Update
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poly1305Init
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poly1305Final
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chachaInit
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chachaCipher
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsDecryptAeadRecord
</UL>

<P><STRONG><a name="[215]"></a>chacha20Poly1305Encrypt</STRONG> (Thumb, 294 bytes, Stack size 328 bytes, chacha20_poly1305.o(i.chacha20Poly1305Encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = chacha20Poly1305Encrypt &rArr; poly1305Final &rArr; poly1305ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poly1305Update
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poly1305Init
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poly1305Final
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chachaInit
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chachaCipher
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsEncryptAeadRecord
</UL>

<P><STRONG><a name="[211]"></a>chachaCipher</STRONG> (Thumb, 128 bytes, Stack size 20 bytes, chacha.o(i.chachaCipher))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = chachaCipher &rArr; chachaProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chachaProcessBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chacha20Poly1305Encrypt
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chacha20Poly1305Decrypt
</UL>

<P><STRONG><a name="[210]"></a>chachaInit</STRONG> (Thumb, 430 bytes, Stack size 20 bytes, chacha.o(i.chachaInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = chachaInit
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chacha20Poly1305Encrypt
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chacha20Poly1305Decrypt
</UL>

<P><STRONG><a name="[216]"></a>chachaProcessBlock</STRONG> (Thumb, 496 bytes, Stack size 68 bytes, chacha.o(i.chachaProcessBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = chachaProcessBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chachaCipher
</UL>

<P><STRONG><a name="[4fa]"></a>compareDateTime</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, date_time.o(i.compareDateTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = compareDateTime
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ValidateCertificate
</UL>

<P><STRONG><a name="[218]"></a>computeDayOfWeek</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, date_time.o(i.computeDayOfWeek))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = computeDayOfWeek
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertUnixTimeToDate
</UL>

<P><STRONG><a name="[217]"></a>convertUnixTimeToDate</STRONG> (Thumb, 190 bytes, Stack size 12 bytes, date_time.o(i.convertUnixTimeToDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = convertUnixTimeToDate &rArr; computeDayOfWeek
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computeDayOfWeek
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ValidateCertificate
</UL>

<P><STRONG><a name="[219]"></a>curve25519Add</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, curve25519.o(i.curve25519Add))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = curve25519Add &rArr; curve25519Red &rArr; curve25519Select
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curve25519Red
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x25519
</UL>

<P><STRONG><a name="[4d5]"></a>curve25519Copy</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, curve25519.o(i.curve25519Copy))
<BR><BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x25519
</UL>

<P><STRONG><a name="[21b]"></a>curve25519Export</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, curve25519.o(i.curve25519Export))
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x25519
</UL>

<P><STRONG><a name="[21c]"></a>curve25519Import</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, curve25519.o(i.curve25519Import))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = curve25519Import
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x25519
</UL>

<P><STRONG><a name="[21d]"></a>curve25519Inv</STRONG> (Thumb, 308 bytes, Stack size 80 bytes, curve25519.o(i.curve25519Inv))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = curve25519Inv &rArr; curve25519Pwr2 &rArr; curve25519Sqr &rArr; curve25519Mul &rArr; curve25519Red &rArr; curve25519Select
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curve25519Pwr2
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curve25519Sqr
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curve25519Mul
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x25519
</UL>

<P><STRONG><a name="[21f]"></a>curve25519Mul</STRONG> (Thumb, 262 bytes, Stack size 100 bytes, curve25519.o(i.curve25519Mul))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = curve25519Mul &rArr; curve25519Red &rArr; curve25519Select
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curve25519Red
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curve25519Sqr
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curve25519Inv
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x25519
</UL>

<P><STRONG><a name="[221]"></a>curve25519MulInt</STRONG> (Thumb, 116 bytes, Stack size 52 bytes, curve25519.o(i.curve25519MulInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = curve25519MulInt &rArr; curve25519Red &rArr; curve25519Select
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curve25519Red
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x25519
</UL>

<P><STRONG><a name="[220]"></a>curve25519Pwr2</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, curve25519.o(i.curve25519Pwr2))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = curve25519Pwr2 &rArr; curve25519Sqr &rArr; curve25519Mul &rArr; curve25519Red &rArr; curve25519Select
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curve25519Sqr
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curve25519Inv
</UL>

<P><STRONG><a name="[21a]"></a>curve25519Red</STRONG> (Thumb, 60 bytes, Stack size 52 bytes, curve25519.o(i.curve25519Red))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = curve25519Red &rArr; curve25519Select
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curve25519Select
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curve25519Sub
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curve25519MulInt
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curve25519Mul
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curve25519Add
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x25519
</UL>

<P><STRONG><a name="[222]"></a>curve25519Select</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, curve25519.o(i.curve25519Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = curve25519Select
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curve25519Red
</UL>

<P><STRONG><a name="[4d4]"></a>curve25519SetInt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, curve25519.o(i.curve25519SetInt))
<BR><BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x25519
</UL>

<P><STRONG><a name="[21e]"></a>curve25519Sqr</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, curve25519.o(i.curve25519Sqr))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = curve25519Sqr &rArr; curve25519Mul &rArr; curve25519Red &rArr; curve25519Select
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curve25519Mul
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curve25519Pwr2
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curve25519Inv
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x25519
</UL>

<P><STRONG><a name="[223]"></a>curve25519Sub</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, curve25519.o(i.curve25519Sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = curve25519Sub &rArr; curve25519Red &rArr; curve25519Select
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curve25519Red
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x25519
</UL>

<P><STRONG><a name="[4d6]"></a>curve25519Swap</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, curve25519.o(i.curve25519Swap))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = curve25519Swap
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x25519
</UL>

<P><STRONG><a name="[224]"></a>debugDisplayArray</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, debug.o(i.debugDisplayArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = debugDisplayArray &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendAlert
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseHelloRetryRequest
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHello
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseAlert
</UL>

<P><STRONG><a name="[227]"></a>dhcpAddOption</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, dhcp_common.o(i.dhcpAddOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dhcpAddOption
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
</UL>

<P><STRONG><a name="[228]"></a>dhcpClientChangeState</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, dhcp_client_misc.o(i.dhcpClientChangeState))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = dhcpClientChangeState &rArr; formatSystemTime &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;formatSystemTime
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRequesting
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRenewing
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebooting
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebinding
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateProbing
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateInitReboot
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateInit
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateBound
</UL>

<P><STRONG><a name="[22c]"></a>dhcpClientCheckTimeout</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, dhcp_client_misc.o(i.dhcpClientCheckTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = dhcpClientCheckTimeout &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateSelecting
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRequesting
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebooting
</UL>

<P><STRONG><a name="[22d]"></a>dhcpClientComputeElapsedTime</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, dhcp_client_misc.o(i.dhcpClientComputeElapsedTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dhcpClientComputeElapsedTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
</UL>

<P><STRONG><a name="[22e]"></a>dhcpClientDumpConfig</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, dhcp_client_misc.o(i.dhcpClientDumpConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = dhcpClientDumpConfig &rArr; formatSystemTime &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;formatSystemTime
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4AddrToString
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateProbing
</UL>

<P><STRONG><a name="[230]"></a>dhcpClientLinkChangeEvent</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, dhcp_client_misc.o(i.dhcpClientLinkChangeEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = dhcpClientLinkChangeEvent &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientResetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4LinkChangeEvent
</UL>

<P><STRONG><a name="[231]"></a>dhcpClientResetConfig</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, dhcp_client_misc.o(i.dhcpClientResetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebinding
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientLinkChangeEvent
</UL>

<P><STRONG><a name="[232]"></a>dhcpClientSendDecline</STRONG> (Thumb, 284 bytes, Stack size 112 bytes, dhcp_client_misc.o(i.dhcpClientSendDecline))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = dhcpClientSendDecline &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAllocBuffer
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpAddOption
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateProbing
</UL>

<P><STRONG><a name="[238]"></a>dhcpClientSendDiscover</STRONG> (Thumb, 258 bytes, Stack size 112 bytes, dhcp_client_misc.o(i.dhcpClientSendDiscover))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = dhcpClientSendDiscover &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAllocBuffer
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpAddOption
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientComputeElapsedTime
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateSelecting
</UL>

<P><STRONG><a name="[239]"></a>dhcpClientSendRequest</STRONG> (Thumb, 414 bytes, Stack size 112 bytes, dhcp_client_misc.o(i.dhcpClientSendRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = dhcpClientSendRequest &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAllocBuffer
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpGetOption
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpAddOption
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientComputeElapsedTime
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRequesting
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRenewing
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebooting
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebinding
</UL>

<P><STRONG><a name="[23b]"></a>dhcpClientStateBound</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, dhcp_client_fsm.o(i.dhcpClientStateBound))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = dhcpClientStateBound &rArr; dhcpClientChangeState &rArr; formatSystemTime &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[23c]"></a>dhcpClientStateInit</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, dhcp_client_fsm.o(i.dhcpClientStateInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = dhcpClientStateInit &rArr; dhcpClientChangeState &rArr; formatSystemTime &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRandRange
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[23e]"></a>dhcpClientStateInitReboot</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, dhcp_client_fsm.o(i.dhcpClientStateInitReboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = dhcpClientStateInitReboot &rArr; dhcpClientChangeState &rArr; formatSystemTime &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRandRange
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[23f]"></a>dhcpClientStateProbing</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, dhcp_client_fsm.o(i.dhcpClientStateProbing))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = dhcpClientStateProbing &rArr; dhcpClientSendDecline &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendProbe
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientDumpConfig
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[240]"></a>dhcpClientStateRebinding</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, dhcp_client_fsm.o(i.dhcpClientStateRebinding))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = dhcpClientStateRebinding &rArr; dhcpClientSendRequest &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientResetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[242]"></a>dhcpClientStateRebooting</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, dhcp_client_fsm.o(i.dhcpClientStateRebooting))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = dhcpClientStateRebooting &rArr; dhcpClientSendRequest &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRandRange
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientCheckTimeout
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[243]"></a>dhcpClientStateRenewing</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, dhcp_client_fsm.o(i.dhcpClientStateRenewing))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = dhcpClientStateRenewing &rArr; dhcpClientSendRequest &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[244]"></a>dhcpClientStateRequesting</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, dhcp_client_fsm.o(i.dhcpClientStateRequesting))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = dhcpClientStateRequesting &rArr; dhcpClientSendRequest &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRandRange
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientCheckTimeout
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[245]"></a>dhcpClientStateSelecting</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, dhcp_client_fsm.o(i.dhcpClientStateSelecting))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = dhcpClientStateSelecting &rArr; dhcpClientSendDiscover &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRandRange
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientCheckTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
</UL>

<P><STRONG><a name="[246]"></a>dhcpClientTick</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, dhcp_client_misc.o(i.dhcpClientTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = dhcpClientTick &rArr; dhcpClientStateRequesting &rArr; dhcpClientSendRequest &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateSelecting
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRequesting
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRenewing
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebooting
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebinding
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateProbing
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateInitReboot
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateInit
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateBound
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>

<P><STRONG><a name="[23a]"></a>dhcpGetOption</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, dhcp_common.o(i.dhcpGetOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = dhcpGetOption
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
</UL>

<P><STRONG><a name="[247]"></a>dnsCompareName</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, dns_common.o(i.dnsCompareName))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + In Cycle
<LI>Call Chain = dnsCompareName &rArr;  dnsCompareName (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsCompareName
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsCompareName
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsProcessResponse
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrProcessQuery
</UL>

<P><STRONG><a name="[248]"></a>dnsCreateEntry</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, dns_cache.o(i.dnsCreateEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = dnsCreateEntry &rArr; dnsDeleteEntry &rArr; udpDetachRxCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsDeleteEntry
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsResolve
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
</UL>

<P><STRONG><a name="[249]"></a>dnsDeleteEntry</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, dns_cache.o(i.dnsDeleteEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = dnsDeleteEntry &rArr; udpDetachRxCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpDetachRxCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsTick
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsFlushCache
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsProcessResponse
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsCreateEntry
</UL>

<P><STRONG><a name="[256]"></a>dnsEncodeName</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, dns_common.o(i.dnsEncodeName))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dnsEncodeName
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrSendResponse
</UL>

<P><STRONG><a name="[24b]"></a>dnsFindEntry</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, dns_cache.o(i.dnsFindEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dnsFindEntry &rArr; strcasecmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsResolve
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
</UL>

<P><STRONG><a name="[24c]"></a>dnsFlushCache</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, dns_cache.o(i.dnsFlushCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = dnsFlushCache &rArr; dnsDeleteEntry &rArr; udpDetachRxCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsDeleteEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netProcessLinkChange
</UL>

<P><STRONG><a name="[24d]"></a>dnsInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dns_cache.o(i.dnsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dnsInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[24e]"></a>dnsParseName</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, dns_common.o(i.dnsParseName))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = dnsParseName &rArr;  dnsParseName (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsParseName
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsParseName
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsProcessResponse
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrProcessQuery
</UL>

<P><STRONG><a name="[82]"></a>dnsProcessResponse</STRONG> (Thumb, 444 bytes, Stack size 40 bytes, dns_client.o(i.dnsProcessResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = dnsProcessResponse &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpDetachRxCallback
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsParseName
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsCompareName
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsDeleteEntry
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dns_client.o(i.dnsResolve)
</UL>
<P><STRONG><a name="[24f]"></a>dnsResolve</STRONG> (Thumb, 314 bytes, Stack size 56 bytes, dns_client.o(i.dnsResolve))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = dnsResolve &rArr; dnsSendQuery &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelayTask
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAddrToString
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpGetDynamicPort
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpDetachRxCallback
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAttachRxCallback
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsFindEntry
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsCreateEntry
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHostByName
</UL>

<P><STRONG><a name="[253]"></a>dnsSendQuery</STRONG> (Thumb, 226 bytes, Stack size 72 bytes, dns_client.o(i.dnsSendQuery))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = dnsSendQuery &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAllocBuffer
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsEncodeName
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsTick
</UL>

<P><STRONG><a name="[257]"></a>dnsTick</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, dns_cache.o(i.dnsTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = dnsTick &rArr; nbnsSendQuery &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsDeleteEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>

<P><STRONG><a name="[259]"></a>ecAdd</STRONG> (Thumb, 782 bytes, Stack size 112 bytes, ec.o(i.ecAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = ecAdd &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecSqrMod
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecMulMod
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSetValue
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecSubMod
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAddMod
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCopy
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiShiftRight
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetBitValue
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCompInt
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFullAdd
</UL>

<P><STRONG><a name="[260]"></a>ecAddMod</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ec.o(i.ecAddMod))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ecAddMod &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSub
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiComp
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecDouble
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAdd
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecIsPointAffine
</UL>

<P><STRONG><a name="[268]"></a>ecAffinify</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, ec.o(i.ecAffinify))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ecAffinify &rArr; mpiInvMod &rArr; mpiDiv &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecSqrMod
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecMulMod
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSetValue
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInvMod
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCompInt
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecGeneratePublicKey
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhComputeSharedSecret
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaVerifySignature
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaGenerateSignature
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecMult
</UL>

<P><STRONG><a name="[26a]"></a>ecCopy</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ec.o(i.ecCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ecCopy &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecProjectify
</UL>

<P><STRONG><a name="[26b]"></a>ecDouble</STRONG> (Thumb, 664 bytes, Stack size 88 bytes, ec.o(i.ecDouble))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ecDouble &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecSqrMod
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecMulMod
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSetValue
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecSubMod
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAddMod
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCopy
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCompInt
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFullAdd
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecTwinMult
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecMult
</UL>

<P><STRONG><a name="[26c]"></a>ecExport</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, ec.o(i.ecExport))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ecExport &rArr; mpiExport
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetByteLength
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiExport
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13FormatClientKeyShareExtension
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsWriteEcPoint
</UL>

<P><STRONG><a name="[26f]"></a>ecFree</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ec.o(i.ecFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ecFree &rArr; mpiFree &rArr; osFreeMem &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFullSub
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFreePublicKey
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFreeDomainParameters
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhComputeSharedSecret
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhCheckPublicKey
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaVerifySignature
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaGenerateSignature
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecTwinMult
</UL>

<P><STRONG><a name="[270]"></a>ecFreeDomainParameters</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ec.o(i.ecFreeDomainParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ecFreeDomainParameters &rArr; ecFree &rArr; mpiFree &rArr; osFreeMem &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFree
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFree
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhFree
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemImportEcParameters
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509VerifyEcdsaSignature
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateEcdsaSignature
</UL>

<P><STRONG><a name="[271]"></a>ecFreePrivateKey</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ec.o(i.ecFreePrivateKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ecFreePrivateKey &rArr; mpiFree &rArr; osFreeMem &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhFree
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemImportEcPrivateKey
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateEcdsaSignature
</UL>

<P><STRONG><a name="[272]"></a>ecFreePublicKey</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ec.o(i.ecFreePublicKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ecFreePublicKey &rArr; ecFree &rArr; mpiFree &rArr; osFreeMem &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFree
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFree
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhFree
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509VerifyEcdsaSignature
</UL>

<P><STRONG><a name="[273]"></a>ecFullAdd</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, ec.o(i.ecFullAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ecFullAdd &rArr; ecAdd &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecDouble
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAdd
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCopy
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCompInt
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFullSub
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecTwinMult
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecMult
</UL>

<P><STRONG><a name="[274]"></a>ecFullSub</STRONG> (Thumb, 92 bytes, Stack size 64 bytes, ec.o(i.ecFullSub))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFullAdd
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSub
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCopy
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecInit
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFree
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecTwinMult
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecMult
</UL>

<P><STRONG><a name="[276]"></a>ecGenerateKeyPair</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ec.o(i.ecGenerateKeyPair))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = ecGenerateKeyPair &rArr; ecGeneratePublicKey &rArr; ecMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecGeneratePublicKey
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecGeneratePrivateKey
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhGenerateKeyPair
</UL>

<P><STRONG><a name="[277]"></a>ecGeneratePrivateKey</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ec.o(i.ecGeneratePrivateKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ecGeneratePrivateKey &rArr; mpiRandRange &rArr; mpiSubInt &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiRandRange
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecGenerateKeyPair
</UL>

<P><STRONG><a name="[278]"></a>ecGeneratePublicKey</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ec.o(i.ecGeneratePublicKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = ecGeneratePublicKey &rArr; ecMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecMult
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAffinify
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecGenerateKeyPair
</UL>

<P><STRONG><a name="[27b]"></a>ecGetCurveInfo</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, ec_curves.o(i.ecGetCurveInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ecGetCurveInfo &rArr; oidComp
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oidComp
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509GetCurveInfo
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ImportEcParameters
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetCurveInfo
</UL>

<P><STRONG><a name="[27c]"></a>ecImport</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, ec.o(i.ecImport))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ecImport &rArr; mpiImport &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiImport
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetByteLength
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13GenerateSharedSecret
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509VerifyEcdsaSignature
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsReadEcPoint
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsReadSubjectPublicKey
</UL>

<P><STRONG><a name="[275]"></a>ecInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ec.o(i.ecInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ecInit
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFullSub
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecInitPublicKey
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecInitDomainParameters
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhComputeSharedSecret
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhCheckPublicKey
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaVerifySignature
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaGenerateSignature
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecTwinMult
</UL>

<P><STRONG><a name="[27e]"></a>ecInitDomainParameters</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ec.o(i.ecInitDomainParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ecInitDomainParameters &rArr; ecInit
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecInit
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsInit
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhInit
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509VerifyEcdsaSignature
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateEcdsaSignature
</UL>

<P><STRONG><a name="[27f]"></a>ecInitPrivateKey</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ec.o(i.ecInitPrivateKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ecInitPrivateKey
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhInit
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateEcdsaSignature
</UL>

<P><STRONG><a name="[280]"></a>ecInitPublicKey</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ec.o(i.ecInitPublicKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ecInitPublicKey &rArr; ecInit
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecInit
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsInit
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhInit
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509VerifyEcdsaSignature
</UL>

<P><STRONG><a name="[281]"></a>ecIsPointAffine</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, ec.o(i.ecIsPointAffine))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ecIsPointAffine &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecSqrMod
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecMulMod
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAddMod
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiComp
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhCheckPublicKey
</UL>

<P><STRONG><a name="[282]"></a>ecLoadDomainParameters</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, ec.o(i.ecLoadDomainParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ecLoadDomainParameters &rArr; mpiImport &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSetValue
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiImport
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ImportEcParameters
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13GenerateKeyShare
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509VerifyEcdsaSignature
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsReadSubjectPublicKey
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerKeyParams
</UL>

<P><STRONG><a name="[25e]"></a>ecMulMod</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ec.o(i.ecMulMod))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ecMulMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMul
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMod
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecDouble
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAdd
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecIsPointAffine
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAffinify
</UL>

<P><STRONG><a name="[27a]"></a>ecMult</STRONG> (Thumb, 358 bytes, Stack size 64 bytes, ec.o(i.ecMult))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = ecMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSetValue
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFullSub
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFullAdd
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecDouble
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCopy
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetBitValue
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetBitLength
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCompInt
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiAdd
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecProjectify
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAffinify
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecGeneratePublicKey
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhComputeSharedSecret
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhCheckPublicKey
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaGenerateSignature
</UL>

<P><STRONG><a name="[285]"></a>ecProjectify</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ec.o(i.ecProjectify))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ecProjectify &rArr; ecCopy &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSetValue
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhComputeSharedSecret
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhCheckPublicKey
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaVerifySignature
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecMult
</UL>

<P><STRONG><a name="[25d]"></a>ecSqrMod</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ec.o(i.ecSqrMod))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMul
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMod
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecDouble
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAdd
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecIsPointAffine
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAffinify
</UL>

<P><STRONG><a name="[25f]"></a>ecSubMod</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ec.o(i.ecSubMod))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ecSubMod &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSub
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCompInt
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecDouble
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAdd
</UL>

<P><STRONG><a name="[287]"></a>ecTwinMult</STRONG> (Thumb, 510 bytes, Stack size 128 bytes, ec.o(i.ecTwinMult))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = ecTwinMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSetValue
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecTwinMultF
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFullSub
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFullAdd
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecDouble
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetBitValue
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetBitLength
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecInit
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFree
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaVerifySignature
</UL>

<P><STRONG><a name="[288]"></a>ecTwinMultF</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ec.o(i.ecTwinMultF))
<BR><BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecTwinMult
</UL>

<P><STRONG><a name="[289]"></a>ecdhCheckPublicKey</STRONG> (Thumb, 184 bytes, Stack size 56 bytes, ecdh.o(i.ecdhCheckPublicKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = ecdhCheckPublicKey &rArr; ecMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecIsPointAffine
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCompInt
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiComp
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecProjectify
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecMult
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecInit
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFree
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13GenerateSharedSecret
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerKeyParams
</UL>

<P><STRONG><a name="[28a]"></a>ecdhComputeSharedSecret</STRONG> (Thumb, 238 bytes, Stack size 96 bytes, ecdh.o(i.ecdhComputeSharedSecret))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = ecdhComputeSharedSecret &rArr; ecMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetByteLength
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiExport
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecProjectify
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecMult
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecInit
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFree
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAffinify
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x25519
</UL>
<BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13GenerateSharedSecret
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatClientKeyParams
</UL>

<P><STRONG><a name="[28c]"></a>ecdhFree</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ecdh.o(i.ecdhFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ecdhFree &rArr; ecFreeDomainParameters &rArr; ecFree &rArr; mpiFree &rArr; osFreeMem &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFreePublicKey
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFreePrivateKey
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFreeDomainParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFree
</UL>

<P><STRONG><a name="[28d]"></a>ecdhGenerateKeyPair</STRONG> (Thumb, 150 bytes, Stack size 120 bytes, ecdh.o(i.ecdhGenerateKeyPair))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = ecdhGenerateKeyPair &rArr; ecGenerateKeyPair &rArr; ecGeneratePublicKey &rArr; ecMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecGenerateKeyPair
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiImport
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiExport
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x25519
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13GenerateKeyShare
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatClientKeyParams
</UL>

<P><STRONG><a name="[28e]"></a>ecdhInit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ecdh.o(i.ecdhInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ecdhInit &rArr; ecInitDomainParameters &rArr; ecInit
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecInitPublicKey
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecInitPrivateKey
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecInitDomainParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsInit
</UL>

<P><STRONG><a name="[28f]"></a>ecdsaFreeSignature</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ecdsa.o(i.ecdsaFreeSignature))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ecdsaFreeSignature &rArr; mpiFree &rArr; osFreeMem &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaReadSignature
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509VerifyEcdsaSignature
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifyEcdsaSignature
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateEcdsaSignature
</UL>

<P><STRONG><a name="[290]"></a>ecdsaGenerateSignature</STRONG> (Thumb, 300 bytes, Stack size 112 bytes, ecdsa.o(i.ecdsaGenerateSignature))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = ecdsaGenerateSignature &rArr; ecMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiShiftRight
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiRandRange
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMulMod
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMul
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMod
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInvMod
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiImport
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetBitLength
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiAdd
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecMult
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecInit
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFree
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAffinify
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateEcdsaSignature
</UL>

<P><STRONG><a name="[292]"></a>ecdsaInitSignature</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ecdsa.o(i.ecdsaInitSignature))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ecdsaInitSignature
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509VerifyEcdsaSignature
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifyEcdsaSignature
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateEcdsaSignature
</UL>

<P><STRONG><a name="[293]"></a>ecdsaReadSignature</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, ecdsa.o(i.ecdsaReadSignature))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ecdsaReadSignature &rArr; mpiImport &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiImport
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadSequence
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1DumpObject
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckTag
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaFreeSignature
</UL>
<BR>[Called By]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509VerifyEcdsaSignature
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifyEcdsaSignature
</UL>

<P><STRONG><a name="[295]"></a>ecdsaVerifySignature</STRONG> (Thumb, 374 bytes, Stack size 176 bytes, ecdsa.o(i.ecdsaVerifySignature))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = ecdsaVerifySignature &rArr; ecTwinMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiShiftRight
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMulMod
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMod
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInvMod
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiImport
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetBitLength
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCompInt
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiComp
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecTwinMult
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecProjectify
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecInit
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFree
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAffinify
</UL>
<BR>[Called By]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509VerifyEcdsaSignature
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifyEcdsaSignature
</UL>

<P><STRONG><a name="[296]"></a>ecdsaWriteSignature</STRONG> (Thumb, 300 bytes, Stack size 72 bytes, ecdsa.o(i.ecdsaWriteSignature))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ecdsaWriteSignature &rArr; mpiExport
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetByteLength
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetBitValue
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiExport
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1WriteTag
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateEcdsaSignature
</UL>

<P><STRONG><a name="[297]"></a>emePkcs1v15Encode</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, rsa.o(i.emePkcs1v15Encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = emePkcs1v15Encode
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaesPkcs1v15Encrypt
</UL>

<P><STRONG><a name="[298]"></a>emsaPkcs1v15Encode</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, rsa.o(i.emsaPkcs1v15Encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = emsaPkcs1v15Encode
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPkcs1v15Sign
</UL>

<P><STRONG><a name="[38e]"></a>emsaPkcs1v15Verify</STRONG> (Thumb, 238 bytes, Stack size 28 bytes, rsa.o(i.emsaPkcs1v15Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = emsaPkcs1v15Verify
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPkcs1v15Verify
</UL>

<P><STRONG><a name="[299]"></a>emsaPssEncode</STRONG> (Thumb, 198 bytes, Stack size 112 bytes, rsa.o(i.emsaPssEncode))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = emsaPssEncode &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf1
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPssSign
</UL>

<P><STRONG><a name="[29d]"></a>emsaPssVerify</STRONG> (Thumb, 234 bytes, Stack size 64 bytes, rsa.o(i.emsaPssVerify))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = emsaPssVerify &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mgf1
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPssVerify
</UL>

<P><STRONG><a name="[29e]"></a>ethAcceptMacAddr</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, ethernet.o(i.ethAcceptMacAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ethAcceptMacAddr &rArr; nicUpdateMacAddrFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicUpdateMacAddrFilter
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4JoinMulticastGroup
</UL>

<P><STRONG><a name="[1fd]"></a>ethAllocBuffer</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ethernet.o(i.ethAllocBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketSendEthPacket
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendReply
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendProbe
</UL>

<P><STRONG><a name="[2a1]"></a>ethCalcCrc</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ethernet_misc.o(i.ethCalcCrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ethCalcCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethCheckCrc
</UL>

<P><STRONG><a name="[2ae]"></a>ethCalcCrcEx</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, ethernet_misc.o(i.ethCalcCrcEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ethCalcCrcEx
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
</UL>

<P><STRONG><a name="[2a0]"></a>ethCheckCrc</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, ethernet_misc.o(i.ethCheckCrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ethCheckCrc &rArr; ethCalcCrc
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethCalcCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
</UL>

<P><STRONG><a name="[2a2]"></a>ethCheckDestAddr</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, ethernet_misc.o(i.ethCheckDestAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ethCheckDestAddr &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
</UL>

<P><STRONG><a name="[2a3]"></a>ethDropMacAddr</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, ethernet.o(i.ethDropMacAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ethDropMacAddr &rArr; nicUpdateMacAddrFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicUpdateMacAddrFilter
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4JoinMulticastGroup
</UL>

<P><STRONG><a name="[2a4]"></a>ethInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ethernet.o(i.ethInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ethInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
</UL>

<P><STRONG><a name="[2a5]"></a>ethPadFrame</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ethernet_misc.o(i.ethPadFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ethPadFrame &rArr; netBufferAppend
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAppend
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
</UL>

<P><STRONG><a name="[2a7]"></a>ethProcessFrame</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, ethernet.o(i.ethProcessFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 976 + Unknown Stack Size
<LI>Call Chain = ethProcessFrame &rArr; ipv4ProcessPacket &rArr; ipv4ReassembleDatagram &rArr; ipv4ProcessDatagram &rArr; tcpProcessSegment &rArr; tcpStateSynReceived &rArr; tcpStateEstablished &rArr; tcpProcessSegmentData &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketProcessEthPacket
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPhysicalInterface
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethUpdateInStats
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethUpdateErrorStats
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethCheckDestAddr
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethCheckCrc
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicProcessPacket
</UL>

<P><STRONG><a name="[1ff]"></a>ethSendFrame</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, ethernet.o(i.ethSendFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ethSendFrame &rArr; nicSendPacket &rArr; osWaitForEvent &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicSendPacket
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPhysicalInterface
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetLogicalInterface
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAppend
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethUpdateOutStats
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethPadFrame
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethCalcCrcEx
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketSendEthPacket
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendReply
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendQueuedPackets
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendProbe
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
</UL>

<P><STRONG><a name="[2ab]"></a>ethUpdateErrorStats</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ethernet_misc.o(i.ethUpdateErrorStats))
<BR><BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
</UL>

<P><STRONG><a name="[2a9]"></a>ethUpdateInStats</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ethernet_misc.o(i.ethUpdateInStats))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ethUpdateInStats &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
</UL>

<P><STRONG><a name="[2ad]"></a>ethUpdateOutStats</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ethernet_misc.o(i.ethUpdateOutStats))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ethUpdateOutStats &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
</UL>

<P><STRONG><a name="[229]"></a>formatSystemTime</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, date_time.o(i.formatSystemTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = formatSystemTime &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientDumpConfig
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
</UL>

<P><STRONG><a name="[80]"></a>fputc</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, debug.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = fputc &rArr; CDC_Transmit_FS &rArr; USBD_CDC_TransmitPacket &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_Transmit_FS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[2b0]"></a>gcmDecrypt</STRONG> (Thumb, 524 bytes, Stack size 104 bytes, gcm.o(i.gcmDecrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = gcmDecrypt &rArr; gcmMul
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcmMul
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcmXorBlock
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcmIncCounter
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsDecryptAeadRecord
</UL>

<P><STRONG><a name="[2b4]"></a>gcmEncrypt</STRONG> (Thumb, 492 bytes, Stack size 88 bytes, gcm.o(i.gcmEncrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = gcmEncrypt &rArr; gcmMul
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcmMul
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcmXorBlock
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcmIncCounter
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsEncryptAeadRecord
</UL>

<P><STRONG><a name="[2b3]"></a>gcmIncCounter</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gcm.o(i.gcmIncCounter))
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcmEncrypt
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcmDecrypt
</UL>

<P><STRONG><a name="[2b5]"></a>gcmInit</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, gcm.o(i.gcmInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gcmInit
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverseInt4
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsInitEncryptionEngine
</UL>

<P><STRONG><a name="[2b2]"></a>gcmMul</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, gcm.o(i.gcmMul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gcmMul
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcmEncrypt
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcmDecrypt
</UL>

<P><STRONG><a name="[2b1]"></a>gcmXorBlock</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gcm.o(i.gcmXorBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gcmXorBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcmEncrypt
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcmDecrypt
</UL>

<P><STRONG><a name="[4f9]"></a>getCurrentUnixTime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, date_time.o(i.getCurrentUnixTime))
<BR><BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ValidateCertificate
</UL>

<P><STRONG><a name="[2b7]"></a>getHostByName</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, socket.o(i.getHostByName))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = getHostByName &rArr; dnsResolve &rArr; dnsSendQuery &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipStringToAddr
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetDefaultInterface
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsResolve
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketClient
</UL>

<P><STRONG><a name="[2bc]"></a>hkdfExpand</STRONG> (Thumb, 184 bytes, Stack size 104 bytes, hkdf.o(i.hkdfExpand))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = hkdfExpand &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacUpdate
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacInit
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacFinal
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13HkdfExpandLabel
</UL>

<P><STRONG><a name="[2c0]"></a>hkdfExtract</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, hkdf.o(i.hkdfExtract))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = hkdfExtract &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacUpdate
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacInit
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacFinal
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13GenerateServerAppTrafficKeys
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13GenerateHandshakeTrafficKeys
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ComputePskBinder
</UL>

<P><STRONG><a name="[2c1]"></a>hmacCompute</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, hmac.o(i.hmacCompute))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = hmacCompute &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacUpdate
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacInit
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacFinal
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ComputePskBinder
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsComputeVerifyData
</UL>

<P><STRONG><a name="[2bf]"></a>hmacFinal</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, hmac.o(i.hmacFinal))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hmacFinal
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacCompute
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hkdfExtract
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hkdfExpand
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ComputeMac
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsPrf
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls12Prf
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsComputeMac
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifyMac
</UL>

<P><STRONG><a name="[2c2]"></a>hmacFinalRaw</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, hmac.o(i.hmacFinalRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hmacFinalRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifyMac
</UL>

<P><STRONG><a name="[2bd]"></a>hmacInit</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, hmac.o(i.hmacInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hmacInit
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacCompute
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hkdfExtract
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hkdfExpand
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ComputeMac
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsPrf
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls12Prf
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsComputeMac
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifyMac
</UL>

<P><STRONG><a name="[2be]"></a>hmacUpdate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hmac.o(i.hmacUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacCompute
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hkdfExtract
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hkdfExpand
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ComputeMac
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsPrf
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls12Prf
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsComputeMac
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifyMac
</UL>

<P><STRONG><a name="[2c3]"></a>icmpProcessEchoRequest</STRONG> (Thumb, 232 bytes, Stack size 96 bytes, icmp.o(i.icmpProcessEchoRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = icmpProcessEchoRequest &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferConcat
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendDatagram
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SelectSourceAddr
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksumEx
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsBroadcastAddr
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessMessage
</UL>

<P><STRONG><a name="[2c8]"></a>icmpProcessMessage</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, icmp.o(i.icmpProcessMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = icmpProcessMessage &rArr; icmpProcessEchoRequest &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksumEx
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
</UL>

<P><STRONG><a name="[2c9]"></a>icmpSendErrorMessage</STRONG> (Thumb, 260 bytes, Stack size 96 bytes, icmp.o(i.icmpSendErrorMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = icmpSendErrorMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferConcat
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendDatagram
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksumEx
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsBroadcastAddr
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragTick
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
</UL>

<P><STRONG><a name="[2ca]"></a>igmpHostInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, igmp_host.o(i.igmpHostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = igmpHostInit &rArr; netStartTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpInit
</UL>

<P><STRONG><a name="[2cc]"></a>igmpHostJoinGroup</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, igmp_host.o(i.igmpHostJoinGroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = igmpHostJoinGroup &rArr; igmpHostSendMembershipReport &rArr; igmpSendMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostSendMembershipReport
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4JoinMulticastGroup
</UL>

<P><STRONG><a name="[2ce]"></a>igmpHostLinkChangeEvent</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, igmp_host.o(i.igmpHostLinkChangeEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = igmpHostLinkChangeEvent &rArr; igmpHostSendMembershipReport &rArr; igmpSendMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostSendMembershipReport
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpLinkChangeEvent
</UL>

<P><STRONG><a name="[2cf]"></a>igmpHostProcessMembershipQuery</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, igmp_host_misc.o(i.igmpHostProcessMembershipQuery))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = igmpHostProcessMembershipQuery &rArr; igmpRand &rArr; netGetRand &rArr; netGetRandBit
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpRand
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostProcessMessage
</UL>

<P><STRONG><a name="[2d2]"></a>igmpHostProcessMembershipReport</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, igmp_host_misc.o(i.igmpHostProcessMembershipReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = igmpHostProcessMembershipReport
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostProcessMessage
</UL>

<P><STRONG><a name="[2d1]"></a>igmpHostProcessMessage</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, igmp_host_misc.o(i.igmpHostProcessMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = igmpHostProcessMessage &rArr; igmpHostProcessMembershipQuery &rArr; igmpRand &rArr; netGetRand &rArr; netGetRandBit
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostProcessMembershipReport
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostProcessMembershipQuery
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpProcessMessage
</UL>

<P><STRONG><a name="[2cd]"></a>igmpHostSendMembershipReport</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, igmp_host_misc.o(i.igmpHostSendMembershipReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = igmpHostSendMembershipReport &rArr; igmpSendMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksum
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpSendMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostJoinGroup
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostTick
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostLinkChangeEvent
</UL>

<P><STRONG><a name="[2d5]"></a>igmpHostTick</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, igmp_host.o(i.igmpHostTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = igmpHostTick &rArr; igmpHostSendMembershipReport &rArr; igmpSendMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTimerExpired
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostSendMembershipReport
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpTick
</UL>

<P><STRONG><a name="[2d7]"></a>igmpInit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, igmp_common.o(i.igmpInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = igmpInit &rArr; ipv4JoinMulticastGroup &rArr; igmpHostJoinGroup &rArr; igmpHostSendMembershipReport &rArr; igmpSendMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4JoinMulticastGroup
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostInit
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
</UL>

<P><STRONG><a name="[2d9]"></a>igmpLinkChangeEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, igmp_common.o(i.igmpLinkChangeEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = igmpLinkChangeEvent &rArr; igmpHostLinkChangeEvent &rArr; igmpHostSendMembershipReport &rArr; igmpSendMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostLinkChangeEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4LinkChangeEvent
</UL>

<P><STRONG><a name="[2da]"></a>igmpProcessMessage</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, igmp_common.o(i.igmpProcessMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = igmpProcessMessage &rArr; igmpHostProcessMessage &rArr; igmpHostProcessMembershipQuery &rArr; igmpRand &rArr; netGetRand &rArr; netGetRandBit
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksumEx
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostProcessMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
</UL>

<P><STRONG><a name="[2d0]"></a>igmpRand</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, igmp_host_misc.o(i.igmpRand))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = igmpRand &rArr; netGetRand &rArr; netGetRandBit
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostProcessMembershipQuery
</UL>

<P><STRONG><a name="[2d4]"></a>igmpSendMessage</STRONG> (Thumb, 116 bytes, Stack size 72 bytes, igmp_common.o(i.igmpSendMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = igmpSendMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAppend
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendDatagram
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostSendMembershipReport
</UL>

<P><STRONG><a name="[2db]"></a>igmpTick</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, igmp_common.o(i.igmpTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = igmpTick &rArr; igmpHostTick &rArr; igmpHostSendMembershipReport &rArr; igmpSendMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostTick
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>

<P><STRONG><a name="[1b1]"></a>initxBee</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, xbee.o(i.initxBee))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = initxBee
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask02
</UL>

<P><STRONG><a name="[255]"></a>ipAddrToString</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ip.o(i.ipAddrToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = ipAddrToString &rArr; ipv4AddrToString &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4AddrToString
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
</UL>

<P><STRONG><a name="[2c4]"></a>ipAllocBuffer</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ip.o(i.ipAllocBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = ipAllocBuffer &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethAllocBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketSendIpPacket
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAllocBuffer
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRejectSegment
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragmentDatagram
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpSendMessage
</UL>

<P><STRONG><a name="[2d3]"></a>ipCalcChecksum</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, ip.o(i.ipCalcChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ipCalcChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksumEx
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostSendMembershipReport
</UL>

<P><STRONG><a name="[2c6]"></a>ipCalcChecksumEx</STRONG> (Thumb, 118 bytes, Stack size 28 bytes, ip.o(i.ipCalcChecksumEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ipCalcChecksumEx &rArr; ipCalcChecksum
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessMessage
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpProcessMessage
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
</UL>

<P><STRONG><a name="[2dc]"></a>ipCalcUpperLayerChecksumEx</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ip.o(i.ipCalcUpperLayerChecksumEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ipCalcUpperLayerChecksumEx &rArr; ipCalcChecksumEx &rArr; ipCalcChecksum
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksumEx
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRejectSegment
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>

<P><STRONG><a name="[383]"></a>ipIsMulticastAddr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ip.o(i.ipIsMulticastAddr))
<BR><BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagram
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketSendIpPacket
</UL>

<P><STRONG><a name="[3c7]"></a>ipIsUnspecifiedAddr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ip.o(i.ipIsUnspecifiedAddr))
<BR><BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpConnect
</UL>

<P><STRONG><a name="[2dd]"></a>ipSelectSourceAddr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ip.o(i.ipSelectSourceAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ipSelectSourceAddr &rArr; ipv4SelectSourceAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SelectSourceAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpConnect
</UL>

<P><STRONG><a name="[2de]"></a>ipSendDatagram</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ip.o(i.ipSendDatagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendDatagram
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketSendIpPacket
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRejectSegment
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>

<P><STRONG><a name="[2b9]"></a>ipStringToAddr</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ip.o(i.ipStringToAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ipStringToAddr &rArr; ipv4StringToAddr &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4StringToAddr
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHostByName
</UL>

<P><STRONG><a name="[2e0]"></a>ipv4AddRouterAlertOption</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ipv4_misc.o(i.ipv4AddRouterAlertOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ipv4AddRouterAlertOption &rArr; netBufferAt
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
</UL>

<P><STRONG><a name="[22f]"></a>ipv4AddrToString</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ipv4.o(i.ipv4AddrToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = ipv4AddrToString &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAddrToString
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientDumpConfig
</UL>

<P><STRONG><a name="[2e1]"></a>ipv4CheckDestAddr</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ipv4_misc.o(i.ipv4CheckDestAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ipv4CheckDestAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsBroadcastAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
</UL>

<P><STRONG><a name="[2e2]"></a>ipv4CheckSourceAddr</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ipv4_misc.o(i.ipv4CheckSourceAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ipv4CheckSourceAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsBroadcastAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
</UL>

<P><STRONG><a name="[2e6]"></a>ipv4DumpHeader</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ipv4.o(i.ipv4DumpHeader))
<BR><BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragTick
</UL>

<P><STRONG><a name="[2e3]"></a>ipv4FindHole</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ipv4_frag.o(i.ipv4FindHole))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ipv4FindHole &rArr; netBufferAt
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragTick
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SearchFragQueue
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ReassembleDatagram
</UL>

<P><STRONG><a name="[2e4]"></a>ipv4FlushFragQueue</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ipv4_frag.o(i.ipv4FlushFragQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ipv4FlushFragQueue &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4LinkChangeEvent
</UL>

<P><STRONG><a name="[2e5]"></a>ipv4FragTick</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, ipv4_frag.o(i.ipv4FragTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = ipv4FragTick &rArr; icmpSendErrorMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FindHole
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4DumpHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>

<P><STRONG><a name="[2e7]"></a>ipv4FragmentDatagram</STRONG> (Thumb, 176 bytes, Stack size 72 bytes, ipv4_frag.o(i.ipv4FragmentDatagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferConcat
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendDatagram
</UL>

<P><STRONG><a name="[330]"></a>ipv4GetBroadcastAddr</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ipv4_misc.o(i.ipv4GetBroadcastAddr))
<BR><BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
</UL>

<P><STRONG><a name="[2e9]"></a>ipv4Init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ipv4.o(i.ipv4Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ipv4Init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPhysicalInterface
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
</UL>

<P><STRONG><a name="[1f6]"></a>ipv4IsBroadcastAddr</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ipv4_misc.o(i.ipv4IsBroadcastAddr))
<BR><BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4UpdateOutStats
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessRequest
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessReply
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4UpdateInStats
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4CheckSourceAddr
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4CheckDestAddr
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
</UL>

<P><STRONG><a name="[2f5]"></a>ipv4IsLocalHostAddr</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, ipv4_misc.o(i.ipv4IsLocalHostAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ipv4IsLocalHostAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
</UL>

<P><STRONG><a name="[2f6]"></a>ipv4IsOnLink</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ipv4_misc.o(i.ipv4IsOnLink))
<BR><BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
</UL>

<P><STRONG><a name="[1f7]"></a>ipv4IsTentativeAddr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ipv4_misc.o(i.ipv4IsTentativeAddr))
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessReply
</UL>

<P><STRONG><a name="[2d8]"></a>ipv4JoinMulticastGroup</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, ipv4.o(i.ipv4JoinMulticastGroup))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = ipv4JoinMulticastGroup &rArr; igmpHostJoinGroup &rArr; igmpHostSendMembershipReport &rArr; igmpSendMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPhysicalInterface
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethDropMacAddr
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethAcceptMacAddr
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4MapMulticastAddrToMac
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostJoinGroup
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrResponderInit
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpInit
</UL>

<P><STRONG><a name="[2eb]"></a>ipv4LinkChangeEvent</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ipv4.o(i.ipv4LinkChangeEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = ipv4LinkChangeEvent &rArr; igmpLinkChangeEvent &rArr; igmpHostLinkChangeEvent &rArr; igmpHostSendMembershipReport &rArr; igmpSendMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPhysicalInterface
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFlushCache
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FlushFragQueue
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpLinkChangeEvent
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientLinkChangeEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netProcessLinkChange
</UL>

<P><STRONG><a name="[2ea]"></a>ipv4MapMulticastAddrToMac</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ipv4_misc.o(i.ipv4MapMulticastAddrToMac))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4JoinMulticastGroup
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
</UL>

<P><STRONG><a name="[2ec]"></a>ipv4ProcessDatagram</STRONG> (Thumb, 226 bytes, Stack size 56 bytes, ipv4.o(i.ipv4ProcessDatagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = ipv4ProcessDatagram &rArr; tcpProcessSegment &rArr; tcpStateSynReceived &rArr; tcpStateEstablished &rArr; tcpProcessSegmentData &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketProcessIpPacket
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessMessage
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4UpdateErrorStats
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpProcessMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ReassembleDatagram
</UL>

<P><STRONG><a name="[2ac]"></a>ipv4ProcessPacket</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, ipv4.o(i.ipv4ProcessPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 936 + Unknown Stack Size
<LI>Call Chain = ipv4ProcessPacket &rArr; ipv4ReassembleDatagram &rArr; ipv4ProcessDatagram &rArr; tcpProcessSegment &rArr; tcpStateSynReceived &rArr; tcpStateEstablished &rArr; tcpProcessSegmentData &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksum
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsTentativeAddr
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4UpdateInStats
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4UpdateErrorStats
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ReassembleDatagram
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4CheckSourceAddr
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4CheckDestAddr
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
</UL>

<P><STRONG><a name="[2f2]"></a>ipv4ReassembleDatagram</STRONG> (Thumb, 408 bytes, Stack size 56 bytes, ipv4_frag.o(i.ipv4ReassembleDatagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = ipv4ReassembleDatagram &rArr; ipv4ProcessDatagram &rArr; tcpProcessSegment &rArr; tcpStateSynReceived &rArr; tcpStateEstablished &rArr; tcpProcessSegmentData &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferWrite
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SearchFragQueue
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FindHole
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
</UL>

<P><STRONG><a name="[2f3]"></a>ipv4SearchFragQueue</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, ipv4_frag.o(i.ipv4SearchFragQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = ipv4SearchFragQueue &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferWrite
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FindHole
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ReassembleDatagram
</UL>

<P><STRONG><a name="[2f7]"></a>ipv4SelectDefaultGateway</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ipv4_misc.o(i.ipv4SelectDefaultGateway))
<BR><BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
</UL>

<P><STRONG><a name="[201]"></a>ipv4SelectSourceAddr</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ipv4_misc.o(i.ipv4SelectSourceAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ipv4SelectSourceAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipSelectSourceAddr
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketSendIpPacket
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
</UL>

<P><STRONG><a name="[2c7]"></a>ipv4SendDatagram</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, ipv4.o(i.ipv4SendDatagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragmentDatagram
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipSendDatagram
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpSendMessage
</UL>

<P><STRONG><a name="[2e8]"></a>ipv4SendPacket</STRONG> (Thumb, 414 bytes, Stack size 64 bytes, ipv4.o(i.ipv4SendPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPhysicalInterface
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcChecksumEx
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4UpdateOutStats
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpResolve
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpEnqueuePacket
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsBroadcastAddr
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SelectDefaultGateway
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4MapMulticastAddrToMac
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsOnLink
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsLocalHostAddr
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4CheckSourceAddr
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4AddRouterAlertOption
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendDatagram
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragmentDatagram
</UL>

<P><STRONG><a name="[311]"></a>ipv4SetDefaultGateway</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ipv4.o(i.ipv4SetDefaultGateway))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2f8]"></a>ipv4SetDefaultGatewayEx</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ipv4.o(i.ipv4SetDefaultGatewayEx), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>

<P><STRONG><a name="[2f9]"></a>ipv4SetDnsServer</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ipv4.o(i.ipv4SetDnsServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ipv4SetDnsServer &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[30f]"></a>ipv4SetHostAddr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ipv4.o(i.ipv4SetHostAddr))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2fa]"></a>ipv4SetHostAddrEx</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ipv4.o(i.ipv4SetHostAddrEx), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>

<P><STRONG><a name="[310]"></a>ipv4SetSubnetMask</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ipv4.o(i.ipv4SetSubnetMask))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2fb]"></a>ipv4SetSubnetMaskEx</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ipv4.o(i.ipv4SetSubnetMaskEx), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>

<P><STRONG><a name="[2df]"></a>ipv4StringToAddr</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, ipv4.o(i.ipv4StringToAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ipv4StringToAddr &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipStringToAddr
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2f0]"></a>ipv4UpdateErrorStats</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ipv4_misc.o(i.ipv4UpdateErrorStats))
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
</UL>

<P><STRONG><a name="[2f1]"></a>ipv4UpdateInStats</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ipv4_misc.o(i.ipv4UpdateInStats))
<BR><BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsBroadcastAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
</UL>

<P><STRONG><a name="[200]"></a>ipv4UpdateOutStats</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ipv4_misc.o(i.ipv4UpdateOutStats))
<BR><BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsBroadcastAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendQueuedPackets
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
</UL>

<P><STRONG><a name="[91]"></a>lan8742DisableIrq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lan8742_driver.o(i.lan8742DisableIrq))
<BR>[Address Reference Count : 1]<UL><LI> lan8742_driver.o(.constdata)
</UL>
<P><STRONG><a name="[2ff]"></a>lan8742DumpPhyReg</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lan8742_driver.o(i.lan8742DumpPhyReg))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8742Init
</UL>

<P><STRONG><a name="[90]"></a>lan8742EnableIrq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lan8742_driver.o(i.lan8742EnableIrq))
<BR>[Address Reference Count : 1]<UL><LI> lan8742_driver.o(.constdata)
</UL>
<P><STRONG><a name="[92]"></a>lan8742EventHandler</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, lan8742_driver.o(i.lan8742EventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = lan8742EventHandler &rArr; nicNotifyLinkChange &rArr; netProcessLinkChange &rArr; ipv4LinkChangeEvent &rArr; igmpLinkChangeEvent &rArr; igmpHostLinkChangeEvent &rArr; igmpHostSendMembershipReport &rArr; igmpSendMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicNotifyLinkChange
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8742ReadPhyReg
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lan8742_driver.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>lan8742Init</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, lan8742_driver.o(i.lan8742Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = lan8742Init &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEvent
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8742WritePhyReg
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8742ReadPhyReg
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8742DumpPhyReg
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lan8742_driver.o(.constdata)
</UL>
<P><STRONG><a name="[2fc]"></a>lan8742ReadPhyReg</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lan8742_driver.o(i.lan8742ReadPhyReg))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8742Tick
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8742Init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8742EventHandler
</UL>

<P><STRONG><a name="[8f]"></a>lan8742Tick</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lan8742_driver.o(i.lan8742Tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lan8742Tick &rArr; osSetEvent &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEvent
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8742ReadPhyReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lan8742_driver.o(.constdata)
</UL>
<P><STRONG><a name="[2fe]"></a>lan8742WritePhyReg</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lan8742_driver.o(i.lan8742WritePhyReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lan8742WritePhyReg
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8742Init
</UL>

<P><STRONG><a name="[83]"></a>llmnrProcessQuery</STRONG> (Thumb, 232 bytes, Stack size 48 bytes, llmnr_responder.o(i.llmnrProcessQuery))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = llmnrProcessQuery &rArr; llmnrSendResponse &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsParseName
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsCompareName
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrSendResponse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> llmnr_responder.o(i.llmnrResponderInit)
</UL>
<P><STRONG><a name="[302]"></a>llmnrResponderInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llmnr_responder.o(i.llmnrResponderInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = llmnrResponderInit &rArr; ipv4JoinMulticastGroup &rArr; igmpHostJoinGroup &rArr; igmpHostSendMembershipReport &rArr; igmpSendMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4JoinMulticastGroup
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAttachRxCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
</UL>

<P><STRONG><a name="[301]"></a>llmnrSendResponse</STRONG> (Thumb, 272 bytes, Stack size 96 bytes, llmnr_responder.o(i.llmnrSendResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = llmnrSendResponse &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAllocBuffer
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsEncodeName
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrProcessQuery
</UL>

<P><STRONG><a name="[341]"></a>macAddrToEui64</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ethernet.o(i.macAddrToEui64))
<BR><BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetMacAddr
</UL>

<P><STRONG><a name="[303]"></a>macStringToAddr</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, ethernet.o(i.macStringToAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = macStringToAddr &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d7]"></a>main</STRONG> (Thumb, 618 bytes, Stack size 72 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = main &rArr; netConfigInterface &rArr; llmnrResponderInit &rArr; ipv4JoinMulticastGroup &rArr; igmpHostJoinGroup &rArr; igmpHostSendMembershipReport &rArr; igmpSendMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM5_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowSeed
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowInit
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketRegisterRandCallback
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trngGetRandomData
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxCryptoInit
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetPhyDriver
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetMacAddr
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetInterfaceName
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetHostname
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetDriver
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macStringToAddr
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4StringToAddr
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetSubnetMask
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetHostAddr
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetDnsServer
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetDefaultGateway
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_Init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1b3]"></a>main_weatherdataprocess</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, weathersensor.o(i.main_weatherdataprocess))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask02
</UL>

<P><STRONG><a name="[b7]"></a>md5Compute</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, md5.o(i.md5Compute))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = md5Compute &rArr; md5Final &rArr; md5Update &rArr; md5ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5Update
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5Final
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md5.o(.constdata)
</UL>
<P><STRONG><a name="[ba]"></a>md5Final</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, md5.o(i.md5Final))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = md5Final &rArr; md5Update &rArr; md5ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5Update
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5ProcessBlock
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5Compute
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifyServerKeySignature
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md5.o(.constdata)
</UL>
<P><STRONG><a name="[bb]"></a>md5FinalRaw</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, md5.o(i.md5FinalRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = md5FinalRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md5.o(.constdata)
</UL>
<P><STRONG><a name="[b8]"></a>md5Init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, md5.o(i.md5Init))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5Compute
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsInitTranscriptHash
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifyServerKeySignature
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md5.o(.constdata)
</UL>
<P><STRONG><a name="[315]"></a>md5ProcessBlock</STRONG> (Thumb, 1772 bytes, Stack size 176 bytes, md5.o(i.md5ProcessBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = md5ProcessBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5Update
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5Final
</UL>

<P><STRONG><a name="[b9]"></a>md5Update</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, md5.o(i.md5Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = md5Update &rArr; md5ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5ProcessBlock
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5Final
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5Compute
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsUpdateTranscriptHash
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifyServerKeySignature
</UL>
<BR>[Address Reference Count : 1]<UL><LI> md5.o(.constdata)
</UL>
<P><STRONG><a name="[316]"></a>memPoolAlloc</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, net_mem.o(i.memPoolAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAlloc
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateListen
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>

<P><STRONG><a name="[317]"></a>memPoolFree</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_mem.o(i.memPoolFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = memPoolFree &rArr; osFreeMem &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFlushSynQueue
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFlushRetransmitQueue
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateRetransmitQueue
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateListen
</UL>

<P><STRONG><a name="[337]"></a>memPoolInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_mem.o(i.memPoolInit))
<BR><BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[29b]"></a>mgf1</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, rsa.o(i.mgf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mgf1
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emsaPssVerify
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emsaPssEncode
</UL>

<P><STRONG><a name="[263]"></a>mpiAdd</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, mpi.o(i.mpiAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mpiAdd &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSubAbs
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCompAbs
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiAddAbs
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecSubMod
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAddMod
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAdd
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp521r1Mod
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp384r1Mod
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256r1Mod
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp224r1Mod
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaGenerateSignature
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInvMod
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecMult
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiAddInt
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsadp
</UL>

<P><STRONG><a name="[318]"></a>mpiAddAbs</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, mpi.o(i.mpiAddAbs))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGrow
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCopy
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSub
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiAdd
</UL>

<P><STRONG><a name="[31d]"></a>mpiAddInt</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, mpi.o(i.mpiAddInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mpiAddInt &rArr; mpiAdd &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiRandRange
</UL>

<P><STRONG><a name="[266]"></a>mpiComp</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, mpi.o(i.mpiComp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mpiComp
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAddMod
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp521r1Mod
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp384r1Mod
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256r1Mod
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp224r1Mod
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecIsPointAffine
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhCheckPublicKey
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaVerifySignature
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCompInt
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiExpMod
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMontgomeryMul
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiDiv
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaep
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsadp
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPkcs1v15Sign
</UL>

<P><STRONG><a name="[319]"></a>mpiCompAbs</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, mpi.o(i.mpiCompAbs))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mpiCompAbs
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSub
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMod
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiAdd
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSubAbs
</UL>

<P><STRONG><a name="[25c]"></a>mpiCompInt</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, mpi.o(i.mpiCompInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mpiCompInt &rArr; mpiComp
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiComp
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecSubMod
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFullAdd
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecDouble
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAdd
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp384r1Mod
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256r1Mod
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp224r1Mod
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhCheckPublicKey
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaVerifySignature
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiRandRange
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMod
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInvMod
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecMult
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAffinify
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiDiv
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaep
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsadp
</UL>

<P><STRONG><a name="[25b]"></a>mpiCopy</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, mpi.o(i.mpiCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGrow
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetLength
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFullSub
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFullAdd
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecDouble
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecCopy
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAdd
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp384r1Mod
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256r1Mod
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp224r1Mod
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMul
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMod
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInvMod
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecMult
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiExpMod
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMontgomeryMul
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiDiv
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiAddAbs
</UL>

<P><STRONG><a name="[31e]"></a>mpiDiv</STRONG> (Thumb, 240 bytes, Stack size 64 bytes, mpi.o(i.mpiDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = mpiDiv &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSetValue
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSub
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCopy
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiShiftRight
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetBitLength
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCompInt
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiComp
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiShiftLeft
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSetBitValue
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInvMod
</UL>

<P><STRONG><a name="[321]"></a>mpiExpMod</STRONG> (Thumb, 754 bytes, Stack size 216 bytes, mpi.o(i.mpiExpMod))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = mpiExpMod &rArr; mpiMontgomeryRed &rArr; mpiMontgomeryMul &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSetValue
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCopy
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMulMod
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMod
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetBitValue
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetBitLength
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiComp
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiShiftLeft
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMontgomeryRed
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMontgomeryMul
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiExpModRegular
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiExpModFast
</UL>

<P><STRONG><a name="[324]"></a>mpiExpModFast</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, mpi.o(i.mpiExpModFast))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = mpiExpModFast &rArr; mpiExpMod &rArr; mpiMontgomeryRed &rArr; mpiMontgomeryMul &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiExpMod
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaep
</UL>

<P><STRONG><a name="[325]"></a>mpiExpModRegular</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, mpi.o(i.mpiExpModRegular))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = mpiExpModRegular &rArr; mpiExpMod &rArr; mpiMontgomeryRed &rArr; mpiMontgomeryMul &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiExpMod
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsadp
</UL>

<P><STRONG><a name="[26e]"></a>mpiExport</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, mpi.o(i.mpiExport))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mpiExport
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetByteLength
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecExport
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhGenerateKeyPair
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhComputeSharedSecret
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaWriteSignature
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPssVerify
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPssSign
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaesPkcs1v15Encrypt
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPkcs1v15Verify
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPkcs1v15Sign
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifyRsaSignature
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateRsaSignature
</UL>

<P><STRONG><a name="[265]"></a>mpiFree</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mpi.o(i.mpiFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mpiFree &rArr; osFreeMem &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecDouble
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAdd
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp521r1Mod
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp384r1Mod
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256r1Mod
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp224r1Mod
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecIsPointAffine
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFreePrivateKey
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFreeDomainParameters
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaVerifySignature
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaGenerateSignature
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiRandRange
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMul
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMod
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInvMod
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecMult
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFree
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAffinify
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaFreeSignature
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiExpMod
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiDiv
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsadp
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPssVerify
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPssSign
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaesPkcs1v15Encrypt
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaFreePrivateKey
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPkcs1v15Verify
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPkcs1v15Sign
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaFreePublicKey
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifyRsaSignature
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateRsaSignature
</UL>

<P><STRONG><a name="[286]"></a>mpiGetBitLength</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, mpi.o(i.mpiGetBitLength))
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaVerifySignature
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaGenerateSignature
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiRandRange
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMod
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecTwinMult
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecMult
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiExpMod
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiDiv
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPssVerify
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPssSign
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509VerifyRsaSignature
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsReadSubjectPublicKey
</UL>

<P><STRONG><a name="[262]"></a>mpiGetBitValue</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, mpi.o(i.mpiGetBitValue))
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAdd
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecTwinMult
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecMult
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaWriteSignature
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiExpMod
</UL>

<P><STRONG><a name="[26d]"></a>mpiGetByteLength</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, mpi.o(i.mpiGetByteLength))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecImport
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecExport
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhComputeSharedSecret
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiExport
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaWriteSignature
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaesPkcs1v15Encrypt
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPkcs1v15Verify
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPkcs1v15Sign
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifyRsaSignature
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateRsaSignature
</UL>

<P><STRONG><a name="[31b]"></a>mpiGetLength</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, mpi.o(i.mpiGetLength))
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCopy
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMul
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiComp
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiExpMod
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSubAbs
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCompAbs
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiAddAbs
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsadp
</UL>

<P><STRONG><a name="[31c]"></a>mpiGrow</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, mpi.o(i.mpiGrow))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSetValue
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCopy
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp521r1Mod
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp384r1Mod
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256r1Mod
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp224r1Mod
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMul
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiImport
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSubAbs
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiShiftLeft
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSetBitValue
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiRand
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMontgomeryMul
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiAddAbs
</UL>

<P><STRONG><a name="[27d]"></a>mpiImport</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, mpi.o(i.mpiImport))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mpiImport &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGrow
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecLoadDomainParameters
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecImport
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhGenerateKeyPair
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaVerifySignature
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaGenerateSignature
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaReadSignature
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ImportRsaPublicKey
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ImportRsaPrivateKey
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ImportEcPrivateKey
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPssVerify
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPssSign
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaesPkcs1v15Encrypt
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPkcs1v15Verify
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPkcs1v15Sign
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifyRsaSignature
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateRsaSignature
</UL>

<P><STRONG><a name="[25a]"></a>mpiInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mpi.o(i.mpiInit))
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecDouble
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAdd
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp521r1Mod
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp384r1Mod
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256r1Mod
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp224r1Mod
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecIsPointAffine
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecInitPrivateKey
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecInitDomainParameters
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaVerifySignature
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaGenerateSignature
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiRandRange
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMul
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMod
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInvMod
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecMult
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecInit
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAffinify
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaInitSignature
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiExpMod
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiDiv
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsadp
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPssVerify
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPssSign
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaesPkcs1v15Encrypt
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaInitPrivateKey
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPkcs1v15Verify
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPkcs1v15Sign
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaInitPublicKey
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifyRsaSignature
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateRsaSignature
</UL>

<P><STRONG><a name="[269]"></a>mpiInvMod</STRONG> (Thumb, 298 bytes, Stack size 104 bytes, mpi.o(i.mpiInvMod))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = mpiInvMod &rArr; mpiDiv &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSetValue
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSub
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCopy
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMul
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCompInt
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiAdd
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaVerifySignature
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaGenerateSignature
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAffinify
</UL>

<P><STRONG><a name="[284]"></a>mpiMod</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, mpi.o(i.mpiMod))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mpiMod &rArr; mpiSubAbs &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCopy
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiShiftRight
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetBitLength
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCompInt
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSubAbs
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiShiftLeft
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCompAbs
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecSqrMod
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecMulMod
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaVerifySignature
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaGenerateSignature
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiRandRange
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMulMod
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiExpMod
</UL>

<P><STRONG><a name="[322]"></a>mpiMontgomeryMul</STRONG> (Thumb, 228 bytes, Stack size 56 bytes, mpi.o(i.mpiMontgomeryMul))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = mpiMontgomeryMul &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSetValue
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSub
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGrow
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCopy
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiShiftRight
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiComp
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMulAccCore
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiExpMod
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMontgomeryRed
</UL>

<P><STRONG><a name="[323]"></a>mpiMontgomeryRed</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, mpi.o(i.mpiMontgomeryRed))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = mpiMontgomeryRed &rArr; mpiMontgomeryMul &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMontgomeryMul
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiExpMod
</UL>

<P><STRONG><a name="[283]"></a>mpiMul</STRONG> (Thumb, 208 bytes, Stack size 56 bytes, mpi.o(i.mpiMul))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGrow
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCopy
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMulAccCore
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetLength
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecSqrMod
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecMulMod
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaGenerateSignature
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMulMod
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInvMod
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsadp
</UL>

<P><STRONG><a name="[326]"></a>mpiMulAccCore</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, mpi.o(i.mpiMulAccCore))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mpiMulAccCore
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMul
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMontgomeryMul
</UL>

<P><STRONG><a name="[291]"></a>mpiMulMod</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mpi.o(i.mpiMulMod))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mpiMulMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMul
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMod
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaVerifySignature
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaGenerateSignature
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiExpMod
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsadp
</UL>

<P><STRONG><a name="[327]"></a>mpiRand</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, mpi.o(i.mpiRand))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mpiRand &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGrow
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiRandRange
</UL>

<P><STRONG><a name="[279]"></a>mpiRandRange</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, mpi.o(i.mpiRandRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = mpiRandRange &rArr; mpiSubInt &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMod
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetBitLength
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCompInt
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSubInt
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiRand
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiAddInt
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecGeneratePrivateKey
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaGenerateSignature
</UL>

<P><STRONG><a name="[320]"></a>mpiSetBitValue</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, mpi.o(i.mpiSetBitValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mpiSetBitValue &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGrow
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiDiv
</UL>

<P><STRONG><a name="[261]"></a>mpiSetValue</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, mpi.o(i.mpiSetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mpiSetValue &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGrow
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecLoadDomainParameters
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecDouble
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAdd
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInvMod
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecTwinMult
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecProjectify
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecMult
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAffinify
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiExpMod
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMontgomeryMul
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiDiv
</UL>

<P><STRONG><a name="[31f]"></a>mpiShiftLeft</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, mpi.o(i.mpiShiftLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mpiShiftLeft &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGrow
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMod
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiExpMod
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiDiv
</UL>

<P><STRONG><a name="[264]"></a>mpiShiftRight</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, mpi.o(i.mpiShiftRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mpiShiftRight &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAdd
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp521r1Mod
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaVerifySignature
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaGenerateSignature
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMod
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMontgomeryMul
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiDiv
</UL>

<P><STRONG><a name="[267]"></a>mpiSub</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, mpi.o(i.mpiSub))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSubAbs
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCompAbs
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiAddAbs
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecSubMod
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFullSub
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecAddMod
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp521r1Mod
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp384r1Mod
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp256r1Mod
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secp224r1Mod
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInvMod
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSubInt
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMontgomeryMul
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiDiv
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsadp
</UL>

<P><STRONG><a name="[31a]"></a>mpiSubAbs</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, mpi.o(i.mpiSubAbs))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mpiSubAbs &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGrow
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetLength
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCompAbs
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSub
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMod
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiAdd
</UL>

<P><STRONG><a name="[328]"></a>mpiSubInt</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, mpi.o(i.mpiSubInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mpiSubInt &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSub
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiRandRange
</UL>

<P><STRONG><a name="[329]"></a>nbnsCompareName</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, nbns_common.o(i.nbnsCompareName))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nbnsCompareName &rArr; toupper &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessQuery
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessResponse
</UL>

<P><STRONG><a name="[32a]"></a>nbnsEncodeName</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, nbns_common.o(i.nbnsEncodeName))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nbnsEncodeName &rArr; toupper &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendResponse
</UL>

<P><STRONG><a name="[32b]"></a>nbnsInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nbns_common.o(i.nbnsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nbnsInit &rArr; udpAttachRxCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAttachRxCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
</UL>

<P><STRONG><a name="[32e]"></a>nbnsParseName</STRONG> (Thumb, 118 bytes, Stack size 12 bytes, nbns_common.o(i.nbnsParseName))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nbnsParseName
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessQuery
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessResponse
</UL>

<P><STRONG><a name="[85]"></a>nbnsProcessMessage</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, nbns_common.o(i.nbnsProcessMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = nbnsProcessMessage &rArr; nbnsProcessQuery &rArr; nbnsSendResponse &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessQuery
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessResponse
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nbns_common.o(i.nbnsInit)
</UL>
<P><STRONG><a name="[32c]"></a>nbnsProcessQuery</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, nbns_responder.o(i.nbnsProcessQuery))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = nbnsProcessQuery &rArr; nbnsSendResponse &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendResponse
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsParseName
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsCompareName
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessMessage
</UL>

<P><STRONG><a name="[32d]"></a>nbnsProcessResponse</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, nbns_client.o(i.nbnsProcessResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nbnsProcessResponse &rArr; nbnsCompareName &rArr; toupper &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsParseName
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsCompareName
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessMessage
</UL>

<P><STRONG><a name="[2bb]"></a>nbnsResolve</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, nbns_client.o(i.nbnsResolve))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = nbnsResolve &rArr; nbnsSendQuery &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelayTask
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsFindEntry
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsCreateEntry
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHostByName
</UL>

<P><STRONG><a name="[258]"></a>nbnsSendQuery</STRONG> (Thumb, 166 bytes, Stack size 72 bytes, nbns_client.o(i.nbnsSendQuery))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = nbnsSendQuery &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAllocBuffer
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4GetBroadcastAddr
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsEncodeName
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsResolve
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsTick
</UL>

<P><STRONG><a name="[32f]"></a>nbnsSendResponse</STRONG> (Thumb, 196 bytes, Stack size 80 bytes, nbns_responder.o(i.nbnsSendResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = nbnsSendResponse &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAllocBuffer
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsEncodeName
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessQuery
</UL>

<P><STRONG><a name="[1ec]"></a>netBufferAlloc</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, net_mem.o(i.netBufferAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketProcessEthPacket
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethAllocBuffer
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketProcessIpPacket
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpEnqueuePacket
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
</UL>

<P><STRONG><a name="[2a6]"></a>netBufferAppend</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, net_mem.o(i.netBufferAppend))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netBufferAppend
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethPadFrame
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagram
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketSendIpPacket
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketSendEthPacket
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpSendMessage
</UL>

<P><STRONG><a name="[1fe]"></a>netBufferAt</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, net_mem.o(i.netBufferAt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netBufferAt
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketProcessEthPacket
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketProcessIpPacket
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessMessage
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendReply
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendProbe
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRejectSegment
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsProcessResponse
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SearchFragQueue
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FindHole
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ReassembleDatagram
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4AddRouterAlertOption
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpProcessMessage
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrSendResponse
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrProcessQuery
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendResponse
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessMessage
</UL>

<P><STRONG><a name="[2c5]"></a>netBufferConcat</STRONG> (Thumb, 114 bytes, Stack size 20 bytes, net_mem.o(i.netBufferConcat))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = netBufferConcat
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReadTxBuffer
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragmentDatagram
</UL>

<P><STRONG><a name="[1ed]"></a>netBufferCopy</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, net_mem.o(i.netBufferCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = netBufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketProcessIpPacket
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpEnqueuePacket
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWriteRxBuffer
</UL>

<P><STRONG><a name="[1eb]"></a>netBufferFree</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, net_mem.o(i.netBufferFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAlloc
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketClose
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagram
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpReceiveDatagram
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketSendIpPacket
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketSendEthPacket
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketReceiveIpPacket
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketReceiveEthPacket
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendReply
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendQueuedPackets
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendProbe
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpFlushQueuedPackets
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpEnqueuePacket
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRejectSegment
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragmentDatagram
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrSendResponse
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendResponse
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpSendMessage
</UL>

<P><STRONG><a name="[1e9]"></a>netBufferGetLength</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, net_mem.o(i.netBufferGetLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netBufferGetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendDatagram
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketProcessIpPacket
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessMessage
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendQueuedPackets
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpEnqueuePacket
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsProcessResponse
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthSendPacket
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragmentDatagram
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpProcessMessage
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrProcessQuery
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessMessage
</UL>

<P><STRONG><a name="[331]"></a>netBufferRead</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, net_mem.o(i.netBufferRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = netBufferRead
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpReceiveDatagram
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketReceiveIpPacket
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketReceiveEthPacket
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReadRxBuffer
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthSendPacket
</UL>

<P><STRONG><a name="[236]"></a>netBufferSetLength</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, net_mem.o(i.netBufferSetLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAlloc
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpConnect
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragTick
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SearchFragQueue
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ReassembleDatagram
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragmentDatagram
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FlushFragQueue
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrSendResponse
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendResponse
</UL>

<P><STRONG><a name="[2f4]"></a>netBufferWrite</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, net_mem.o(i.netBufferWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = netBufferWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketProcessEthPacket
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWriteTxBuffer
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SearchFragQueue
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ReassembleDatagram
</UL>

<P><STRONG><a name="[30e]"></a>netConfigInterface</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, net.o(i.netConfigInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = netConfigInterface &rArr; llmnrResponderInit &rArr; ipv4JoinMulticastGroup &rArr; igmpHostJoinGroup &rArr; igmpHostSendMembershipReport &rArr; igmpSendMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethInit
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDeleteEvent
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateEvent
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitRand
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsInit
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrResponderInit
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4Init
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpInit
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2b8]"></a>netGetDefaultInterface</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net.o(i.netGetDefaultInterface))
<BR><BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHostByName
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketSendEthPacket
</UL>

<P><STRONG><a name="[241]"></a>netGetRand</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, net_misc.o(i.netGetRand))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = netGetRand &rArr; netGetRandBit
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRandBit
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpGetDynamicPort
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpGetDynamicPort
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRandRange
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpGenerateInitialSeqNum
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateSelecting
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRequesting
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRenewing
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebooting
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebinding
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpRand
</UL>

<P><STRONG><a name="[335]"></a>netGetRandBit</STRONG> (Thumb, 170 bytes, Stack size 20 bytes, net_misc.o(i.netGetRandBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = netGetRandBit
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInitRand
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
</UL>

<P><STRONG><a name="[23d]"></a>netGetRandRange</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, net_misc.o(i.netGetRandRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = netGetRandRange &rArr; netGetRand &rArr; netGetRandBit
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateSelecting
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRequesting
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebooting
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateInitReboot
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateInit
</UL>

<P><STRONG><a name="[308]"></a>netInit</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, net.o(i.netInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = netInit &rArr; osCreateTask &rArr; xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateTask
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateMutex
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateEvent
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketInit
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpInit
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpInit
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketInit
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolInit
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsInit
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[334]"></a>netInitRand</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, net_misc.o(i.netInitRand))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = netInitRand &rArr; netGetRandBit
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRandBit
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
</UL>

<P><STRONG><a name="[33d]"></a>netProcessLinkChange</STRONG> (Thumb, 274 bytes, Stack size 16 bytes, net_misc.o(i.netProcessLinkChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = netProcessLinkChange &rArr; ipv4LinkChangeEvent &rArr; igmpLinkChangeEvent &rArr; igmpHostLinkChangeEvent &rArr; igmpHostSendMembershipReport &rArr; igmpSendMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpUpdateEvents
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketUpdateEvents
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4LinkChangeEvent
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsFlushCache
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicNotifyLinkChange
</UL>

<P><STRONG><a name="[30c]"></a>netSetDriver</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, net.o(i.netSetDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = netSetDriver &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[30a]"></a>netSetHostname</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, net.o(i.netSetHostname))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = netSetHostname &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[309]"></a>netSetInterfaceName</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, net.o(i.netSetInterfaceName))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = netSetInterfaceName &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[30b]"></a>netSetMacAddr</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, net.o(i.netSetMacAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = netSetMacAddr &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;macAddrToEui64
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[30d]"></a>netSetPhyDriver</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, net.o(i.netSetPhyDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = netSetPhyDriver &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2cb]"></a>netStartTimer</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, net_misc.o(i.netStartTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = netStartTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSend
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckRetransmitTimer
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckPersistTimer
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckOverrideTimer
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateSendWindow
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateRetransmitQueue
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateTimeWait
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosing
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostProcessMembershipQuery
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostLinkChangeEvent
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostInit
</UL>

<P><STRONG><a name="[3c3]"></a>netStopTimer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_misc.o(i.netStopTimer))
<BR><BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckRetransmitTimer
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFlushRetransmitQueue
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateRetransmitQueue
</UL>

<P><STRONG><a name="[86]"></a>netTask</STRONG> (Thumb, 180 bytes, Stack size 0 bytes, net.o(i.netTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = netTask &rArr; netTick &rArr; dhcpClientTick &rArr; dhcpClientStateRequesting &rArr; dhcpClientSendRequest &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osWaitForEvent
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> net.o(i.netInit)
</UL>
<P><STRONG><a name="[343]"></a>netTick</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, net_misc.o(i.netTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = netTick &rArr; dhcpClientTick &rArr; dhcpClientStateRequesting &rArr; dhcpClientSendRequest &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTick
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicTick
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragTick
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpTick
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsTick
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientTick
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpTick
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTask
</UL>

<P><STRONG><a name="[2d6]"></a>netTimerExpired</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, net_misc.o(i.netTimerExpired))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = netTimerExpired
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckTimeWaitTimer
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckRetransmitTimer
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckPersistTimer
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckOverrideTimer
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckFinWait2Timer
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostTick
</UL>

<P><STRONG><a name="[3e1]"></a>netTimerRunning</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, net_misc.o(i.netTimerRunning))
<BR><BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>

<P><STRONG><a name="[1f1]"></a>nicGetLogicalInterface</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nic.o(i.nicGetLogicalInterface))
<BR><BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethCheckDestAddr
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessPacket
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendReply
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendProbe
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessRequest
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
</UL>

<P><STRONG><a name="[2a8]"></a>nicGetPhysicalInterface</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nic.o(i.nicGetPhysicalInterface))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4Init
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4JoinMulticastGroup
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketSendEthPacket
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4LinkChangeEvent
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
</UL>

<P><STRONG><a name="[346]"></a>nicIsParentInterface</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nic.o(i.nicIsParentInterface))
<BR><BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicNotifyLinkChange
</UL>

<P><STRONG><a name="[2fd]"></a>nicNotifyLinkChange</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, nic.o(i.nicNotifyLinkChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = nicNotifyLinkChange &rArr; netProcessLinkChange &rArr; ipv4LinkChangeEvent &rArr; igmpLinkChangeEvent &rArr; igmpHostLinkChangeEvent &rArr; igmpHostSendMembershipReport &rArr; igmpSendMessage &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netProcessLinkChange
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicIsParentInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8742EventHandler
</UL>

<P><STRONG><a name="[347]"></a>nicProcessPacket</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, nic.o(i.nicProcessPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000 + Unknown Stack Size
<LI>Call Chain = nicProcessPacket &rArr; ethProcessFrame &rArr; ipv4ProcessPacket &rArr; ipv4ReassembleDatagram &rArr; ipv4ProcessDatagram &rArr; tcpProcessSegment &rArr; tcpStateSynReceived &rArr; tcpStateEstablished &rArr; tcpProcessSegmentData &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthReceivePacket
</UL>

<P><STRONG><a name="[2af]"></a>nicSendPacket</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, nic.o(i.nicSendPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = nicSendPacket &rArr; osWaitForEvent &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osWaitForEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
</UL>

<P><STRONG><a name="[344]"></a>nicTick</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, nic.o(i.nicTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nicTick
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>

<P><STRONG><a name="[29f]"></a>nicUpdateMacAddrFilter</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, nic.o(i.nicUpdateMacAddrFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nicUpdateMacAddrFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethDropMacAddr
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethAcceptMacAddr
</UL>

<P><STRONG><a name="[205]"></a>oidComp</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, oid.o(i.oidComp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = oidComp
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckOid
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecGetCurveInfo
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseName
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseExtensions
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseExtendedKeyUsage
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseCertificateEx
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509GetCurveInfo
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseSubjectPublicKeyInfo
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ImportRsaPublicKey
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ParsePrivateKeyInfo
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ImportRsaPrivateKey
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ImportEcPrivateKey
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509GetSignHashAlgo
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetNamedCurve
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsReadSubjectPublicKey
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetCertificateType
</UL>

<P><STRONG><a name="[22b]"></a>osAcquireMutex</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, os_port_freertos.o(i.osAcquireMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osAcquireMutex &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowRead
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketOpen
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trngGetRandomData
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketOpen
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketConnect
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetPhyDriver
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetMacAddr
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetInterfaceName
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetHostname
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetDriver
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetDnsServer
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketUnregisterEvents
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketShutdown
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSetTimeout
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSendTo
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketRegisterEvents
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketGetEvents
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketClose
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTask
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpReceiveDatagram
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsResolve
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketReceiveIpPacket
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketReceiveEthPacket
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceiveEx
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWaitForEvents
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientCheckTimeout
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientLinkChangeEvent
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetSubnetMaskEx
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetHostAddrEx
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetDefaultGatewayEx
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsRemoveFromCache
</UL>

<P><STRONG><a name="[29a]"></a>osAllocMem</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, os_port_freertos.o(i.osAllocMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolAlloc
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacCompute
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hkdfExtract
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hkdfExpand
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512Compute
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384Compute
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Compute
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1Compute
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsInit
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGrow
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x25519
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsInitEncryptionEngine
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFinalizeTranscriptHash
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13SaveSessionTicket
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13RestoreSessionTicket
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13HkdfExpandLabel
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ComputePskBinder
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5Compute
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemImportRsaPrivateKey
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemImportEcPrivateKey
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemImportEcParameters
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPssVerify
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emsaPssVerify
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emsaPssEncode
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPkcs1v15Verify
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateExtendedMasterSecret
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifyRsaSignature
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsPrf
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls12Prf
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsComputeVerifyData
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSaveSessionTicket
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSaveSessionId
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsRestoreSessionTicket
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsInitTranscriptHash
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseCookieExtension
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseNewSessionTicket
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13VerifySignature
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13GenerateSignature
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsValidateCertificate
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsIsCertificateAcceptable
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifyServerKeySignature
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls12VerifyServerKeySignature
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificateList
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsInitHandshake
</UL>

<P><STRONG><a name="[332]"></a>osCreateEvent</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, os_port_freertos.o(i.osCreateEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osCreateEvent &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketPoll
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketInit
</UL>

<P><STRONG><a name="[336]"></a>osCreateMutex</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os_port_freertos.o(i.osCreateMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osCreateMutex &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowInit
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxCryptoInit
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[33c]"></a>osCreateTask</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, os_port_freertos.o(i.osCreateTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = osCreateTask &rArr; xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[1b0]"></a>osDelay</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cmsis_os.o(i.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask03
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask02
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>

<P><STRONG><a name="[254]"></a>osDelayTask</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, os_port_freertos.o(i.osDelayTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osDelayTask &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketClient
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsResolve
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
</UL>

<P><STRONG><a name="[333]"></a>osDeleteEvent</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, os_port_freertos.o(i.osDeleteEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osDeleteEvent &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketPoll
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketInit
</UL>

<P><STRONG><a name="[29c]"></a>osFreeMem</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, os_port_freertos.o(i.osFreeMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osFreeMem &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolFree
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacCompute
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hkdfExtract
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hkdfExpand
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512Compute
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384Compute
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Compute
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1Compute
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFree
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFreeSessionState
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGrow
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x25519
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFreeEncryptionEngine
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFinalizeTranscriptHash
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13RestoreSessionTicket
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13HkdfExpandLabel
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ComputePskBinder
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5Compute
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemImportRsaPrivateKey
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemImportEcPrivateKey
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemImportEcParameters
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPssVerify
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emsaPssVerify
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emsaPssEncode
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPkcs1v15Verify
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateExtendedMasterSecret
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifyRsaSignature
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsPrf
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls12Prf
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsComputeVerifyData
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsRestoreSessionTicket
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsInitTranscriptHash
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFreeTranscriptHash
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseCookieExtension
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseNewSessionTicket
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13VerifySignature
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13GenerateSignature
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsValidateCertificate
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsIsCertificateAcceptable
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifyServerKeySignature
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls12VerifyServerKeySignature
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificateList
</UL>

<P><STRONG><a name="[1e6]"></a>osGetSystemTime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, os_port_freertos.o(i.osGetSystemTime))
<BR><BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketClient
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicSendPacket
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTask
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpKillOldestConnection
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsResolve
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicProcessPacket
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicNotifyLinkChange
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4FragTick
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsTick
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpTick
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTimerExpired
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpResolve
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessReply
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpCreateEntry
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpComputeRto
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsProcessResponse
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsCreateEntry
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientComputeElapsedTime
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientCheckTimeout
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateSelecting
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRequesting
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRenewing
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebooting
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateRebinding
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateProbing
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateInitReboot
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateInit
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientStateBound
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SearchFragQueue
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostJoinGroup
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketChangeState
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessResponse
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostProcessMembershipQuery
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostTick
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpHostLinkChangeEvent
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13SaveSessionTicket
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13RestoreSessionTicket
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSaveSessionId
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseNewSessionTicket
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendClientHello
</UL>

<P><STRONG><a name="[314]"></a>osKernelStart</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmsis_os.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = osKernelStart &rArr; vTaskStartScheduler &rArr; xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22a]"></a>osReleaseMutex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, os_port_freertos.o(i.osReleaseMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowRead
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketOpen
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trngGetRandomData
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketOpen
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketConnect
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetPhyDriver
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetMacAddr
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetInterfaceName
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetHostname
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netSetDriver
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netConfigInterface
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetDnsServer
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketUnregisterEvents
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketShutdown
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSetTimeout
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSendTo
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketRegisterEvents
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketGetEvents
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketClose
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTask
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpReceiveDatagram
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsResolve
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketReceiveIpPacket
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketReceiveEthPacket
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceiveEx
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWaitForEvents
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientCheckTimeout
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientLinkChangeEvent
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetSubnetMaskEx
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetHostAddrEx
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SetDefaultGatewayEx
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsRemoveFromCache
</UL>

<P><STRONG><a name="[353]"></a>osResetEvent</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os_port_freertos.o(i.osResetEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osResetEvent &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketPoll
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpReceiveDatagram
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketReceiveIpPacket
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketReceiveEthPacket
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWaitForEvents
</UL>

<P><STRONG><a name="[226]"></a>osResumeAllTasks</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os_port_freertos.o(i.osResumeAllTasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osResumeAllTasks &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketClient
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugDisplayArray
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolAlloc
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netProcessLinkChange
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsProcessResponse
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientDumpConfig
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthInit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8742Init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8742EventHandler
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsReadRecord
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendAlert
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseServerSupportedVersionsExtension
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseNewSessionTicket
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseHelloRetryRequest
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseEncryptedExtensions
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13SendKeyUpdate
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseKeyUpdate
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendClientKeyExchange
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendClientHello
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerKeyExchange
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHelloDone
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHello
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseNewSessionTicket
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseHelloRequest
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificateRequest
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificateList
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendFinished
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendChangeCipherSpec
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendCertificateVerify
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendCertificate
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseFinished
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificateVerify
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificate
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsPerformClientHandshake
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseChangeCipherSpec
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseAlert
</UL>

<P><STRONG><a name="[300]"></a>osSetEvent</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, os_port_freertos.o(i.osSetEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osSetEvent &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpUpdateEvents
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketUpdateEvents
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthSendPacket
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthInit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8742Tick
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8742Init
</UL>

<P><STRONG><a name="[12d]"></a>osSetEventFromIsr</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, os_port_freertos.o(i.osSetEventFromIsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osSetEventFromIsr &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ETH_IRQHandler
</UL>

<P><STRONG><a name="[225]"></a>osSuspendAllTasks</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, os_port_freertos.o(i.osSuspendAllTasks))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osSuspendAllTasks
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketClient
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugDisplayArray
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolAlloc
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netProcessLinkChange
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsProcessResponse
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientDumpConfig
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientChangeState
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthInit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8742Init
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lan8742EventHandler
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsReadRecord
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendAlert
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseServerSupportedVersionsExtension
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseNewSessionTicket
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseHelloRetryRequest
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseEncryptedExtensions
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13SendKeyUpdate
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseKeyUpdate
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendClientKeyExchange
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendClientHello
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerKeyExchange
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHelloDone
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHello
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseNewSessionTicket
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseHelloRequest
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificateRequest
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificateList
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendFinished
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendChangeCipherSpec
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendCertificateVerify
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendCertificate
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseFinished
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificateVerify
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificate
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsPerformClientHandshake
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseChangeCipherSpec
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseAlert
</UL>

<P><STRONG><a name="[313]"></a>osThreadCreate</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, cmsis_os.o(i.osThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = osThreadCreate &rArr; xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeFreeRtosPriority
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[342]"></a>osWaitForEvent</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, os_port_freertos.o(i.osWaitForEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osWaitForEvent &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketPoll
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicSendPacket
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTask
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpReceiveDatagram
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketReceiveIpPacket
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketReceiveEthPacket
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWaitForEvents
</UL>

<P><STRONG><a name="[359]"></a>pemDecodeFile</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, pem_import.o(i.pemDecodeFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pemDecodeFile &rArr; pemFindTag &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64Decode
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1DumpObject
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemFindTag
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemImportRsaPrivateKey
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemImportEcPrivateKey
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemImportEcParameters
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemImportCertificate
</UL>

<P><STRONG><a name="[35a]"></a>pemFindTag</STRONG> (Thumb, 134 bytes, Stack size 56 bytes, pem_import.o(i.pemFindTag))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pemFindTag &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemDecodeFile
</UL>

<P><STRONG><a name="[35c]"></a>pemImportCertificate</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, pem_import.o(i.pemImportCertificate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = pemImportCertificate &rArr; pemDecodeFile &rArr; pemFindTag &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemDecodeFile
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsValidateCertificate
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsIsCertificateAcceptable
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatCertificateList
</UL>

<P><STRONG><a name="[35d]"></a>pemImportEcParameters</STRONG> (Thumb, 358 bytes, Stack size 176 bytes, pem_import.o(i.pemImportEcParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = pemImportEcParameters &rArr; x509ParseSubjectPublicKeyInfo &rArr; x509ParseAlgorithmIdentifier &rArr; x509ParseDsaParameters &rArr; asn1ReadSequence &rArr; asn1ReadTag
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFreeDomainParameters
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseSubjectPublicKeyInfo
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ImportEcParameters
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseEcParameters
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ParsePrivateKeyInfo
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ParseEcPrivateKey
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemDecodeFile
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateEcdsaSignature
</UL>

<P><STRONG><a name="[363]"></a>pemImportEcPrivateKey</STRONG> (Thumb, 220 bytes, Stack size 176 bytes, pem_import.o(i.pemImportEcPrivateKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = pemImportEcPrivateKey &rArr; pkcs8ParsePrivateKeyInfo &rArr; pkcs8ParsePrivateKeyAlgo &rArr; x509ParseDsaParameters &rArr; asn1ReadSequence &rArr; asn1ReadTag
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFreePrivateKey
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ParsePrivateKeyInfo
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ParseEcPrivateKey
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ImportEcPrivateKey
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemDecodeFile
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateEcdsaSignature
</UL>

<P><STRONG><a name="[365]"></a>pemImportRsaPrivateKey</STRONG> (Thumb, 218 bytes, Stack size 176 bytes, pem_import.o(i.pemImportRsaPrivateKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = pemImportRsaPrivateKey &rArr; pkcs8ParsePrivateKeyInfo &rArr; pkcs8ParsePrivateKeyAlgo &rArr; x509ParseDsaParameters &rArr; asn1ReadSequence &rArr; asn1ReadTag
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ParseRsaPrivateKey
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ParsePrivateKeyInfo
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ImportRsaPrivateKey
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemDecodeFile
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaFreePrivateKey
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateSignature
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls12GenerateSignature
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13GenerateSignature
</UL>

<P><STRONG><a name="[364]"></a>pkcs8ImportEcPrivateKey</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, pkcs8_key_parse.o(i.pkcs8ImportEcPrivateKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = pkcs8ImportEcPrivateKey &rArr; mpiImport &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oidComp
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiImport
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemImportEcPrivateKey
</UL>

<P><STRONG><a name="[368]"></a>pkcs8ImportRsaPrivateKey</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, pkcs8_key_parse.o(i.pkcs8ImportRsaPrivateKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = pkcs8ImportRsaPrivateKey &rArr; mpiImport &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oidComp
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiImport
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemImportRsaPrivateKey
</UL>

<P><STRONG><a name="[369]"></a>pkcs8ParseDsaPrivateKey</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, pkcs8_key_parse.o(i.pkcs8ParseDsaPrivateKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = pkcs8ParseDsaPrivateKey &rArr; asn1ReadInt32 &rArr; asn1ReadTag
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadInt32
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadSequence
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckTag
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ParsePrivateKeyInfo
</UL>

<P><STRONG><a name="[35f]"></a>pkcs8ParseEcPrivateKey</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, pkcs8_key_parse.o(i.pkcs8ParseEcPrivateKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pkcs8ParseEcPrivateKey &rArr; x509ParseEcParameters &rArr; asn1ReadOid &rArr; asn1ReadTag
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadOctetString
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadInt32
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadSequence
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseEcParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ParsePrivateKeyInfo
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemImportEcPrivateKey
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemImportEcParameters
</UL>

<P><STRONG><a name="[36a]"></a>pkcs8ParsePrivateKeyAlgo</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, pkcs8_key_parse.o(i.pkcs8ParsePrivateKeyAlgo))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = pkcs8ParsePrivateKeyAlgo &rArr; x509ParseDsaParameters &rArr; asn1ReadSequence &rArr; asn1ReadTag
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadOid
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckOid
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadSequence
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseEcParameters
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseDsaParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ParsePrivateKeyInfo
</UL>

<P><STRONG><a name="[361]"></a>pkcs8ParsePrivateKeyInfo</STRONG> (Thumb, 212 bytes, Stack size 56 bytes, pkcs8_key_parse.o(i.pkcs8ParsePrivateKeyInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = pkcs8ParsePrivateKeyInfo &rArr; pkcs8ParsePrivateKeyAlgo &rArr; x509ParseDsaParameters &rArr; asn1ReadSequence &rArr; asn1ReadTag
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadOctetString
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadInt32
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oidComp
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadSequence
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ParseRsaPrivateKey
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ParsePrivateKeyAlgo
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ParseEcPrivateKey
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ParseDsaPrivateKey
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemImportRsaPrivateKey
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemImportEcPrivateKey
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemImportEcParameters
</UL>

<P><STRONG><a name="[367]"></a>pkcs8ParseRsaPrivateKey</STRONG> (Thumb, 396 bytes, Stack size 48 bytes, pkcs8_key_parse.o(i.pkcs8ParseRsaPrivateKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = pkcs8ParseRsaPrivateKey &rArr; asn1ReadInt32 &rArr; asn1ReadTag
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadInt32
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadSequence
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckTag
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ParsePrivateKeyInfo
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemImportRsaPrivateKey
</UL>

<P><STRONG><a name="[214]"></a>poly1305Final</STRONG> (Thumb, 386 bytes, Stack size 48 bytes, poly1305.o(i.poly1305Final))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = poly1305Final &rArr; poly1305ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poly1305ProcessBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chacha20Poly1305Encrypt
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chacha20Poly1305Decrypt
</UL>

<P><STRONG><a name="[212]"></a>poly1305Init</STRONG> (Thumb, 186 bytes, Stack size 20 bytes, poly1305.o(i.poly1305Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = poly1305Init
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chacha20Poly1305Encrypt
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chacha20Poly1305Decrypt
</UL>

<P><STRONG><a name="[36c]"></a>poly1305ProcessBlock</STRONG> (Thumb, 700 bytes, Stack size 72 bytes, poly1305.o(i.poly1305ProcessBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = poly1305ProcessBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poly1305Update
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poly1305Final
</UL>

<P><STRONG><a name="[213]"></a>poly1305Update</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, poly1305.o(i.poly1305Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = poly1305Update &rArr; poly1305ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poly1305ProcessBlock
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chacha20Poly1305Encrypt
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chacha20Poly1305Decrypt
</UL>

<P><STRONG><a name="[349]"></a>pvPortMalloc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, heap_3.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[506]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[37a]"></a>pxPortInitialiseStack</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[2aa]"></a>rawSocketProcessEthPacket</STRONG> (Thumb, 238 bytes, Stack size 56 bytes, raw_socket.o(i.rawSocketProcessEthPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = rawSocketProcessEthPacket &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAlloc
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferWrite
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketUpdateEvents
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
</UL>

<P><STRONG><a name="[2ed]"></a>rawSocketProcessIpPacket</STRONG> (Thumb, 284 bytes, Stack size 56 bytes, raw_socket.o(i.rawSocketProcessIpPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = rawSocketProcessIpPacket &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAlloc
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferCopy
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketUpdateEvents
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
</UL>

<P><STRONG><a name="[37f]"></a>rawSocketReceiveEthPacket</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, raw_socket.o(i.rawSocketReceiveEthPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = rawSocketReceiveEthPacket &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osWaitForEvent
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResetEvent
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferRead
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketUpdateEvents
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceiveEx
</UL>

<P><STRONG><a name="[380]"></a>rawSocketReceiveIpPacket</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, raw_socket.o(i.rawSocketReceiveIpPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = rawSocketReceiveIpPacket &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osWaitForEvent
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResetEvent
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferRead
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketUpdateEvents
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceiveEx
</UL>

<P><STRONG><a name="[381]"></a>rawSocketSendEthPacket</STRONG> (Thumb, 130 bytes, Stack size 56 bytes, raw_socket.o(i.rawSocketSendEthPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = rawSocketSendEthPacket &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicGetPhysicalInterface
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAppend
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethAllocBuffer
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetDefaultInterface
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSendTo
</UL>

<P><STRONG><a name="[382]"></a>rawSocketSendIpPacket</STRONG> (Thumb, 216 bytes, Stack size 80 bytes, raw_socket.o(i.rawSocketSendIpPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = rawSocketSendIpPacket &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAppend
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SelectSourceAddr
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipSendDatagram
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipIsMulticastAddr
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSendTo
</UL>

<P><STRONG><a name="[340]"></a>rawSocketUpdateEvents</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, raw_socket.o(i.rawSocketUpdateEvents))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = rawSocketUpdateEvents &rArr; osSetEvent &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketProcessEthPacket
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketRegisterEvents
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netProcessLinkChange
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketReceiveIpPacket
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketReceiveEthPacket
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketProcessIpPacket
</UL>

<P><STRONG><a name="[2b6]"></a>reverseInt4</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cpu_endian.o(i.reverseInt4))
<BR><BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcmInit
</UL>

<P><STRONG><a name="[4f0]"></a>reverseInt8</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, cpu_endian.o(i.reverseInt8), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseNsCertType
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseKeyUsage
</UL>

<P><STRONG><a name="[366]"></a>rsaFreePrivateKey</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, rsa.o(i.rsaFreePrivateKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rsaFreePrivateKey &rArr; mpiFree &rArr; osFreeMem &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemImportRsaPrivateKey
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateSignature
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls12GenerateSignature
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13GenerateSignature
</UL>

<P><STRONG><a name="[384]"></a>rsaFreePublicKey</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rsa.o(i.rsaFreePublicKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rsaFreePublicKey &rArr; mpiFree &rArr; osFreeMem &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFree
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509VerifyRsaSignature
</UL>

<P><STRONG><a name="[385]"></a>rsaInitPrivateKey</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, rsa.o(i.rsaInitPrivateKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rsaInitPrivateKey
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateSignature
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls12GenerateSignature
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13GenerateSignature
</UL>

<P><STRONG><a name="[386]"></a>rsaInitPublicKey</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rsa.o(i.rsaInitPublicKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rsaInitPublicKey
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsInit
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509VerifyRsaSignature
</UL>

<P><STRONG><a name="[387]"></a>rsadp</STRONG> (Thumb, 284 bytes, Stack size 72 bytes, rsa.o(i.rsadp))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = rsadp &rArr; mpiExpModRegular &rArr; mpiExpMod &rArr; mpiMontgomeryRed &rArr; mpiMontgomeryMul &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSub
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMulMod
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiMul
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCompInt
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiComp
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiAdd
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiExpModRegular
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetLength
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsasp1
</UL>

<P><STRONG><a name="[388]"></a>rsaep</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, rsa.o(i.rsaep))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = rsaep &rArr; mpiExpModFast &rArr; mpiExpMod &rArr; mpiMontgomeryRed &rArr; mpiMontgomeryMul &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCompInt
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiComp
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiExpModFast
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsavp1
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaesPkcs1v15Encrypt
</UL>

<P><STRONG><a name="[389]"></a>rsaesPkcs1v15Encrypt</STRONG> (Thumb, 160 bytes, Stack size 72 bytes, rsa.o(i.rsaesPkcs1v15Encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = rsaesPkcs1v15Encrypt &rArr; rsaep &rArr; mpiExpModFast &rArr; mpiExpMod &rArr; mpiMontgomeryRed &rArr; mpiMontgomeryMul &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiImport
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetByteLength
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiExport
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaep
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emePkcs1v15Encode
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatClientKeyParams
</UL>

<P><STRONG><a name="[38a]"></a>rsasp1</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rsa.o(i.rsasp1))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = rsasp1 &rArr; rsadp &rArr; mpiExpModRegular &rArr; mpiExpMod &rArr; mpiMontgomeryRed &rArr; mpiMontgomeryMul &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsadp
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPssSign
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPkcs1v15Sign
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateRsaSignature
</UL>

<P><STRONG><a name="[38b]"></a>rsassaPkcs1v15Sign</STRONG> (Thumb, 228 bytes, Stack size 88 bytes, rsa.o(i.rsassaPkcs1v15Sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = rsassaPkcs1v15Sign &rArr; rsasp1 &rArr; rsadp &rArr; mpiExpModRegular &rArr; mpiExpMod &rArr; mpiMontgomeryRed &rArr; mpiMontgomeryMul &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiImport
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetByteLength
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiExport
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiComp
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsavp1
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsasp1
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emsaPkcs1v15Encode
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls12GenerateSignature
</UL>

<P><STRONG><a name="[38d]"></a>rsassaPkcs1v15Verify</STRONG> (Thumb, 180 bytes, Stack size 64 bytes, rsa.o(i.rsassaPkcs1v15Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = rsassaPkcs1v15Verify &rArr; rsavp1 &rArr; rsaep &rArr; mpiExpModFast &rArr; mpiExpMod &rArr; mpiMontgomeryRed &rArr; mpiMontgomeryMul &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiImport
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetByteLength
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiExport
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsavp1
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emsaPkcs1v15Verify
</UL>
<BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509VerifyRsaSignature
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls12VerifySignature
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls12VerifyServerKeySignature
</UL>

<P><STRONG><a name="[38f]"></a>rsassaPssSign</STRONG> (Thumb, 182 bytes, Stack size 88 bytes, rsa.o(i.rsassaPssSign))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = rsassaPssSign &rArr; rsasp1 &rArr; rsadp &rArr; mpiExpModRegular &rArr; mpiExpMod &rArr; mpiMontgomeryRed &rArr; mpiMontgomeryMul &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiImport
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetBitLength
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiExport
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsasp1
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emsaPssEncode
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls12GenerateSignature
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13GenerateSignature
</UL>

<P><STRONG><a name="[390]"></a>rsassaPssVerify</STRONG> (Thumb, 190 bytes, Stack size 80 bytes, rsa.o(i.rsassaPssVerify))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = rsassaPssVerify &rArr; rsavp1 &rArr; rsaep &rArr; mpiExpModFast &rArr; mpiExpMod &rArr; mpiMontgomeryRed &rArr; mpiMontgomeryMul &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiImport
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetBitLength
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiExport
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsavp1
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emsaPssVerify
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls12VerifySignature
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13VerifySignature
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls12VerifyServerKeySignature
</UL>

<P><STRONG><a name="[38c]"></a>rsavp1</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rsa.o(i.rsavp1))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = rsavp1 &rArr; rsaep &rArr; mpiExpModFast &rArr; mpiExpMod &rArr; mpiMontgomeryRed &rArr; mpiMontgomeryMul &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaep
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPssVerify
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPkcs1v15Verify
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPkcs1v15Sign
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifyRsaSignature
</UL>

<P><STRONG><a name="[a0]"></a>secp224r1Mod</STRONG> (Thumb, 278 bytes, Stack size 48 bytes, ec_curves.o(i.secp224r1Mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = secp224r1Mod &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSub
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGrow
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCopy
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCompInt
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiComp
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiAdd
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ec_curves.o(.constdata)
</UL>
<P><STRONG><a name="[a1]"></a>secp256r1Mod</STRONG> (Thumb, 562 bytes, Stack size 56 bytes, ec_curves.o(i.secp256r1Mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = secp256r1Mod &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSub
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGrow
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCopy
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCompInt
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiComp
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiAdd
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ec_curves.o(.constdata)
</UL>
<P><STRONG><a name="[a2]"></a>secp384r1Mod</STRONG> (Thumb, 550 bytes, Stack size 48 bytes, ec_curves.o(i.secp384r1Mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = secp384r1Mod &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSub
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGrow
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCopy
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiCompInt
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiComp
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiAdd
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ec_curves.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>secp521r1Mod</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, ec_curves.o(i.secp521r1Mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = secp521r1Mod &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiSub
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGrow
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiShiftRight
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiComp
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiAdd
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ec_curves.o(.constdata)
</UL>
<P><STRONG><a name="[a4]"></a>sha1Compute</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, sha1.o(i.sha1Compute))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = sha1Compute &rArr; sha1Final &rArr; sha1Update &rArr; sha1ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1Update
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1Final
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sha1.o(.constdata)
</UL>
<P><STRONG><a name="[a7]"></a>sha1Final</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, sha1.o(i.sha1Final))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = sha1Final &rArr; sha1Update &rArr; sha1ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1ProcessBlock
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1Update
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1Compute
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketVerifyServerKey
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifyServerKeySignature
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sha1.o(.constdata)
</UL>
<P><STRONG><a name="[a8]"></a>sha1FinalRaw</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, sha1.o(i.sha1FinalRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sha1FinalRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sha1.o(.constdata)
</UL>
<P><STRONG><a name="[a5]"></a>sha1Init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, sha1.o(i.sha1Init))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1Compute
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketVerifyServerKey
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsInitTranscriptHash
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifyServerKeySignature
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sha1.o(.constdata)
</UL>
<P><STRONG><a name="[391]"></a>sha1ProcessBlock</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, sha1.o(i.sha1ProcessBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sha1ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1Update
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1Final
</UL>

<P><STRONG><a name="[a6]"></a>sha1Update</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, sha1.o(i.sha1Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sha1Update &rArr; sha1ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1ProcessBlock
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1Compute
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1Final
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketVerifyServerKey
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsUpdateTranscriptHash
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifyServerKeySignature
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sha1.o(.constdata)
</UL>
<P><STRONG><a name="[a9]"></a>sha256Compute</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, sha256.o(i.sha256Compute))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = sha256Compute &rArr; sha256Final &rArr; sha256Update &rArr; sha256ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Update
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Final
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sha256.o(.constdata)
</UL>
<P><STRONG><a name="[ac]"></a>sha256Final</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, sha256.o(i.sha256Final))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = sha256Final &rArr; sha256Update &rArr; sha256ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256ProcessBlock
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Update
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Compute
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowFastReseed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sha256.o(.constdata)
</UL>
<P><STRONG><a name="[ad]"></a>sha256FinalRaw</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, sha256.o(i.sha256FinalRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sha256FinalRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sha256.o(.constdata)
</UL>
<P><STRONG><a name="[aa]"></a>sha256Init</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, sha256.o(i.sha256Init))
<BR><BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowInit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Compute
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowFastReseed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sha256.o(.constdata)
</UL>
<P><STRONG><a name="[392]"></a>sha256ProcessBlock</STRONG> (Thumb, 318 bytes, Stack size 48 bytes, sha256.o(i.sha256ProcessBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sha256ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Update
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Final
</UL>

<P><STRONG><a name="[ab]"></a>sha256Update</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, sha256.o(i.sha256Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sha256Update &rArr; sha256ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256ProcessBlock
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowSeed
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Compute
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Final
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowFastReseed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sha256.o(.constdata)
</UL>
<P><STRONG><a name="[ae]"></a>sha384Compute</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, sha384.o(i.sha384Compute))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = sha384Compute &rArr; sha384Final &rArr; sha512Final &rArr; sha512Update &rArr; sha512ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384Update
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384Final
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sha384.o(.constdata)
</UL>
<P><STRONG><a name="[b1]"></a>sha384Final</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, sha384.o(i.sha384Final))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = sha384Final &rArr; sha512Final &rArr; sha512Update &rArr; sha512ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512Final
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384Compute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sha384.o(.constdata)
</UL>
<P><STRONG><a name="[b2]"></a>sha384FinalRaw</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, sha384.o(i.sha384FinalRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sha384FinalRaw
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt64
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sha384.o(.constdata)
</UL>
<P><STRONG><a name="[af]"></a>sha384Init</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, sha384.o(i.sha384Init))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384Compute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sha384.o(.constdata)
</UL>
<P><STRONG><a name="[b0]"></a>sha384Update</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sha384.o(i.sha384Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = sha384Update &rArr; sha512Update &rArr; sha512ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512Update
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384Compute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sha384.o(.constdata)
</UL>
<P><STRONG><a name="[b3]"></a>sha512Compute</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, sha512.o(i.sha512Compute))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = sha512Compute &rArr; sha512Final &rArr; sha512Update &rArr; sha512ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512Update
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512Final
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sha512.o(.constdata)
</UL>
<P><STRONG><a name="[b6]"></a>sha512Final</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, sha512.o(i.sha512Final))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = sha512Final &rArr; sha512Update &rArr; sha512ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt64
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512ProcessBlock
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512Update
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512Compute
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384Final
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sha512.o(.constdata)
</UL>
<P><STRONG><a name="[b4]"></a>sha512Init</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, sha512.o(i.sha512Init))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512Compute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sha512.o(.constdata)
</UL>
<P><STRONG><a name="[394]"></a>sha512ProcessBlock</STRONG> (Thumb, 792 bytes, Stack size 136 bytes, sha512.o(i.sha512ProcessBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = sha512ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt64
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512Update
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512Final
</UL>

<P><STRONG><a name="[b5]"></a>sha512Update</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, sha512.o(i.sha512Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = sha512Update &rArr; sha512ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512ProcessBlock
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512Compute
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384Update
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512Final
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sha512.o(.constdata)
</UL>
<P><STRONG><a name="[395]"></a>socketAllocate</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, socket_misc.o(i.socketAllocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = socketAllocate &rArr; tcpKillOldestConnection &rArr; tcpDeleteControlBlock &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpGetDynamicPort
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpKillOldestConnection
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpGetDynamicPort
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketOpen
</UL>

<P><STRONG><a name="[398]"></a>socketClose</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, socket.o(i.socketClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = socketClose &rArr; tcpAbort &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAbort
</UL>
<BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketCloseConnection
</UL>

<P><STRONG><a name="[39a]"></a>socketConnect</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, socket.o(i.socketConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = socketConnect &rArr; tcpConnect &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketEstablishConnection
</UL>

<P><STRONG><a name="[39c]"></a>socketGetEvents</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, socket_misc.o(i.socketGetEvents))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = socketGetEvents &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketPoll
</UL>

<P><STRONG><a name="[338]"></a>socketInit</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, socket.o(i.socketInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = socketInit &rArr; osCreateEvent &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDeleteEvent
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateEvent
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[39d]"></a>socketOpen</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, socket.o(i.socketOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = socketOpen &rArr; socketAllocate &rArr; tcpKillOldestConnection &rArr; tcpDeleteControlBlock &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketAllocate
</UL>
<BR>[Called By]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketOpenConnection
</UL>

<P><STRONG><a name="[39e]"></a>socketPoll</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, socket.o(i.socketPoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = socketPoll &rArr; socketRegisterEvents &rArr; tcpUpdateEvents &rArr; osSetEvent &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketUnregisterEvents
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketRegisterEvents
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketGetEvents
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osWaitForEvent
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResetEvent
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDeleteEvent
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketClient
</UL>

<P><STRONG><a name="[89]"></a>socketReceive</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, socket.o(i.socketReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = socketReceive &rArr; socketReceiveEx &rArr; tcpReceive &rArr; tcpUpdateReceiveWindow &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceiveEx
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketShutdownConnection
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketReceiveData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> web_socket_transport.o(i.webSocketOpenConnection)
</UL>
<P><STRONG><a name="[3a1]"></a>socketReceiveEx</STRONG> (Thumb, 312 bytes, Stack size 96 bytes, socket.o(i.socketReceiveEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = socketReceiveEx &rArr; tcpReceive &rArr; tcpUpdateReceiveWindow &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpReceiveDatagram
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReceive
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketReceiveIpPacket
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketReceiveEthPacket
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceive
</UL>

<P><STRONG><a name="[39f]"></a>socketRegisterEvents</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, socket_misc.o(i.socketRegisterEvents))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = socketRegisterEvents &rArr; tcpUpdateEvents &rArr; osSetEvent &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpUpdateEvents
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketUpdateEvents
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketPoll
</UL>

<P><STRONG><a name="[8a]"></a>socketSend</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, socket.o(i.socketSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = socketSend &rArr; socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSendTo
</UL>
<BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketSendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> web_socket_transport.o(i.webSocketOpenConnection)
</UL>
<P><STRONG><a name="[3a4]"></a>socketSendTo</STRONG> (Thumb, 230 bytes, Stack size 88 bytes, socket.o(i.socketSendTo))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = socketSendTo &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagram
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSend
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketSendIpPacket
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketSendEthPacket
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSend
</UL>

<P><STRONG><a name="[4c0]"></a>socketSetInterface</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, socket.o(i.socketSetInterface))
<BR><BR>[Called By]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketOpenConnection
</UL>

<P><STRONG><a name="[3a7]"></a>socketSetTimeout</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, socket.o(i.socketSetTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = socketSetTimeout &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketSetTimeout
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketOpenConnection
</UL>

<P><STRONG><a name="[3a8]"></a>socketShutdown</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, socket.o(i.socketShutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = socketShutdown &rArr; tcpShutdown &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpShutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketShutdownConnection
</UL>

<P><STRONG><a name="[3a0]"></a>socketUnregisterEvents</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, socket_misc.o(i.socketUnregisterEvents))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = socketUnregisterEvents &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketPoll
</UL>

<P><STRONG><a name="[304]"></a>stm32f4xxCryptoInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_crypto.o(i.stm32f4xxCryptoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = stm32f4xxCryptoInit &rArr; osCreateMutex &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateMutex
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trngInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3ae]"></a>stm32f4xxEthCalcCrc</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, stm32f4xx_eth_driver.o(i.stm32f4xxEthCalcCrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = stm32f4xxEthCalcCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthUpdateMacAddrFilter
</UL>

<P><STRONG><a name="[96]"></a>stm32f4xxEthDisableIrq</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_eth_driver.o(i.stm32f4xxEthDisableIrq))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_eth_driver.o(.constdata)
</UL>
<P><STRONG><a name="[95]"></a>stm32f4xxEthEnableIrq</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_eth_driver.o(i.stm32f4xxEthEnableIrq))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_eth_driver.o(.constdata)
</UL>
<P><STRONG><a name="[97]"></a>stm32f4xxEthEventHandler</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32f4xx_eth_driver.o(i.stm32f4xxEthEventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056 + Unknown Stack Size
<LI>Call Chain = stm32f4xxEthEventHandler &rArr; stm32f4xxEthReceivePacket &rArr; nicProcessPacket &rArr; ethProcessFrame &rArr; ipv4ProcessPacket &rArr; ipv4ReassembleDatagram &rArr; ipv4ProcessDatagram &rArr; tcpProcessSegment &rArr; tcpStateSynReceived &rArr; tcpStateEstablished &rArr; tcpProcessSegmentData &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthReceivePacket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_eth_driver.o(.constdata)
</UL>
<P><STRONG><a name="[93]"></a>stm32f4xxEthInit</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, stm32f4xx_eth_driver.o(i.stm32f4xxEthInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = stm32f4xxEthInit &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEvent
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthUpdateMacAddrFilter
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthInitGpio
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthInitDmaDesc
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_eth_driver.o(.constdata)
</UL>
<P><STRONG><a name="[3ad]"></a>stm32f4xxEthInitDmaDesc</STRONG> (Thumb, 140 bytes, Stack size 20 bytes, stm32f4xx_eth_driver.o(i.stm32f4xxEthInitDmaDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = stm32f4xxEthInitDmaDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthInit
</UL>

<P><STRONG><a name="[3ac]"></a>stm32f4xxEthInitGpio</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, stm32f4xx_eth_driver.o(i.stm32f4xxEthInitGpio))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = stm32f4xxEthInitGpio &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthInit
</UL>

<P><STRONG><a name="[9c]"></a>stm32f4xxEthReadPhyReg</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f4xx_eth_driver.o(i.stm32f4xxEthReadPhyReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stm32f4xxEthReadPhyReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_eth_driver.o(.constdata)
</UL>
<P><STRONG><a name="[3ab]"></a>stm32f4xxEthReceivePacket</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, stm32f4xx_eth_driver.o(i.stm32f4xxEthReceivePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040 + Unknown Stack Size
<LI>Call Chain = stm32f4xxEthReceivePacket &rArr; nicProcessPacket &rArr; ethProcessFrame &rArr; ipv4ProcessPacket &rArr; ipv4ReassembleDatagram &rArr; ipv4ProcessDatagram &rArr; tcpProcessSegment &rArr; tcpStateSynReceived &rArr; tcpStateEstablished &rArr; tcpProcessSegmentData &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nicProcessPacket
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthEventHandler
</UL>

<P><STRONG><a name="[98]"></a>stm32f4xxEthSendPacket</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, stm32f4xx_eth_driver.o(i.stm32f4xxEthSendPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = stm32f4xxEthSendPacket &rArr; osSetEvent &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEvent
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_eth_driver.o(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>stm32f4xxEthTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_eth_driver.o(i.stm32f4xxEthTick))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_eth_driver.o(.constdata)
</UL>
<P><STRONG><a name="[99]"></a>stm32f4xxEthUpdateMacAddrFilter</STRONG> (Thumb, 284 bytes, Stack size 56 bytes, stm32f4xx_eth_driver.o(i.stm32f4xxEthUpdateMacAddrFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = stm32f4xxEthUpdateMacAddrFilter &rArr; stm32f4xxEthCalcCrc
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthCalcCrc
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxEthInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_eth_driver.o(.constdata)
</UL>
<P><STRONG><a name="[9a]"></a>stm32f4xxEthUpdateMacConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_eth_driver.o(i.stm32f4xxEthUpdateMacConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stm32f4xxEthUpdateMacConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_eth_driver.o(.constdata)
</UL>
<P><STRONG><a name="[9b]"></a>stm32f4xxEthWritePhyReg</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, stm32f4xx_eth_driver.o(i.stm32f4xxEthWritePhyReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = stm32f4xxEthWritePhyReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_eth_driver.o(.constdata)
</UL>
<P><STRONG><a name="[3af]"></a>strSafeCopy</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, str.o(i.strSafeCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = strSafeCopy &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketSetHost
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketConnect
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketParseHeaderField
</UL>

<P><STRONG><a name="[3b0]"></a>strTrimWhitespace</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, str.o(i.strTrimWhitespace))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strTrimWhitespace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketParseHeaderField
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketParseConnectionField
</UL>

<P><STRONG><a name="[1f3]"></a>swapInt16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpu_endian.o(i.swapInt16))
<BR><BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketProcessEthPacket
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessPacket
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpProcessPacket
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethSendFrame
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethProcessFrame
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSendTo
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rawSocketSendIpPacket
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceiveEx
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpSendErrorMessage
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmpProcessEchoRequest
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendRequest
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendReply
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arpSendProbe
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpInvokeRxCallback
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRejectSegment
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynSent
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateListen
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsProcessResponse
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientComputeElapsedTime
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ReassembleDatagram
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SendPacket
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrSendResponse
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrProcessQuery
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessQuery
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessResponse
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmpSendMessage
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseHelloExtensions
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseCertExtensions
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13CheckDuplicateKeyShare
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseServerKeyShareExtension
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13FormatPskKeModesExtension
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13FormatCookieExtension
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13FormatClientPreSharedKeyExtension
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13FormatClientKeyShareExtension
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ComputePskBinders
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifySignature
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSelectSignatureScheme
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateSignature
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls12VerifySignature
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls12GenerateSignature
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsWriteRecord
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsReadRecord
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsProcessRecord
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSetRecordLength
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetRecordLength
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsInitTranscriptHash
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatInitialClientHello
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseCookieExtension
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseNewSessionTicket
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseHelloRetryRequest
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13VerifySignature
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13GenerateSignature
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsIsCertificateAcceptable
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatSupportedGroupsExtension
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatClientSupportedVersionsExtension
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatClientSniExtension
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatClientRecordSizeLimitExtension
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatClientHelloPaddingExtension
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatClientEcPointFormatsExtension
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHello
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseNewSessionTicket
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificateRequest
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatClientHello
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifyServerKeySignature
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSelectClientVersion
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatCipherSuites
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls12VerifyServerKeySignature
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatSignatureAlgorithmsExtension
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsCheckDuplicateExtension
</UL>

<P><STRONG><a name="[235]"></a>swapInt32</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpu_endian.o(i.swapInt32))
<BR><BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateRetransmitQueue
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRejectSegment
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsProcessResponse
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256ProcessBlock
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256FinalRaw
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1ProcessBlock
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1FinalRaw
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Final
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1Final
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsProcessResponse
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcmInit
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseNewSessionTicket
</UL>

<P><STRONG><a name="[393]"></a>swapInt64</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpu_endian.o(i.swapInt64))
<BR><BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512ProcessBlock
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha384FinalRaw
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha512Final
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifyMac
</UL>

<P><STRONG><a name="[399]"></a>tcpAbort</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, tcp.o(i.tcpAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = tcpAbort &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendResetSegment
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketClose
</UL>

<P><STRONG><a name="[3b4]"></a>tcpAddOption</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, tcp_misc.o(i.tcpAddOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcpAddOption
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>

<P><STRONG><a name="[3b2]"></a>tcpChangeState</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tcp_misc.o(i.tcpChangeState))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = tcpChangeState &rArr; tcpUpdateEvents &rArr; osSetEvent &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpKillOldestConnection
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpShutdown
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpConnect
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAbort
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckTimeWaitTimer
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckRetransmitTimer
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckPersistTimer
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckFinWait2Timer
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateTimeWait
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynSent
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynReceived
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateLastAck
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosing
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateCloseWait
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[3b5]"></a>tcpCheckAck</STRONG> (Thumb, 364 bytes, Stack size 32 bytes, tcp_misc.o(i.tcpCheckAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = tcpCheckAck &rArr; tcpFastRecovery &rArr; tcpRetransmitSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateSendWindow
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpIsDuplicateAck
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFastRetransmit
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFastRecovery
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFastLossRecovery
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateRetransmitQueue
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpComputeRto
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosing
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateCloseWait
</UL>

<P><STRONG><a name="[3be]"></a>tcpCheckFinWait2Timer</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, tcp_timer.o(i.tcpCheckFinWait2Timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = tcpCheckFinWait2Timer &rArr; tcpChangeState &rArr; tcpUpdateEvents &rArr; osSetEvent &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTimerExpired
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTick
</UL>

<P><STRONG><a name="[3bf]"></a>tcpCheckOverrideTimer</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, tcp_timer.o(i.tcpCheckOverrideTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = tcpCheckOverrideTimer &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTimerExpired
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTick
</UL>

<P><STRONG><a name="[3c0]"></a>tcpCheckPersistTimer</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, tcp_timer.o(i.tcpCheckPersistTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = tcpCheckPersistTimer &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTimerExpired
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendResetSegment
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTick
</UL>

<P><STRONG><a name="[3c1]"></a>tcpCheckRetransmitTimer</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, tcp_timer.o(i.tcpCheckRetransmitTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = tcpCheckRetransmitTimer &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTimerExpired
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStopTimer
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendResetSegment
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTick
</UL>

<P><STRONG><a name="[3c4]"></a>tcpCheckSeqNum</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, tcp_misc.o(i.tcpCheckSeqNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = tcpCheckSeqNum &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateTimeWait
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynReceived
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateLastAck
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosing
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateCloseWait
</UL>

<P><STRONG><a name="[3c5]"></a>tcpCheckSyn</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tcp_misc.o(i.tcpCheckSyn))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = tcpCheckSyn &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendResetSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateTimeWait
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynReceived
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateLastAck
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosing
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateCloseWait
</UL>

<P><STRONG><a name="[3c6]"></a>tcpCheckTimeWaitTimer</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, tcp_timer.o(i.tcpCheckTimeWaitTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = tcpCheckTimeWaitTimer &rArr; tcpDeleteControlBlock &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTimerExpired
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpTick
</UL>

<P><STRONG><a name="[3b9]"></a>tcpComputeRto</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, tcp_misc.o(i.tcpComputeRto))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcpComputeRto
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynSent
</UL>

<P><STRONG><a name="[39b]"></a>tcpConnect</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, tcp.o(i.tcpConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = tcpConnect &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipSelectSourceAddr
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipIsUnspecifiedAddr
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWaitForEvents
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpGenerateInitialSeqNum
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketConnect
</UL>

<P><STRONG><a name="[3b3]"></a>tcpDeleteControlBlock</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, tcp_misc.o(i.tcpDeleteControlBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = tcpDeleteControlBlock &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFlushSynQueue
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFlushRetransmitQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpKillOldestConnection
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpConnect
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAbort
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckTimeWaitTimer
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateTimeWait
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosing
</UL>

<P><STRONG><a name="[3cd]"></a>tcpDumpHeader</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tcp_misc.o(i.tcpDumpHeader))
<BR><BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[3bc]"></a>tcpFastLossRecovery</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, tcp_misc.o(i.tcpFastLossRecovery))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = tcpFastLossRecovery &rArr; tcpRetransmitSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
</UL>

<P><STRONG><a name="[3bb]"></a>tcpFastRecovery</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, tcp_misc.o(i.tcpFastRecovery))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = tcpFastRecovery &rArr; tcpRetransmitSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
</UL>

<P><STRONG><a name="[3bd]"></a>tcpFastRetransmit</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, tcp_misc.o(i.tcpFastRetransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = tcpFastRetransmit &rArr; tcpRetransmitSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
</UL>

<P><STRONG><a name="[3ca]"></a>tcpFlushRetransmitQueue</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tcp_misc.o(i.tcpFlushRetransmitQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tcpFlushRetransmitQueue &rArr; memPoolFree &rArr; osFreeMem &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolFree
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStopTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
</UL>

<P><STRONG><a name="[3cb]"></a>tcpFlushSynQueue</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tcp_misc.o(i.tcpFlushSynQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tcpFlushSynQueue &rArr; memPoolFree &rArr; osFreeMem &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolFree
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
</UL>

<P><STRONG><a name="[3c8]"></a>tcpGenerateInitialSeqNum</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp_misc.o(i.tcpGenerateInitialSeqNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tcpGenerateInitialSeqNum &rArr; netGetRand &rArr; netGetRandBit
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpConnect
</UL>

<P><STRONG><a name="[396]"></a>tcpGetDynamicPort</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, tcp.o(i.tcpGetDynamicPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = tcpGetDynamicPort &rArr; netGetRand &rArr; netGetRandBit
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketAllocate
</UL>

<P><STRONG><a name="[3e3]"></a>tcpGetOption</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tcp_misc.o(i.tcpGetOption))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tcpGetOption
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynSent
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateListen
</UL>

<P><STRONG><a name="[33b]"></a>tcpInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tcp.o(i.tcpInit))
<BR><BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[3b7]"></a>tcpIsDuplicateAck</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, tcp_misc.o(i.tcpIsDuplicateAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcpIsDuplicateAck
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
</UL>

<P><STRONG><a name="[3e2]"></a>tcpIsDuplicateSyn</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, tcp_misc.o(i.tcpIsDuplicateSyn))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tcpIsDuplicateSyn
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateListen
</UL>

<P><STRONG><a name="[397]"></a>tcpKillOldestConnection</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, tcp.o(i.tcpKillOldestConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = tcpKillOldestConnection &rArr; tcpDeleteControlBlock &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketAllocate
</UL>

<P><STRONG><a name="[3cc]"></a>tcpNagleAlgo</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, tcp_misc.o(i.tcpNagleAlgo))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSend
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateCloseWait
</UL>

<P><STRONG><a name="[2ee]"></a>tcpProcessSegment</STRONG> (Thumb, 568 bytes, Stack size 56 bytes, tcp_fsm.o(i.tcpProcessSegment))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = tcpProcessSegment &rArr; tcpStateSynReceived &rArr; tcpStateEstablished &rArr; tcpProcessSegmentData &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRejectSegment
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDumpHeader
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4IsBroadcastAddr
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateTimeWait
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynSent
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynReceived
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateListen
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateLastAck
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosing
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosed
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateCloseWait
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
</UL>

<P><STRONG><a name="[3da]"></a>tcpProcessSegmentData</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, tcp_misc.o(i.tcpProcessSegmentData))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = tcpProcessSegmentData &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWriteRxBuffer
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateSackBlocks
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
</UL>

<P><STRONG><a name="[3dd]"></a>tcpReadRxBuffer</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, tcp_misc.o(i.tcpReadRxBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tcpReadRxBuffer &rArr; netBufferRead
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferRead
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReceive
</UL>

<P><STRONG><a name="[3de]"></a>tcpReadTxBuffer</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, tcp_misc.o(i.tcpReadTxBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = tcpReadTxBuffer &rArr; netBufferConcat
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferConcat
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRetransmitSegment
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>

<P><STRONG><a name="[3a2]"></a>tcpReceive</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, tcp.o(i.tcpReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = tcpReceive &rArr; tcpUpdateReceiveWindow &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWaitForEvents
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateReceiveWindow
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReadRxBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceiveEx
</UL>

<P><STRONG><a name="[3ce]"></a>tcpRejectSegment</STRONG> (Thumb, 248 bytes, Stack size 88 bytes, tcp_misc.o(i.tcpRejectSegment))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = tcpRejectSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipSendDatagram
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateListen
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateClosed
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[3c2]"></a>tcpRetransmitSegment</STRONG> (Thumb, 162 bytes, Stack size 80 bytes, tcp_misc.o(i.tcpRetransmitSegment))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = tcpRetransmitSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAppend
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipSendDatagram
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReadTxBuffer
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckRetransmitTimer
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFastRetransmit
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFastRecovery
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpFastLossRecovery
</UL>

<P><STRONG><a name="[3a5]"></a>tcpSend</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, tcp.o(i.tcpSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWriteTxBuffer
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWaitForEvents
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpNagleAlgo
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSendTo
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpShutdown
</UL>

<P><STRONG><a name="[3b1]"></a>tcpSendResetSegment</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tcp_misc.o(i.tcpSendResetSegment))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAbort
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckRetransmitTimer
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckPersistTimer
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynSent
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynReceived
</UL>

<P><STRONG><a name="[3b6]"></a>tcpSendSegment</STRONG> (Thumb, 484 bytes, Stack size 96 bytes, tcp_misc.o(i.tcpSendSegment))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferSetLength
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolAlloc
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipSendDatagram
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTimerRunning
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReadTxBuffer
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpAddOption
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpShutdown
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpConnect
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckPersistTimer
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckOverrideTimer
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegmentData
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSeqNum
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateTimeWait
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynSent
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait2
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateFinWait1
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateReceiveWindow
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendResetSegment
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpNagleAlgo
</UL>

<P><STRONG><a name="[3a9]"></a>tcpShutdown</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, tcp.o(i.tcpShutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = tcpShutdown &rArr; tcpSend &rArr; tcpNagleAlgo &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSend
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWaitForEvents
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketShutdown
</UL>

<P><STRONG><a name="[3d4]"></a>tcpStateCloseWait</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, tcp_fsm.o(i.tcpStateCloseWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = tcpStateCloseWait &rArr; tcpCheckSyn &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSeqNum
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpNagleAlgo
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[3cf]"></a>tcpStateClosed</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tcp_fsm.o(i.tcpStateClosed))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = tcpStateClosed &rArr; tcpRejectSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRejectSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[3d8]"></a>tcpStateClosing</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, tcp_fsm.o(i.tcpStateClosing))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = tcpStateClosing &rArr; tcpCheckSyn &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSeqNum
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[3d3]"></a>tcpStateEstablished</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, tcp_fsm.o(i.tcpStateEstablished))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = tcpStateEstablished &rArr; tcpProcessSegmentData &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegmentData
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSeqNum
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpNagleAlgo
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynReceived
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[3d6]"></a>tcpStateFinWait1</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, tcp_fsm.o(i.tcpStateFinWait1))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = tcpStateFinWait1 &rArr; tcpProcessSegmentData &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegmentData
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSeqNum
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[3d7]"></a>tcpStateFinWait2</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, tcp_fsm.o(i.tcpStateFinWait2))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = tcpStateFinWait2 &rArr; tcpProcessSegmentData &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegmentData
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSeqNum
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[3d5]"></a>tcpStateLastAck</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, tcp_fsm.o(i.tcpStateLastAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = tcpStateLastAck &rArr; tcpCheckSyn &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSeqNum
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[3d0]"></a>tcpStateListen</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, tcp_fsm.o(i.tcpStateListen))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = tcpStateListen &rArr; tcpRejectSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolFree
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolAlloc
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpRejectSegment
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpIsDuplicateSyn
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpGetOption
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[3d2]"></a>tcpStateSynReceived</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, tcp_fsm.o(i.tcpStateSynReceived))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = tcpStateSynReceived &rArr; tcpStateEstablished &rArr; tcpProcessSegmentData &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSeqNum
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateEstablished
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendResetSegment
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[3d1]"></a>tcpStateSynSent</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, tcp_fsm.o(i.tcpStateSynSent))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = tcpStateSynSent &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateRetransmitQueue
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpGetOption
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpComputeRto
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendResetSegment
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[3d9]"></a>tcpStateTimeWait</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, tcp_fsm.o(i.tcpStateTimeWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = tcpStateTimeWait &rArr; tcpCheckSyn &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSyn
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckSeqNum
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpDeleteControlBlock
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegment
</UL>

<P><STRONG><a name="[345]"></a>tcpTick</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, tcp_timer.o(i.tcpTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = tcpTick &rArr; tcpCheckPersistTimer &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckTimeWaitTimer
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckRetransmitTimer
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckPersistTimer
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckOverrideTimer
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckFinWait2Timer
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netTick
</UL>

<P><STRONG><a name="[33e]"></a>tcpUpdateEvents</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, tcp_misc.o(i.tcpUpdateEvents))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = tcpUpdateEvents &rArr; osSetEvent &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketRegisterEvents
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netProcessLinkChange
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSend
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReceive
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckOverrideTimer
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegmentData
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateListen
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpWaitForEvents
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpNagleAlgo
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpChangeState
</UL>

<P><STRONG><a name="[3df]"></a>tcpUpdateReceiveWindow</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, tcp_misc.o(i.tcpUpdateReceiveWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = tcpUpdateReceiveWindow &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSendSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReceive
</UL>

<P><STRONG><a name="[3ba]"></a>tcpUpdateRetransmitQueue</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, tcp_misc.o(i.tcpUpdateRetransmitQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tcpUpdateRetransmitQueue &rArr; memPoolFree &rArr; osFreeMem &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memPoolFree
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStopTimer
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpStateSynSent
</UL>

<P><STRONG><a name="[3dc]"></a>tcpUpdateSackBlocks</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, tcp_misc.o(i.tcpUpdateSackBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcpUpdateSackBlocks &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegmentData
</UL>

<P><STRONG><a name="[3b8]"></a>tcpUpdateSendWindow</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, tcp_misc.o(i.tcpUpdateSendWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcpUpdateSendWindow &rArr; netStartTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netStartTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCheckAck
</UL>

<P><STRONG><a name="[3c9]"></a>tcpWaitForEvents</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, tcp_misc.o(i.tcpWaitForEvents))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = tcpWaitForEvents &rArr; tcpUpdateEvents &rArr; osSetEvent &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osWaitForEvent
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResetEvent
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpUpdateEvents
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpShutdown
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSend
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpReceive
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpConnect
</UL>

<P><STRONG><a name="[3db]"></a>tcpWriteRxBuffer</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, tcp_misc.o(i.tcpWriteRxBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tcpWriteRxBuffer &rArr; netBufferCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpProcessSegmentData
</UL>

<P><STRONG><a name="[3e0]"></a>tcpWriteTxBuffer</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, tcp_misc.o(i.tcpWriteTxBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tcpWriteTxBuffer &rArr; netBufferWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpSend
</UL>

<P><STRONG><a name="[3e5]"></a>tls12GenerateSignature</STRONG> (Thumb, 344 bytes, Stack size 160 bytes, tls_signature.o(i.tls12GenerateSignature))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = tls12GenerateSignature &rArr; tlsGenerateEcdsaSignature &rArr; ecdsaGenerateSignature &rArr; ecMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFinalizeTranscriptHash
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetHashAlgo
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemImportRsaPrivateKey
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPssSign
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaInitPrivateKey
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaFreePrivateKey
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPkcs1v15Sign
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateEcdsaSignature
</UL>
<BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatCertificateVerify
</UL>

<P><STRONG><a name="[3e9]"></a>tls12Prf</STRONG> (Thumb, 206 bytes, Stack size 104 bytes, tls_key_material.o(i.tls12Prf))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = tls12Prf &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacUpdate
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacInit
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacFinal
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateMasterSecret
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateKeyBlock
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateExtendedMasterSecret
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsComputeVerifyData
</UL>

<P><STRONG><a name="[3ea]"></a>tls12VerifyServerKeySignature</STRONG> (Thumb, 380 bytes, Stack size 48 bytes, tls_client_misc.o(i.tls12VerifyServerKeySignature))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = tls12VerifyServerKeySignature &rArr; tlsVerifyEcdsaSignature &rArr; ecdsaVerifySignature &rArr; ecTwinMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetHashAlgo
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPssVerify
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPkcs1v15Verify
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifyEcdsaSignature
</UL>
<BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerKeyExchange
</UL>

<P><STRONG><a name="[3ec]"></a>tls12VerifySignature</STRONG> (Thumb, 310 bytes, Stack size 40 bytes, tls_signature.o(i.tls12VerifySignature))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = tls12VerifySignature &rArr; tlsVerifyEcdsaSignature &rArr; ecdsaVerifySignature &rArr; ecTwinMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFinalizeTranscriptHash
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetHashAlgo
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPssVerify
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPkcs1v15Verify
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifyEcdsaSignature
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificateVerify
</UL>

<P><STRONG><a name="[3ed]"></a>tls13CheckDuplicateKeyShare</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, tls13_misc.o(i.tls13CheckDuplicateKeyShare))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tls13CheckDuplicateKeyShare
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseHelloExtensions
</UL>

<P><STRONG><a name="[3ee]"></a>tls13ComputeMac</STRONG> (Thumb, 116 bytes, Stack size 80 bytes, tls13_misc.o(i.tls13ComputeMac))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = tls13ComputeMac &rArr; hmacInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacUpdate
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacInit
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacFinal
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatNonce
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatAad
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsAppendMessageAuthCode
</UL>

<P><STRONG><a name="[3f1]"></a>tls13ComputePskBinder</STRONG> (Thumb, 290 bytes, Stack size 144 bytes, tls13_misc.o(i.tls13ComputePskBinder))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = tls13ComputePskBinder &rArr; tls13DeriveSecret &rArr; tls13HkdfExpandLabel &rArr; hkdfExpand &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacCompute
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hkdfExtract
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13IsTicketValid
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13HkdfExpandLabel
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13DeriveSecret
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13IsPskValid
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ComputePskBinders
</UL>

<P><STRONG><a name="[3f6]"></a>tls13ComputePskBinders</STRONG> (Thumb, 174 bytes, Stack size 64 bytes, tls13_client_misc.o(i.tls13ComputePskBinders))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = tls13ComputePskBinders &rArr; tls13ComputePskBinder &rArr; tls13DeriveSecret &rArr; tls13HkdfExpandLabel &rArr; hkdfExpand &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ComputePskBinder
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatClientHello
</UL>

<P><STRONG><a name="[3f4]"></a>tls13DeriveSecret</STRONG> (Thumb, 92 bytes, Stack size 96 bytes, tls13_key_material.o(i.tls13DeriveSecret))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = tls13DeriveSecret &rArr; tls13HkdfExpandLabel &rArr; hkdfExpand &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFinalizeTranscriptHash
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13HkdfExpandLabel
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13GenerateServerAppTrafficKeys
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13GenerateHandshakeTrafficKeys
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13GenerateClientAppTrafficKeys
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ComputePskBinder
</UL>

<P><STRONG><a name="[416]"></a>tls13DigestClientHello1</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, tls13_misc.o(i.tls13DigestClientHello1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tls13DigestClientHello1
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseHelloRetryRequest
</UL>

<P><STRONG><a name="[43c]"></a>tls13FormatCertExtensions</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tls13_misc.o(i.tls13FormatCertExtensions))
<BR><BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatCertificateList
</UL>

<P><STRONG><a name="[3f7]"></a>tls13FormatClientKeyShareExtension</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, tls13_client_extensions.o(i.tls13FormatClientKeyShareExtension))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = tls13FormatClientKeyShareExtension &rArr; tls13IsEcdheGroupSupported &rArr; tlsGetCurveInfo &rArr; ecGetCurveInfo &rArr; oidComp
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecExport
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13IsEcdheGroupSupported
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatClientHello
</UL>

<P><STRONG><a name="[3f9]"></a>tls13FormatClientPreSharedKeyExtension</STRONG> (Thumb, 304 bytes, Stack size 56 bytes, tls13_client_extensions.o(i.tls13FormatClientPreSharedKeyExtension))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = tls13FormatClientPreSharedKeyExtension &rArr; tlsSelectCipherSuite &rArr; tlsIsCipherSuiteAcceptable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetHashAlgo
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13IsTicketValid
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13IsPskValid
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSelectCipherSuite
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatClientHello
</UL>

<P><STRONG><a name="[3fb]"></a>tls13FormatCookieExtension</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, tls13_client_extensions.o(i.tls13FormatCookieExtension))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tls13FormatCookieExtension
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatClientHello
</UL>

<P><STRONG><a name="[3fc]"></a>tls13FormatPskKeModesExtension</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tls13_client_extensions.o(i.tls13FormatPskKeModesExtension))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tls13FormatPskKeModesExtension
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatClientHello
</UL>

<P><STRONG><a name="[3fd]"></a>tls13GenerateClientAppTrafficKeys</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, tls13_key_material.o(i.tls13GenerateClientAppTrafficKeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = tls13GenerateClientAppTrafficKeys &rArr; tls13DeriveSecret &rArr; tls13HkdfExpandLabel &rArr; hkdfExpand &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsInitEncryptionEngine
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFreeEncryptionEngine
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13DeriveSecret
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsPerformClientHandshake
</UL>

<P><STRONG><a name="[400]"></a>tls13GenerateHandshakeTrafficKeys</STRONG> (Thumb, 354 bytes, Stack size 40 bytes, tls13_key_material.o(i.tls13GenerateHandshakeTrafficKeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = tls13GenerateHandshakeTrafficKeys &rArr; tls13DeriveSecret &rArr; tls13HkdfExpandLabel &rArr; hkdfExpand &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hkdfExtract
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsInitEncryptionEngine
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFreeEncryptionEngine
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13IsTicketValid
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13DeriveSecret
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13IsPskValid
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsPerformClientHandshake
</UL>

<P><STRONG><a name="[401]"></a>tls13GenerateKeyShare</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, tls13_misc.o(i.tls13GenerateKeyShare))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = tls13GenerateKeyShare &rArr; ecdhGenerateKeyPair &rArr; ecGenerateKeyPair &rArr; ecGeneratePublicKey &rArr; ecMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecLoadDomainParameters
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhGenerateKeyPair
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetCurveInfo
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13IsEcdheGroupSupported
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseSelectedGroupExtension
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendClientHello
</UL>

<P><STRONG><a name="[403]"></a>tls13GenerateServerAppTrafficKeys</STRONG> (Thumb, 286 bytes, Stack size 96 bytes, tls13_key_material.o(i.tls13GenerateServerAppTrafficKeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = tls13GenerateServerAppTrafficKeys &rArr; tls13DeriveSecret &rArr; tls13HkdfExpandLabel &rArr; hkdfExpand &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hkdfExtract
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsInitEncryptionEngine
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFreeEncryptionEngine
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13DeriveSecret
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsPerformClientHandshake
</UL>

<P><STRONG><a name="[404]"></a>tls13GenerateSharedSecret</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, tls13_misc.o(i.tls13GenerateSharedSecret))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = tls13GenerateSharedSecret &rArr; ecdhComputeSharedSecret &rArr; ecMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecImport
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhComputeSharedSecret
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhCheckPublicKey
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13IsEcdheGroupSupported
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseServerKeyShareExtension
</UL>

<P><STRONG><a name="[405]"></a>tls13GenerateSignature</STRONG> (Thumb, 462 bytes, Stack size 152 bytes, tls13_signature.o(i.tls13GenerateSignature))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = tls13GenerateSignature &rArr; tlsGenerateEcdsaSignature &rArr; ecdsaGenerateSignature &rArr; ecMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFinalizeTranscriptHash
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetHashAlgo
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemImportRsaPrivateKey
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPssSign
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaInitPrivateKey
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaFreePrivateKey
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateEcdsaSignature
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatCertificateVerify
</UL>

<P><STRONG><a name="[3f5]"></a>tls13HkdfExpandLabel</STRONG> (Thumb, 158 bytes, Stack size 64 bytes, tls13_key_material.o(i.tls13HkdfExpandLabel))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = tls13HkdfExpandLabel &rArr; hkdfExpand &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hkdfExpand
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsInitEncryptionEngine
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13DeriveSecret
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ComputePskBinder
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsComputeVerifyData
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseNewSessionTicket
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13SendKeyUpdate
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseKeyUpdate
</UL>

<P><STRONG><a name="[3f8]"></a>tls13IsEcdheGroupSupported</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, tls13_misc.o(i.tls13IsEcdheGroupSupported))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = tls13IsEcdheGroupSupported &rArr; tlsGetCurveInfo &rArr; ecGetCurveInfo &rArr; oidComp
</UL>
<BR>[Calls]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetCurveInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13IsGroupSupported
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13GenerateSharedSecret
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13GenerateKeyShare
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseServerKeyShareExtension
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13FormatClientKeyShareExtension
</UL>

<P><STRONG><a name="[41c]"></a>tls13IsFfdheGroupSupported</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tls13_misc.o(i.tls13IsFfdheGroupSupported))
<BR><BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseServerKeyShareExtension
</UL>

<P><STRONG><a name="[406]"></a>tls13IsGroupSupported</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tls13_misc.o(i.tls13IsGroupSupported))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = tls13IsGroupSupported &rArr; tls13IsEcdheGroupSupported &rArr; tlsGetCurveInfo &rArr; ecGetCurveInfo &rArr; oidComp
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13IsEcdheGroupSupported
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsInit
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendClientHello
</UL>

<P><STRONG><a name="[407]"></a>tls13IsHelloRetryRequest</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tls13_client_misc.o(i.tls13IsHelloRetryRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tls13IsHelloRetryRequest &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHandshakeMessage
</UL>

<P><STRONG><a name="[3f2]"></a>tls13IsPskValid</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, tls13_misc.o(i.tls13IsPskValid))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tls13IsPskValid
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetHashAlgo
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13GenerateHandshakeTrafficKeys
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ComputePskBinder
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseServerPreSharedKeyExtension
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13FormatClientPreSharedKeyExtension
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseHelloRetryRequest
</UL>

<P><STRONG><a name="[3f3]"></a>tls13IsTicketValid</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, tls13_ticket.o(i.tls13IsTicketValid))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tls13IsTicketValid
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetHashAlgo
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13GenerateHandshakeTrafficKeys
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ComputePskBinder
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseServerPreSharedKeyExtension
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13FormatClientPreSharedKeyExtension
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseHelloRetryRequest
</UL>

<P><STRONG><a name="[408]"></a>tls13ParseCertExtensions</STRONG> (Thumb, 78 bytes, Stack size 96 bytes, tls13_misc.o(i.tls13ParseCertExtensions))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = tls13ParseCertExtensions &rArr; tlsParseHelloExtensions &rArr; tls13CheckDuplicateKeyShare
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseHelloExtensions
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsCheckHelloExtensions
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificateList
</UL>

<P><STRONG><a name="[40b]"></a>tls13ParseCookieExtension</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tls13_client_extensions.o(i.tls13ParseCookieExtension))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tls13ParseCookieExtension &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseHelloRetryRequest
</UL>

<P><STRONG><a name="[40c]"></a>tls13ParseEncryptedExtensions</STRONG> (Thumb, 144 bytes, Stack size 88 bytes, tls13_client.o(i.tls13ParseEncryptedExtensions))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = tls13ParseEncryptedExtensions &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseHelloExtensions
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsCheckHelloExtensions
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerSniExtension
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerRecordSizeLimitExtension
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHandshakeMessage
</UL>

<P><STRONG><a name="[40f]"></a>tls13ParseHelloRetryRequest</STRONG> (Thumb, 586 bytes, Stack size 136 bytes, tls13_client.o(i.tls13ParseHelloRetryRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = tls13ParseHelloRetryRequest &rArr; tls13ParseSelectedGroupExtension &rArr; tls13GenerateKeyShare &rArr; ecdhGenerateKeyPair &rArr; ecGenerateKeyPair &rArr; ecGeneratePublicKey &rArr; ecMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugDisplayArray
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseHelloExtensions
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetHashAlgo
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsCheckHelloExtensions
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13IsTicketValid
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13IsPskValid
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13DigestClientHello1
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSelectCipherSuite
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsInitTranscriptHash
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetVersionName
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetCipherSuiteName
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFreeTranscriptHash
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatInitialClientHello
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseServerSupportedVersionsExtension
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseSelectedGroupExtension
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseCookieExtension
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHandshakeMessage
</UL>

<P><STRONG><a name="[418]"></a>tls13ParseKeyUpdate</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, tls13_common.o(i.tls13ParseKeyUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = tls13ParseKeyUpdate &rArr; tlsInitEncryptionEngine &rArr; tls13HkdfExpandLabel &rArr; hkdfExpand &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsInitEncryptionEngine
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFreeEncryptionEngine
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13HkdfExpandLabel
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHandshakeMessage
</UL>

<P><STRONG><a name="[419]"></a>tls13ParseNewSessionTicket</STRONG> (Thumb, 338 bytes, Stack size 120 bytes, tls13_client.o(i.tls13ParseNewSessionTicket))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = tls13ParseNewSessionTicket &rArr; tls13HkdfExpandLabel &rArr; hkdfExpand &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt32
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseHelloExtensions
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsCheckHelloExtensions
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13HkdfExpandLabel
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseServerEarlyDataExtension
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHandshakeMessage
</UL>

<P><STRONG><a name="[417]"></a>tls13ParseSelectedGroupExtension</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tls13_client_extensions.o(i.tls13ParseSelectedGroupExtension))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = tls13ParseSelectedGroupExtension &rArr; tls13GenerateKeyShare &rArr; ecdhGenerateKeyPair &rArr; ecGenerateKeyPair &rArr; ecGeneratePublicKey &rArr; ecMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13GenerateKeyShare
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseHelloRetryRequest
</UL>

<P><STRONG><a name="[41a]"></a>tls13ParseServerEarlyDataExtension</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tls13_client_extensions.o(i.tls13ParseServerEarlyDataExtension))
<BR><BR>[Called By]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseNewSessionTicket
</UL>

<P><STRONG><a name="[41b]"></a>tls13ParseServerKeyShareExtension</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, tls13_client_extensions.o(i.tls13ParseServerKeyShareExtension))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = tls13ParseServerKeyShareExtension &rArr; tls13GenerateSharedSecret &rArr; ecdhComputeSharedSecret &rArr; ecMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13IsFfdheGroupSupported
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13IsEcdheGroupSupported
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13GenerateSharedSecret
</UL>
<BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHello
</UL>

<P><STRONG><a name="[41d]"></a>tls13ParseServerPreSharedKeyExtension</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, tls13_client_extensions.o(i.tls13ParseServerPreSharedKeyExtension))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tls13ParseServerPreSharedKeyExtension &rArr; tls13IsTicketValid
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetHashAlgo
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13IsTicketValid
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13IsPskValid
</UL>
<BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHello
</UL>

<P><STRONG><a name="[414]"></a>tls13ParseServerSupportedVersionsExtension</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, tls13_client_extensions.o(i.tls13ParseServerSupportedVersionsExtension))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = tls13ParseServerSupportedVersionsExtension &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSelectVersion
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetVersionName
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseHelloRetryRequest
</UL>

<P><STRONG><a name="[41f]"></a>tls13RestoreSessionTicket</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, tls13_ticket.o(i.tls13RestoreSessionTicket))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tls13RestoreSessionTicket &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsRestoreSessionState
</UL>

<P><STRONG><a name="[420]"></a>tls13SaveSessionTicket</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, tls13_ticket.o(i.tls13SaveSessionTicket))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tls13SaveSessionTicket &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetHashAlgo
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSaveSessionState
</UL>

<P><STRONG><a name="[48b]"></a>tls13SendEndOfEarlyData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tls13_client.o(i.tls13SendEndOfEarlyData))
<BR><BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsPerformClientHandshake
</UL>

<P><STRONG><a name="[421]"></a>tls13SendKeyUpdate</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, tls13_common.o(i.tls13SendKeyUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = tls13SendKeyUpdate &rArr; tlsSendHandshakeMessage &rArr; tlsWriteProtocolData &rArr; tlsWriteRecord &rArr; tlsEncryptRecord &rArr; tlsEncryptAeadRecord &rArr; chacha20Poly1305Encrypt &rArr; poly1305Final &rArr; poly1305ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsInitEncryptionEngine
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFreeEncryptionEngine
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13HkdfExpandLabel
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendHandshakeMessage
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsPerformClientHandshake
</UL>

<P><STRONG><a name="[423]"></a>tls13VerifySignature</STRONG> (Thumb, 434 bytes, Stack size 48 bytes, tls13_signature.o(i.tls13VerifySignature))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = tls13VerifySignature &rArr; tlsVerifyEcdsaSignature &rArr; ecdsaVerifySignature &rArr; ecTwinMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFinalizeTranscriptHash
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetHashAlgo
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPssVerify
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifyEcdsaSignature
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificateVerify
</UL>

<P><STRONG><a name="[424]"></a>tlsAppendMessageAuthCode</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, tls_record_encryption.o(i.tlsAppendMessageAuthCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = tlsAppendMessageAuthCode &rArr; tls13ComputeMac &rArr; hmacInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ComputeMac
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSetRecordType
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSetRecordLength
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsIncSequenceNumber
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetRecordType
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetRecordLength
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetRecordData
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsComputeMac
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsEncryptRecord
</UL>

<P><STRONG><a name="[451]"></a>tlsCheckDnsHostname</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, tls_misc.o(i.tlsCheckDnsHostname))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tlsCheckDnsHostname
</UL>
<BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatClientSniExtension
</UL>

<P><STRONG><a name="[42c]"></a>tlsCheckDuplicateExtension</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, tls_extensions.o(i.tlsCheckDuplicateExtension))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tlsCheckDuplicateExtension
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseHelloExtensions
</UL>

<P><STRONG><a name="[40a]"></a>tlsCheckHelloExtensions</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, tls_extensions.o(i.tlsCheckHelloExtensions))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tlsCheckHelloExtensions
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseCertExtensions
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseNewSessionTicket
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseHelloRetryRequest
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseEncryptedExtensions
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHello
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificateRequest
</UL>

<P><STRONG><a name="[468]"></a>tlsCheckKeyUsage</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, tls_certificate.o(i.tlsCheckKeyUsage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tlsCheckKeyUsage
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificateList
</UL>

<P><STRONG><a name="[427]"></a>tlsComputeMac</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, tls_record_encryption.o(i.tlsComputeMac))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tlsComputeMac &rArr; hmacInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacUpdate
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacInit
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacFinal
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsAppendMessageAuthCode
</UL>

<P><STRONG><a name="[42d]"></a>tlsComputeVerifyData</STRONG> (Thumb, 338 bytes, Stack size 144 bytes, tls_transcript_hash.o(i.tlsComputeVerifyData))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = tlsComputeVerifyData &rArr; tls13HkdfExpandLabel &rArr; hkdfExpand &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacCompute
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFinalizeTranscriptHash
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13HkdfExpandLabel
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsPrf
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls12Prf
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendFinished
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseFinished
</UL>

<P><STRONG><a name="[42f]"></a>tlsConnect</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, tls.o(i.tlsConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272 + Unknown Stack Size
<LI>Call Chain = tlsConnect &rArr; tlsPerformHandshake &rArr; tlsPerformClientHandshake &rArr; tlsReceiveHandshakeMessage &rArr; tlsParseHandshakeMessage &rArr; tlsParseServerHandshakeMessage &rArr; tlsParseCertificate &rArr; tlsParseCertificateList &rArr; tlsValidateCertificate &rArr; x509ValidateCertificate &rArr; x509VerifySignature &rArr; x509VerifyEcdsaSignature &rArr; ecdsaVerifySignature &rArr; ecTwinMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsPerformHandshake
</UL>
<BR>[Called By]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsWrite
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsRead
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketEstablishConnection
</UL>

<P><STRONG><a name="[431]"></a>tlsDecryptAeadRecord</STRONG> (Thumb, 310 bytes, Stack size 112 bytes, tls_record_decryption.o(i.tlsDecryptAeadRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = tlsDecryptAeadRecord &rArr; chacha20Poly1305Decrypt &rArr; poly1305Final &rArr; poly1305ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chacha20Poly1305Decrypt
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcmDecrypt
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatNonce
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatAad
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSetRecordType
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSetRecordLength
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsIncSequenceNumber
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetRecordType
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetRecordLength
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetRecordData
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsDecryptRecord
</UL>

<P><STRONG><a name="[432]"></a>tlsDecryptCbcRecord</STRONG> (Thumb, 256 bytes, Stack size 144 bytes, tls_record_decryption.o(i.tlsDecryptCbcRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = tlsDecryptCbcRecord &rArr; tlsVerifyMac &rArr; hmacInit
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbcDecrypt
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSetRecordLength
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsIncSequenceNumber
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetRecordLength
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetRecordData
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifyPadding
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifyMac
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsExtractMac
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsDecryptRecord
</UL>

<P><STRONG><a name="[436]"></a>tlsDecryptRecord</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tls_record_decryption.o(i.tlsDecryptRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = tlsDecryptRecord &rArr; tlsDecryptAeadRecord &rArr; chacha20Poly1305Decrypt &rArr; poly1305Final &rArr; poly1305ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsDecryptCbcRecord
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsDecryptAeadRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsProcessRecord
</UL>

<P><STRONG><a name="[437]"></a>tlsEncryptAeadRecord</STRONG> (Thumb, 274 bytes, Stack size 96 bytes, tls_record_encryption.o(i.tlsEncryptAeadRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = tlsEncryptAeadRecord &rArr; chacha20Poly1305Encrypt &rArr; poly1305Final &rArr; poly1305ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chacha20Poly1305Encrypt
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcmEncrypt
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatNonce
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatAad
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSetRecordType
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSetRecordLength
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsIncSequenceNumber
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetRecordType
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetRecordLength
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetRecordData
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsEncryptRecord
</UL>

<P><STRONG><a name="[438]"></a>tlsEncryptCbcRecord</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, tls_record_encryption.o(i.tlsEncryptCbcRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tlsEncryptCbcRecord &rArr; cbcEncrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cbcEncrypt
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSetRecordLength
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetRecordLength
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetRecordData
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsEncryptRecord
</UL>

<P><STRONG><a name="[439]"></a>tlsEncryptRecord</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tls_record_encryption.o(i.tlsEncryptRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = tlsEncryptRecord &rArr; tlsEncryptAeadRecord &rArr; chacha20Poly1305Encrypt &rArr; poly1305Final &rArr; poly1305ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsEncryptCbcRecord
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsEncryptAeadRecord
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsAppendMessageAuthCode
</UL>
<BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsWriteRecord
</UL>

<P><STRONG><a name="[434]"></a>tlsExtractMac</STRONG> (Thumb, 262 bytes, Stack size 104 bytes, tls_record_decryption.o(i.tlsExtractMac))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = tlsExtractMac
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsDecryptCbcRecord
</UL>

<P><STRONG><a name="[3e7]"></a>tlsFinalizeTranscriptHash</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, tls_transcript_hash.o(i.tlsFinalizeTranscriptHash))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tlsFinalizeTranscriptHash &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13DeriveSecret
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateExtendedMasterSecret
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifySignature
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateSignature
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls12VerifySignature
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls12GenerateSignature
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsComputeVerifyData
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13VerifySignature
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13GenerateSignature
</UL>

<P><STRONG><a name="[3ef]"></a>tlsFormatAad</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, tls_record.o(i.tlsFormatAad))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tlsFormatAad
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ComputeMac
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsEncryptAeadRecord
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsDecryptAeadRecord
</UL>

<P><STRONG><a name="[49a]"></a>tlsFormatAlert</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tls_common.o(i.tlsFormatAlert))
<BR><BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendAlert
</UL>

<P><STRONG><a name="[43a]"></a>tlsFormatCertificate</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, tls_common.o(i.tlsFormatCertificate))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = tlsFormatCertificate &rArr; tlsFormatCertificateList &rArr; pemImportCertificate &rArr; pemDecodeFile &rArr; pemFindTag &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatCertificateList
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendCertificate
</UL>

<P><STRONG><a name="[43b]"></a>tlsFormatCertificateList</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, tls_certificate.o(i.tlsFormatCertificateList))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = tlsFormatCertificateList &rArr; pemImportCertificate &rArr; pemDecodeFile &rArr; pemFindTag &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13FormatCertExtensions
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemImportCertificate
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatCertificate
</UL>

<P><STRONG><a name="[43d]"></a>tlsFormatCertificateVerify</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, tls_common.o(i.tlsFormatCertificateVerify))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = tlsFormatCertificateVerify &rArr; tls12GenerateSignature &rArr; tlsGenerateEcdsaSignature &rArr; ecdsaGenerateSignature &rArr; ecMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateSignature
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls12GenerateSignature
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13GenerateSignature
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendCertificateVerify
</UL>

<P><STRONG><a name="[43f]"></a>tlsFormatCipherSuites</STRONG> (Thumb, 236 bytes, Stack size 56 bytes, tls_client_misc.o(i.tlsFormatCipherSuites))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = tlsFormatCipherSuites &rArr; tlsIsCipherSuiteAcceptable
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsIsCipherSuiteAcceptable
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetNumSupportedCipherSuites
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetCipherSuiteType
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatClientHello
</UL>

<P><STRONG><a name="[443]"></a>tlsFormatClientEcPointFormatsExtension</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tls_client_extensions.o(i.tlsFormatClientEcPointFormatsExtension))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tlsFormatClientEcPointFormatsExtension
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatClientHello
</UL>

<P><STRONG><a name="[44c]"></a>tlsFormatClientEmsExtension</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, tls_client_extensions.o(i.tlsFormatClientEmsExtension))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tlsFormatClientEmsExtension
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatClientHello
</UL>

<P><STRONG><a name="[444]"></a>tlsFormatClientHello</STRONG> (Thumb, 660 bytes, Stack size 48 bytes, tls_client.o(i.tlsFormatClientHello))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = tlsFormatClientHello &rArr; tls13ComputePskBinders &rArr; tls13ComputePskBinder &rArr; tls13DeriveSecret &rArr; tls13HkdfExpandLabel &rArr; hkdfExpand &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13FormatPskKeModesExtension
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13FormatCookieExtension
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13FormatClientPreSharedKeyExtension
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13FormatClientKeyShareExtension
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ComputePskBinders
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatSupportedGroupsExtension
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatClientSupportedVersionsExtension
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatClientSniExtension
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatClientRecordSizeLimitExtension
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatClientHelloPaddingExtension
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatClientEmsExtension
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatClientEcPointFormatsExtension
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatSessionId
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatCompressMethods
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatCipherSuites
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatSignatureAlgorithmsExtension
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatInitialClientHello
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendClientHello
</UL>

<P><STRONG><a name="[44d]"></a>tlsFormatClientHelloPaddingExtension</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, tls_client_extensions.o(i.tlsFormatClientHelloPaddingExtension))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tlsFormatClientHelloPaddingExtension
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatClientHello
</UL>

<P><STRONG><a name="[44e]"></a>tlsFormatClientKeyExchange</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tls_client.o(i.tlsFormatClientKeyExchange))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = tlsFormatClientKeyExchange &rArr; tlsFormatClientKeyParams &rArr; ecdhGenerateKeyPair &rArr; ecGenerateKeyPair &rArr; ecGeneratePublicKey &rArr; ecMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatClientKeyParams
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendClientKeyExchange
</UL>

<P><STRONG><a name="[44f]"></a>tlsFormatClientKeyParams</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, tls_client_misc.o(i.tlsFormatClientKeyParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = tlsFormatClientKeyParams &rArr; ecdhGenerateKeyPair &rArr; ecGenerateKeyPair &rArr; ecGeneratePublicKey &rArr; ecMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhGenerateKeyPair
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhComputeSharedSecret
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaesPkcs1v15Encrypt
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsWriteEcPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatClientKeyExchange
</UL>

<P><STRONG><a name="[449]"></a>tlsFormatClientRecordSizeLimitExtension</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, tls_client_extensions.o(i.tlsFormatClientRecordSizeLimitExtension))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tlsFormatClientRecordSizeLimitExtension
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatClientHello
</UL>

<P><STRONG><a name="[448]"></a>tlsFormatClientSniExtension</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, tls_client_extensions.o(i.tlsFormatClientSniExtension))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = tlsFormatClientSniExtension &rArr; tlsCheckDnsHostname
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsCheckDnsHostname
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatClientHello
</UL>

<P><STRONG><a name="[447]"></a>tlsFormatClientSupportedVersionsExtension</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, tls_client_extensions.o(i.tlsFormatClientSupportedVersionsExtension))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tlsFormatClientSupportedVersionsExtension
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatClientHello
</UL>

<P><STRONG><a name="[446]"></a>tlsFormatCompressMethods</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tls_client_misc.o(i.tlsFormatCompressMethods))
<BR><BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatClientHello
</UL>

<P><STRONG><a name="[452]"></a>tlsFormatFinished</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, tls_common.o(i.tlsFormatFinished))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tlsFormatFinished
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendFinished
</UL>

<P><STRONG><a name="[413]"></a>tlsFormatInitialClientHello</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, tls_client_misc.o(i.tlsFormatInitialClientHello))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = tlsFormatInitialClientHello &rArr; tlsFormatClientHello &rArr; tls13ComputePskBinders &rArr; tls13ComputePskBinder &rArr; tls13DeriveSecret &rArr; tls13HkdfExpandLabel &rArr; hkdfExpand &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatClientHello
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseHelloRetryRequest
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHello
</UL>

<P><STRONG><a name="[3f0]"></a>tlsFormatNonce</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, tls_record.o(i.tlsFormatNonce))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tlsFormatNonce
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ComputeMac
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsEncryptAeadRecord
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsDecryptAeadRecord
</UL>

<P><STRONG><a name="[445]"></a>tlsFormatSessionId</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, tls_client_misc.o(i.tlsFormatSessionId))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tlsFormatSessionId
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatClientHello
</UL>

<P><STRONG><a name="[44b]"></a>tlsFormatSignatureAlgorithmsExtension</STRONG> (Thumb, 288 bytes, Stack size 56 bytes, tls_common.o(i.tlsFormatSignatureAlgorithmsExtension))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tlsFormatSignatureAlgorithmsExtension
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509IsSignAlgoSupported
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatClientHello
</UL>

<P><STRONG><a name="[44a]"></a>tlsFormatSupportedGroupsExtension</STRONG> (Thumb, 126 bytes, Stack size 56 bytes, tls_client_extensions.o(i.tlsFormatSupportedGroupsExtension))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = tlsFormatSupportedGroupsExtension &rArr; tlsGetCurveInfo &rArr; ecGetCurveInfo &rArr; oidComp
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetCurveInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatClientHello
</UL>

<P><STRONG><a name="[454]"></a>tlsFree</STRONG> (Thumb, 230 bytes, Stack size 8 bytes, tls.o(i.tlsFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = tlsFree &rArr; ecdhFree &rArr; ecFreeDomainParameters &rArr; ecFree &rArr; mpiFree &rArr; osFreeMem &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFreePublicKey
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFreeDomainParameters
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhFree
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFreeEncryptionEngine
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaFreePublicKey
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFreeTranscriptHash
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketCloseConnection
</UL>

<P><STRONG><a name="[3fe]"></a>tlsFreeEncryptionEngine</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, tls_misc.o(i.tlsFreeEncryptionEngine))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tlsFreeEncryptionEngine &rArr; osFreeMem &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFree
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13GenerateServerAppTrafficKeys
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13GenerateHandshakeTrafficKeys
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13GenerateClientAppTrafficKeys
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13SendKeyUpdate
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseKeyUpdate
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendClientHello
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendChangeCipherSpec
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseChangeCipherSpec
</UL>

<P><STRONG><a name="[455]"></a>tlsFreeSessionState</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, tls.o(i.tlsFreeSessionState))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tlsFreeSessionState &rArr; osFreeMem &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketClose
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSaveSessionState
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsRemoveFromCache
</UL>

<P><STRONG><a name="[412]"></a>tlsFreeTranscriptHash</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, tls_transcript_hash.o(i.tlsFreeTranscriptHash))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tlsFreeTranscriptHash &rArr; osFreeMem &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFree
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseHelloRetryRequest
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHello
</UL>

<P><STRONG><a name="[3e8]"></a>tlsGenerateEcdsaSignature</STRONG> (Thumb, 134 bytes, Stack size 184 bytes, tls_signature.o(i.tlsGenerateEcdsaSignature))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = tlsGenerateEcdsaSignature &rArr; ecdsaGenerateSignature &rArr; ecMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecInitPrivateKey
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecInitDomainParameters
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFreePrivateKey
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFreeDomainParameters
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaGenerateSignature
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaWriteSignature
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaInitSignature
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaFreeSignature
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemImportEcPrivateKey
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemImportEcParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateSignature
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls12GenerateSignature
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13GenerateSignature
</UL>

<P><STRONG><a name="[456]"></a>tlsGenerateExtendedMasterSecret</STRONG> (Thumb, 196 bytes, Stack size 80 bytes, tls_key_material.o(i.tlsGenerateExtendedMasterSecret))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = tlsGenerateExtendedMasterSecret &rArr; tls12Prf &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFinalizeTranscriptHash
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsPrf
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls12Prf
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateSessionKeys
</UL>

<P><STRONG><a name="[457]"></a>tlsGenerateKeyBlock</STRONG> (Thumb, 122 bytes, Stack size 96 bytes, tls_key_material.o(i.tlsGenerateKeyBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = tlsGenerateKeyBlock &rArr; tls12Prf &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsPrf
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls12Prf
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateSessionKeys
</UL>

<P><STRONG><a name="[458]"></a>tlsGenerateMasterSecret</STRONG> (Thumb, 126 bytes, Stack size 96 bytes, tls_key_material.o(i.tlsGenerateMasterSecret))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = tlsGenerateMasterSecret &rArr; tls12Prf &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsPrf
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls12Prf
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateSessionKeys
</UL>

<P><STRONG><a name="[49b]"></a>tlsGenerateRandomValue</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, tls_misc.o(i.tlsGenerateRandomValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tlsGenerateRandomValue
</UL>
<BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendClientHello
</UL>

<P><STRONG><a name="[459]"></a>tlsGenerateRsaSignature</STRONG> (Thumb, 148 bytes, Stack size 56 bytes, tls_signature.o(i.tlsGenerateRsaSignature))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = tlsGenerateRsaSignature &rArr; rsasp1 &rArr; rsadp &rArr; mpiExpModRegular &rArr; mpiExpMod &rArr; mpiMontgomeryRed &rArr; mpiMontgomeryMul &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiImport
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetByteLength
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiExport
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsasp1
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateSignature
</UL>

<P><STRONG><a name="[49c]"></a>tlsGenerateSessionId</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tls_misc.o(i.tlsGenerateSessionId))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tlsGenerateSessionId
</UL>
<BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendClientHello
</UL>

<P><STRONG><a name="[45a]"></a>tlsGenerateSessionKeys</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, tls_key_material.o(i.tlsGenerateSessionKeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = tlsGenerateSessionKeys &rArr; tlsGenerateMasterSecret &rArr; tls12Prf &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateMasterSecret
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateKeyBlock
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateExtendedMasterSecret
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendClientKeyExchange
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHello
</UL>

<P><STRONG><a name="[43e]"></a>tlsGenerateSignature</STRONG> (Thumb, 192 bytes, Stack size 136 bytes, tls_signature.o(i.tlsGenerateSignature))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = tlsGenerateSignature &rArr; tlsGenerateEcdsaSignature &rArr; ecdsaGenerateSignature &rArr; ecMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFinalizeTranscriptHash
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemImportRsaPrivateKey
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaInitPrivateKey
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaFreePrivateKey
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateRsaSignature
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateEcdsaSignature
</UL>
<BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatCertificateVerify
</UL>

<P><STRONG><a name="[45b]"></a>tlsGetCertificateType</STRONG> (Thumb, 392 bytes, Stack size 40 bytes, tls_certificate.o(i.tlsGetCertificateType))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = tlsGetCertificateType &rArr; tlsGetNamedCurve &rArr; oidComp
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oidComp
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetNamedCurve
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificateList
</UL>

<P><STRONG><a name="[411]"></a>tlsGetCipherSuiteName</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, tls_cipher_suites.o(i.tlsGetCipherSuiteName))
<BR><BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseHelloRetryRequest
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHello
</UL>

<P><STRONG><a name="[442]"></a>tlsGetCipherSuiteType</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, tls_cipher_suites.o(i.tlsGetCipherSuiteType))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tlsGetCipherSuiteType
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatCipherSuites
</UL>

<P><STRONG><a name="[402]"></a>tlsGetCurveInfo</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tls_misc.o(i.tlsGetCurveInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = tlsGetCurveInfo &rArr; ecGetCurveInfo &rArr; oidComp
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecGetCurveInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13IsEcdheGroupSupported
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13GenerateKeyShare
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatSupportedGroupsExtension
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerKeyParams
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificateList
</UL>

<P><STRONG><a name="[3e6]"></a>tlsGetHashAlgo</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, tls_misc.o(i.tlsGetHashAlgo))
<BR><BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13SaveSessionTicket
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13IsTicketValid
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13IsPskValid
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseServerPreSharedKeyExtension
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13FormatClientPreSharedKeyExtension
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSelectSignatureScheme
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls12VerifySignature
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls12GenerateSignature
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseHelloRetryRequest
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13VerifySignature
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13GenerateSignature
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls12VerifyServerKeySignature
</UL>

<P><STRONG><a name="[45c]"></a>tlsGetNamedCurve</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tls_misc.o(i.tlsGetNamedCurve))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = tlsGetNamedCurve &rArr; oidComp
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oidComp
</UL>
<BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetCertificateType
</UL>

<P><STRONG><a name="[440]"></a>tlsGetNumSupportedCipherSuites</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tls_cipher_suites.o(i.tlsGetNumSupportedCipherSuites))
<BR><BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSelectCipherSuite
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatCipherSuites
</UL>

<P><STRONG><a name="[426]"></a>tlsGetRecordData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tls_record.o(i.tlsGetRecordData))
<BR><BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsEncryptCbcRecord
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsEncryptAeadRecord
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsAppendMessageAuthCode
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsDecryptCbcRecord
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsDecryptAeadRecord
</UL>

<P><STRONG><a name="[425]"></a>tlsGetRecordLength</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tls_record.o(i.tlsGetRecordLength))
<BR><BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsEncryptCbcRecord
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsEncryptAeadRecord
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsAppendMessageAuthCode
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsDecryptCbcRecord
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsDecryptAeadRecord
</UL>

<P><STRONG><a name="[428]"></a>tlsGetRecordType</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tls_record.o(i.tlsGetRecordType))
<BR><BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsEncryptAeadRecord
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsAppendMessageAuthCode
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsDecryptAeadRecord
</UL>

<P><STRONG><a name="[410]"></a>tlsGetVersionName</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, tls_misc.o(i.tlsGetVersionName))
<BR><BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseServerSupportedVersionsExtension
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseHelloRetryRequest
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHello
</UL>

<P><STRONG><a name="[42b]"></a>tlsIncSequenceNumber</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, tls_record.o(i.tlsIncSequenceNumber))
<BR><BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsEncryptAeadRecord
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsAppendMessageAuthCode
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsDecryptCbcRecord
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsDecryptAeadRecord
</UL>

<P><STRONG><a name="[45d]"></a>tlsInit</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, tls.o(i.tlsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = tlsInit &rArr; tls13IsGroupSupported &rArr; tls13IsEcdheGroupSupported &rArr; tlsGetCurveInfo &rArr; ecGetCurveInfo &rArr; oidComp
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecInitPublicKey
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecInitDomainParameters
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhInit
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13IsGroupSupported
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaInitPublicKey
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketOpenConnection
</UL>

<P><STRONG><a name="[3ff]"></a>tlsInitEncryptionEngine</STRONG> (Thumb, 400 bytes, Stack size 56 bytes, tls_misc.o(i.tlsInitEncryptionEngine))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = tlsInitEncryptionEngine &rArr; tls13HkdfExpandLabel &rArr; hkdfExpand &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcmInit
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13HkdfExpandLabel
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13GenerateServerAppTrafficKeys
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13GenerateHandshakeTrafficKeys
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13GenerateClientAppTrafficKeys
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13SendKeyUpdate
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseKeyUpdate
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendChangeCipherSpec
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseChangeCipherSpec
</UL>

<P><STRONG><a name="[45e]"></a>tlsInitHandshake</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, tls_handshake.o(i.tlsInitHandshake))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tlsInitHandshake &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsPerformClientHandshake
</UL>

<P><STRONG><a name="[45f]"></a>tlsInitSessionState</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tls.o(i.tlsInitSessionState))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tlsInitSessionState &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketOpen
</UL>

<P><STRONG><a name="[415]"></a>tlsInitTranscriptHash</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, tls_transcript_hash.o(i.tlsInitTranscriptHash))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = tlsInitTranscriptHash &rArr; tlsUpdateTranscriptHash &rArr; md5Update &rArr; md5ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5Init
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsUpdateTranscriptHash
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseHelloRetryRequest
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHello
</UL>

<P><STRONG><a name="[461]"></a>tlsIsCertificateAcceptable</STRONG> (Thumb, 672 bytes, Stack size 48 bytes, tls_certificate.o(i.tlsIsCertificateAcceptable))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = tlsIsCertificateAcceptable &rArr; pemImportCertificate &rArr; pemDecodeFile &rArr; pemFindTag &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509CompareName
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseCertificate
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemImportCertificate
</UL>
<BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificateRequest
</UL>

<P><STRONG><a name="[441]"></a>tlsIsCipherSuiteAcceptable</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, tls_cipher_suites.o(i.tlsIsCipherSuiteAcceptable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tlsIsCipherSuiteAcceptable
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSelectCipherSuite
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatCipherSuites
</UL>

<P><STRONG><a name="[464]"></a>tlsParseAlert</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, tls_common.o(i.tlsParseAlert))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = tlsParseAlert &rArr; debugDisplayArray &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugDisplayArray
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsRemoveFromCache
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsRead
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsReceiveHandshakeMessage
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsShutdownEx
</UL>

<P><STRONG><a name="[466]"></a>tlsParseCertificate</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, tls_common.o(i.tlsParseCertificate))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192 + Unknown Stack Size
<LI>Call Chain = tlsParseCertificate &rArr; tlsParseCertificateList &rArr; tlsValidateCertificate &rArr; x509ValidateCertificate &rArr; x509VerifySignature &rArr; x509VerifyEcdsaSignature &rArr; ecdsaVerifySignature &rArr; ecTwinMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificateList
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHandshakeMessage
</UL>

<P><STRONG><a name="[467]"></a>tlsParseCertificateList</STRONG> (Thumb, 538 bytes, Stack size 80 bytes, tls_certificate.o(i.tlsParseCertificateList))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168 + Unknown Stack Size
<LI>Call Chain = tlsParseCertificateList &rArr; tlsValidateCertificate &rArr; x509ValidateCertificate &rArr; x509VerifySignature &rArr; x509VerifyEcdsaSignature &rArr; ecdsaVerifySignature &rArr; ecTwinMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1DumpObject
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ValidateCertificate
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509CheckSubjectName
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509CheckNameConstraints
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseCertificate
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetCurveInfo
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseCertExtensions
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsValidateCertificate
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsReadSubjectPublicKey
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetCertificateType
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsCheckKeyUsage
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificate
</UL>

<P><STRONG><a name="[46e]"></a>tlsParseCertificateRequest</STRONG> (Thumb, 448 bytes, Stack size 120 bytes, tls_client.o(i.tlsParseCertificateRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = tlsParseCertificateRequest &rArr; tlsIsCertificateAcceptable &rArr; pemImportCertificate &rArr; pemDecodeFile &rArr; pemFindTag &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseHelloExtensions
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsCheckHelloExtensions
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSelectSignatureScheme
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsIsCertificateAcceptable
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHandshakeMessage
</UL>

<P><STRONG><a name="[470]"></a>tlsParseCertificateVerify</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, tls_common.o(i.tlsParseCertificateVerify))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = tlsParseCertificateVerify &rArr; tls13VerifySignature &rArr; tlsVerifyEcdsaSignature &rArr; ecdsaVerifySignature &rArr; ecTwinMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifySignature
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls12VerifySignature
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13VerifySignature
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHandshakeMessage
</UL>

<P><STRONG><a name="[472]"></a>tlsParseChangeCipherSpec</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, tls_common.o(i.tlsParseChangeCipherSpec))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = tlsParseChangeCipherSpec &rArr; tlsInitEncryptionEngine &rArr; tls13HkdfExpandLabel &rArr; hkdfExpand &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsInitEncryptionEngine
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFreeEncryptionEngine
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsReceiveHandshakeMessage
</UL>

<P><STRONG><a name="[473]"></a>tlsParseFinished</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, tls_common.o(i.tlsParseFinished))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = tlsParseFinished &rArr; tlsComputeVerifyData &rArr; tls13HkdfExpandLabel &rArr; hkdfExpand &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsComputeVerifyData
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHandshakeMessage
</UL>

<P><STRONG><a name="[474]"></a>tlsParseHandshakeMessage</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, tls_handshake.o(i.tlsParseHandshakeMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232 + Unknown Stack Size
<LI>Call Chain = tlsParseHandshakeMessage &rArr; tlsParseServerHandshakeMessage &rArr; tlsParseCertificate &rArr; tlsParseCertificateList &rArr; tlsValidateCertificate &rArr; x509ValidateCertificate &rArr; x509VerifySignature &rArr; x509VerifyEcdsaSignature &rArr; ecdsaVerifySignature &rArr; ecTwinMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsUpdateTranscriptHash
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHandshakeMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsRead
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsReceiveHandshakeMessage
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsShutdownEx
</UL>

<P><STRONG><a name="[409]"></a>tlsParseHelloExtensions</STRONG> (Thumb, 838 bytes, Stack size 40 bytes, tls_extensions.o(i.tlsParseHelloExtensions))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tlsParseHelloExtensions &rArr; tls13CheckDuplicateKeyShare
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13CheckDuplicateKeyShare
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsCheckDuplicateExtension
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseCertExtensions
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseNewSessionTicket
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseHelloRetryRequest
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseEncryptedExtensions
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHello
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificateRequest
</UL>

<P><STRONG><a name="[476]"></a>tlsParseHelloRequest</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, tls_client.o(i.tlsParseHelloRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = tlsParseHelloRequest &rArr; tlsSendAlert &rArr; tlsWriteProtocolData &rArr; tlsWriteRecord &rArr; tlsEncryptRecord &rArr; tlsEncryptAeadRecord &rArr; chacha20Poly1305Encrypt &rArr; poly1305Final &rArr; poly1305ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendAlert
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHandshakeMessage
</UL>

<P><STRONG><a name="[478]"></a>tlsParseNewSessionTicket</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, tls_client.o(i.tlsParseNewSessionTicket))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = tlsParseNewSessionTicket &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHandshakeMessage
</UL>

<P><STRONG><a name="[47e]"></a>tlsParseServerEcPointFormatsExtension</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, tls_client_extensions.o(i.tlsParseServerEcPointFormatsExtension))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tlsParseServerEcPointFormatsExtension
</UL>
<BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHello
</UL>

<P><STRONG><a name="[47f]"></a>tlsParseServerEmsExtension</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, tls_client_extensions.o(i.tlsParseServerEmsExtension))
<BR><BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHello
</UL>

<P><STRONG><a name="[475]"></a>tlsParseServerHandshakeMessage</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, tls_client_fsm.o(i.tlsParseServerHandshakeMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208 + Unknown Stack Size
<LI>Call Chain = tlsParseServerHandshakeMessage &rArr; tlsParseCertificate &rArr; tlsParseCertificateList &rArr; tlsValidateCertificate &rArr; x509ValidateCertificate &rArr; x509VerifySignature &rArr; x509VerifyEcdsaSignature &rArr; ecdsaVerifySignature &rArr; ecTwinMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13IsHelloRetryRequest
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseNewSessionTicket
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseHelloRetryRequest
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseEncryptedExtensions
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseKeyUpdate
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerKeyExchange
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHelloDone
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHello
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseNewSessionTicket
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseHelloRequest
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificateRequest
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseFinished
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificateVerify
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificate
</UL>
<BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseHandshakeMessage
</UL>

<P><STRONG><a name="[479]"></a>tlsParseServerHello</STRONG> (Thumb, 674 bytes, Stack size 112 bytes, tls_client.o(i.tlsParseServerHello))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = tlsParseServerHello &rArr; tlsFormatInitialClientHello &rArr; tlsFormatClientHello &rArr; tls13ComputePskBinders &rArr; tls13ComputePskBinder &rArr; tls13DeriveSecret &rArr; tls13HkdfExpandLabel &rArr; hkdfExpand &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugDisplayArray
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseHelloExtensions
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsCheckHelloExtensions
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateSessionKeys
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseServerPreSharedKeyExtension
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseServerKeyShareExtension
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSelectCipherSuite
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerSniExtension
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerRecordSizeLimitExtension
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsInitTranscriptHash
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetVersionName
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetCipherSuiteName
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFreeTranscriptHash
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatInitialClientHello
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerEmsExtension
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerEcPointFormatsExtension
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSelectClientVersion
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsResumeSession
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHandshakeMessage
</UL>

<P><STRONG><a name="[47b]"></a>tlsParseServerHelloDone</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, tls_client.o(i.tlsParseServerHelloDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = tlsParseServerHelloDone &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHandshakeMessage
</UL>

<P><STRONG><a name="[47a]"></a>tlsParseServerKeyExchange</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, tls_client.o(i.tlsParseServerKeyExchange))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = tlsParseServerKeyExchange &rArr; tls12VerifyServerKeySignature &rArr; tlsVerifyEcdsaSignature &rArr; ecdsaVerifySignature &rArr; ecTwinMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifyServerKeySignature
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerKeyParams
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls12VerifyServerKeySignature
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHandshakeMessage
</UL>

<P><STRONG><a name="[480]"></a>tlsParseServerKeyParams</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, tls_client_misc.o(i.tlsParseServerKeyParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = tlsParseServerKeyParams &rArr; ecdhCheckPublicKey &rArr; ecMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecLoadDomainParameters
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhCheckPublicKey
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetCurveInfo
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsReadEcPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerKeyExchange
</UL>

<P><STRONG><a name="[40e]"></a>tlsParseServerRecordSizeLimitExtension</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, tls_client_extensions.o(i.tlsParseServerRecordSizeLimitExtension))
<BR><BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseEncryptedExtensions
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHello
</UL>

<P><STRONG><a name="[40d]"></a>tlsParseServerSniExtension</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tls_client_extensions.o(i.tlsParseServerSniExtension))
<BR><BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseEncryptedExtensions
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHello
</UL>

<P><STRONG><a name="[483]"></a>tlsPerformClientHandshake</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, tls_client_fsm.o(i.tlsPerformClientHandshake))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272 + Unknown Stack Size
<LI>Call Chain = tlsPerformClientHandshake &rArr; tlsReceiveHandshakeMessage &rArr; tlsParseHandshakeMessage &rArr; tlsParseServerHandshakeMessage &rArr; tlsParseCertificate &rArr; tlsParseCertificateList &rArr; tlsValidateCertificate &rArr; x509ValidateCertificate &rArr; x509VerifySignature &rArr; x509VerifyEcdsaSignature &rArr; ecdsaVerifySignature &rArr; ecTwinMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13GenerateServerAppTrafficKeys
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13GenerateHandshakeTrafficKeys
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13GenerateClientAppTrafficKeys
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsWriteProtocolData
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsProcessError
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13SendEndOfEarlyData
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13SendKeyUpdate
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendClientKeyExchange
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendClientHello
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendFinished
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendChangeCipherSpec
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendCertificateVerify
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendCertificate
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsReceiveHandshakeMessage
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsInitHandshake
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsPerformHandshake
</UL>

<P><STRONG><a name="[430]"></a>tlsPerformHandshake</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tls_handshake.o(i.tlsPerformHandshake))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272 + Unknown Stack Size
<LI>Call Chain = tlsPerformHandshake &rArr; tlsPerformClientHandshake &rArr; tlsReceiveHandshakeMessage &rArr; tlsParseHandshakeMessage &rArr; tlsParseServerHandshakeMessage &rArr; tlsParseCertificate &rArr; tlsParseCertificateList &rArr; tlsValidateCertificate &rArr; x509ValidateCertificate &rArr; x509VerifySignature &rArr; x509VerifyEcdsaSignature &rArr; ecdsaVerifySignature &rArr; ecTwinMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsPerformClientHandshake
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsConnect
</UL>

<P><STRONG><a name="[42e]"></a>tlsPrf</STRONG> (Thumb, 382 bytes, Stack size 80 bytes, tls_key_material.o(i.tlsPrf))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = tlsPrf &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacUpdate
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacInit
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacFinal
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateMasterSecret
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateKeyBlock
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateExtendedMasterSecret
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsComputeVerifyData
</UL>

<P><STRONG><a name="[48d]"></a>tlsProcessError</STRONG> (Thumb, 194 bytes, Stack size 0 bytes, tls_misc.o(i.tlsProcessError))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = tlsProcessError &rArr; tlsSendAlert &rArr; tlsWriteProtocolData &rArr; tlsWriteRecord &rArr; tlsEncryptRecord &rArr; tlsEncryptAeadRecord &rArr; chacha20Poly1305Encrypt &rArr; poly1305Final &rArr; poly1305ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendAlert
</UL>
<BR>[Called By]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsWrite
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsRead
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsPerformClientHandshake
</UL>

<P><STRONG><a name="[48e]"></a>tlsProcessRecord</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, tls_record.o(i.tlsProcessRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = tlsProcessRecord &rArr; tlsDecryptRecord &rArr; tlsDecryptAeadRecord &rArr; chacha20Poly1305Decrypt &rArr; poly1305Final &rArr; poly1305ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsDecryptRecord
</UL>
<BR>[Called By]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsReadRecord
</UL>

<P><STRONG><a name="[48f]"></a>tlsRead</STRONG> (Thumb, 408 bytes, Stack size 64 bytes, tls.o(i.tlsRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336 + Unknown Stack Size
<LI>Call Chain = tlsRead &rArr; tlsConnect &rArr; tlsPerformHandshake &rArr; tlsPerformClientHandshake &rArr; tlsReceiveHandshakeMessage &rArr; tlsParseHandshakeMessage &rArr; tlsParseServerHandshakeMessage &rArr; tlsParseCertificate &rArr; tlsParseCertificateList &rArr; tlsValidateCertificate &rArr; x509ValidateCertificate &rArr; x509VerifySignature &rArr; x509VerifyEcdsaSignature &rArr; ecdsaVerifySignature &rArr; ecTwinMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsConnect
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsReadProtocolData
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsProcessError
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseAlert
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseHandshakeMessage
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketReceiveData
</UL>

<P><STRONG><a name="[482]"></a>tlsReadEcPoint</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, tls_misc.o(i.tlsReadEcPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = tlsReadEcPoint &rArr; ecImport &rArr; mpiImport &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecImport
</UL>
<BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerKeyParams
</UL>

<P><STRONG><a name="[490]"></a>tlsReadProtocolData</STRONG> (Thumb, 290 bytes, Stack size 48 bytes, tls_record.o(i.tlsReadProtocolData))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = tlsReadProtocolData &rArr; tlsReadRecord &rArr; tlsProcessRecord &rArr; tlsDecryptRecord &rArr; tlsDecryptAeadRecord &rArr; chacha20Poly1305Decrypt &rArr; poly1305Final &rArr; poly1305ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsReadRecord
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsRead
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsReceiveHandshakeMessage
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsShutdownEx
</UL>

<P><STRONG><a name="[491]"></a>tlsReadRecord</STRONG> (Thumb, 340 bytes, Stack size 48 bytes, tls_record.o(i.tlsReadRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = tlsReadRecord &rArr; tlsProcessRecord &rArr; tlsDecryptRecord &rArr; tlsDecryptAeadRecord &rArr; chacha20Poly1305Decrypt &rArr; poly1305Final &rArr; poly1305ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsProcessRecord
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsReadProtocolData
</UL>

<P><STRONG><a name="[469]"></a>tlsReadSubjectPublicKey</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, tls_certificate.o(i.tlsReadSubjectPublicKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tlsReadSubjectPublicKey &rArr; ecImport &rArr; mpiImport &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecLoadDomainParameters
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecImport
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oidComp
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetBitLength
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509GetCurveInfo
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ImportRsaPublicKey
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificateList
</UL>

<P><STRONG><a name="[48c]"></a>tlsReceiveHandshakeMessage</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, tls_handshake.o(i.tlsReceiveHandshakeMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256 + Unknown Stack Size
<LI>Call Chain = tlsReceiveHandshakeMessage &rArr; tlsParseHandshakeMessage &rArr; tlsParseServerHandshakeMessage &rArr; tlsParseCertificate &rArr; tlsParseCertificateList &rArr; tlsValidateCertificate &rArr; x509ValidateCertificate &rArr; x509VerifySignature &rArr; x509VerifyEcdsaSignature &rArr; ecdsaVerifySignature &rArr; ecTwinMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsReadProtocolData
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseChangeCipherSpec
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseAlert
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseHandshakeMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsPerformClientHandshake
</UL>

<P><STRONG><a name="[465]"></a>tlsRemoveFromCache</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, tls_cache.o(i.tlsRemoveFromCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = tlsRemoveFromCache &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFreeSessionState
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendAlert
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseAlert
</UL>

<P><STRONG><a name="[494]"></a>tlsRestoreSessionId</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, tls_misc.o(i.tlsRestoreSessionId))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tlsRestoreSessionId &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsRestoreSessionState
</UL>

<P><STRONG><a name="[495]"></a>tlsRestoreSessionState</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, tls.o(i.tlsRestoreSessionState))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tlsRestoreSessionState &rArr; tls13RestoreSessionTicket &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13RestoreSessionTicket
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsRestoreSessionTicket
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsRestoreSessionId
</UL>
<BR>[Called By]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketOpenConnection
</UL>

<P><STRONG><a name="[496]"></a>tlsRestoreSessionTicket</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, tls_misc.o(i.tlsRestoreSessionTicket))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tlsRestoreSessionTicket &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsRestoreSessionState
</UL>

<P><STRONG><a name="[47d]"></a>tlsResumeSession</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, tls_client_misc.o(i.tlsResumeSession))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tlsResumeSession &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHello
</UL>

<P><STRONG><a name="[497]"></a>tlsSaveSessionId</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, tls_misc.o(i.tlsSaveSessionId))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tlsSaveSessionId &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSaveSessionState
</UL>

<P><STRONG><a name="[498]"></a>tlsSaveSessionState</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, tls.o(i.tlsSaveSessionState))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = tlsSaveSessionState &rArr; tls13SaveSessionTicket &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFreeSessionState
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13SaveSessionTicket
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSaveSessionTicket
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSaveSessionId
</UL>
<BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketCloseConnection
</UL>

<P><STRONG><a name="[499]"></a>tlsSaveSessionTicket</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, tls_misc.o(i.tlsSaveSessionTicket))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tlsSaveSessionTicket &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSaveSessionState
</UL>

<P><STRONG><a name="[3fa]"></a>tlsSelectCipherSuite</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, tls_misc.o(i.tlsSelectCipherSuite))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tlsSelectCipherSuite &rArr; tlsIsCipherSuiteAcceptable
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsIsCipherSuiteAcceptable
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetNumSupportedCipherSuites
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13FormatClientPreSharedKeyExtension
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseHelloRetryRequest
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHello
</UL>

<P><STRONG><a name="[47c]"></a>tlsSelectClientVersion</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, tls_client_misc.o(i.tlsSelectClientVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tlsSelectClientVersion &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSelectVersion
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerHello
</UL>

<P><STRONG><a name="[46f]"></a>tlsSelectSignatureScheme</STRONG> (Thumb, 482 bytes, Stack size 40 bytes, tls_signature.o(i.tlsSelectSignatureScheme))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tlsSelectSignatureScheme
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGetHashAlgo
</UL>
<BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificateRequest
</UL>

<P><STRONG><a name="[41e]"></a>tlsSelectVersion</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tls_misc.o(i.tlsSelectVersion))
<BR><BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13ParseServerSupportedVersionsExtension
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSelectClientVersion
</UL>

<P><STRONG><a name="[477]"></a>tlsSendAlert</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, tls_common.o(i.tlsSendAlert))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = tlsSendAlert &rArr; tlsWriteProtocolData &rArr; tlsWriteRecord &rArr; tlsEncryptRecord &rArr; tlsEncryptAeadRecord &rArr; chacha20Poly1305Encrypt &rArr; poly1305Final &rArr; poly1305ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debugDisplayArray
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsRemoveFromCache
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsWriteProtocolData
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatAlert
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsProcessError
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseHelloRequest
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsShutdownEx
</UL>

<P><STRONG><a name="[486]"></a>tlsSendCertificate</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, tls_common.o(i.tlsSendCertificate))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = tlsSendCertificate &rArr; tlsSendHandshakeMessage &rArr; tlsWriteProtocolData &rArr; tlsWriteRecord &rArr; tlsEncryptRecord &rArr; tlsEncryptAeadRecord &rArr; chacha20Poly1305Encrypt &rArr; poly1305Final &rArr; poly1305ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendHandshakeMessage
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatCertificate
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsPerformClientHandshake
</UL>

<P><STRONG><a name="[487]"></a>tlsSendCertificateVerify</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, tls_common.o(i.tlsSendCertificateVerify))
<BR><BR>[Stack]<UL><LI>Max Depth = 936 + Unknown Stack Size
<LI>Call Chain = tlsSendCertificateVerify &rArr; tlsFormatCertificateVerify &rArr; tls12GenerateSignature &rArr; tlsGenerateEcdsaSignature &rArr; ecdsaGenerateSignature &rArr; ecMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendHandshakeMessage
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatCertificateVerify
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsPerformClientHandshake
</UL>

<P><STRONG><a name="[488]"></a>tlsSendChangeCipherSpec</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, tls_common.o(i.tlsSendChangeCipherSpec))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = tlsSendChangeCipherSpec &rArr; tlsWriteProtocolData &rArr; tlsWriteRecord &rArr; tlsEncryptRecord &rArr; tlsEncryptAeadRecord &rArr; chacha20Poly1305Encrypt &rArr; poly1305Final &rArr; poly1305ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsInitEncryptionEngine
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFreeEncryptionEngine
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsWriteProtocolData
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsPerformClientHandshake
</UL>

<P><STRONG><a name="[485]"></a>tlsSendClientHello</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, tls_client.o(i.tlsSendClientHello))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = tlsSendClientHello &rArr; tlsSendHandshakeMessage &rArr; tlsWriteProtocolData &rArr; tlsWriteRecord &rArr; tlsEncryptRecord &rArr; tlsEncryptAeadRecord &rArr; chacha20Poly1305Encrypt &rArr; poly1305Final &rArr; poly1305ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFreeEncryptionEngine
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13IsGroupSupported
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13GenerateKeyShare
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateSessionId
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateRandomValue
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendHandshakeMessage
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatClientHello
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsPerformClientHandshake
</UL>

<P><STRONG><a name="[48a]"></a>tlsSendClientKeyExchange</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, tls_client.o(i.tlsSendClientKeyExchange))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = tlsSendClientKeyExchange &rArr; tlsSendHandshakeMessage &rArr; tlsWriteProtocolData &rArr; tlsWriteRecord &rArr; tlsEncryptRecord &rArr; tlsEncryptAeadRecord &rArr; chacha20Poly1305Encrypt &rArr; poly1305Final &rArr; poly1305ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsGenerateSessionKeys
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendHandshakeMessage
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatClientKeyExchange
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsPerformClientHandshake
</UL>

<P><STRONG><a name="[489]"></a>tlsSendFinished</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, tls_common.o(i.tlsSendFinished))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = tlsSendFinished &rArr; tlsSendHandshakeMessage &rArr; tlsWriteProtocolData &rArr; tlsWriteRecord &rArr; tlsEncryptRecord &rArr; tlsEncryptAeadRecord &rArr; chacha20Poly1305Encrypt &rArr; poly1305Final &rArr; poly1305ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsComputeVerifyData
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendHandshakeMessage
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatFinished
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsPerformClientHandshake
</UL>

<P><STRONG><a name="[422]"></a>tlsSendHandshakeMessage</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, tls_handshake.o(i.tlsSendHandshakeMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = tlsSendHandshakeMessage &rArr; tlsWriteProtocolData &rArr; tlsWriteRecord &rArr; tlsEncryptRecord &rArr; tlsEncryptAeadRecord &rArr; chacha20Poly1305Encrypt &rArr; poly1305Final &rArr; poly1305ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsUpdateTranscriptHash
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsWriteProtocolData
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13SendKeyUpdate
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendClientKeyExchange
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendClientHello
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendFinished
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendCertificateVerify
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendCertificate
</UL>

<P><STRONG><a name="[4c1]"></a>tlsSetConnectionEnd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tls.o(i.tlsSetConnectionEnd))
<BR><BR>[Called By]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketOpenConnection
</UL>

<P><STRONG><a name="[42a]"></a>tlsSetRecordLength</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tls_record.o(i.tlsSetRecordLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tlsSetRecordLength
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsEncryptCbcRecord
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsEncryptAeadRecord
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsAppendMessageAuthCode
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsDecryptCbcRecord
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsDecryptAeadRecord
</UL>

<P><STRONG><a name="[429]"></a>tlsSetRecordType</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tls_record.o(i.tlsSetRecordType))
<BR><BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsEncryptAeadRecord
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsAppendMessageAuthCode
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsDecryptAeadRecord
</UL>

<P><STRONG><a name="[4c2]"></a>tlsSetSocketCallbacks</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tls.o(i.tlsSetSocketCallbacks))
<BR><BR>[Called By]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketOpenConnection
</UL>

<P><STRONG><a name="[4d1]"></a>tlsShutdown</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tls.o(i.tlsShutdown))
<BR><BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketShutdownConnection
</UL>

<P><STRONG><a name="[49d]"></a>tlsShutdownEx</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, tls.o(i.tlsShutdownEx), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsWriteProtocolData
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsReadProtocolData
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendAlert
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseAlert
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseHandshakeMessage
</UL>

<P><STRONG><a name="[460]"></a>tlsUpdateTranscriptHash</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, tls_transcript_hash.o(i.tlsUpdateTranscriptHash))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = tlsUpdateTranscriptHash &rArr; md5Update &rArr; md5ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1Update
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5Update
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsInitTranscriptHash
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendHandshakeMessage
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseHandshakeMessage
</UL>

<P><STRONG><a name="[46a]"></a>tlsValidateCertificate</STRONG> (Thumb, 248 bytes, Stack size 64 bytes, tls_certificate.o(i.tlsValidateCertificate))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = tlsValidateCertificate &rArr; x509ValidateCertificate &rArr; x509VerifySignature &rArr; x509VerifyEcdsaSignature &rArr; ecdsaVerifySignature &rArr; ecTwinMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ValidateCertificate
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509CheckNameConstraints
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseCertificate
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemImportCertificate
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificateList
</UL>

<P><STRONG><a name="[3eb]"></a>tlsVerifyEcdsaSignature</STRONG> (Thumb, 76 bytes, Stack size 56 bytes, tls_signature.o(i.tlsVerifyEcdsaSignature))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = tlsVerifyEcdsaSignature &rArr; ecdsaVerifySignature &rArr; ecTwinMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaVerifySignature
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaReadSignature
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaInitSignature
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaFreeSignature
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifySignature
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls12VerifySignature
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls13VerifySignature
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifyServerKeySignature
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls12VerifyServerKeySignature
</UL>

<P><STRONG><a name="[435]"></a>tlsVerifyMac</STRONG> (Thumb, 504 bytes, Stack size 176 bytes, tls_record_decryption.o(i.tlsVerifyMac))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = tlsVerifyMac &rArr; hmacInit
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt64
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacFinalRaw
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacUpdate
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacInit
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmacFinal
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsDecryptCbcRecord
</UL>

<P><STRONG><a name="[433]"></a>tlsVerifyPadding</STRONG> (Thumb, 104 bytes, Stack size 20 bytes, tls_record_decryption.o(i.tlsVerifyPadding))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tlsVerifyPadding
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsDecryptCbcRecord
</UL>

<P><STRONG><a name="[49f]"></a>tlsVerifyRsaEm</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, tls_signature.o(i.tlsVerifyRsaEm))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tlsVerifyRsaEm
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifyRsaSignature
</UL>

<P><STRONG><a name="[49e]"></a>tlsVerifyRsaSignature</STRONG> (Thumb, 142 bytes, Stack size 56 bytes, tls_signature.o(i.tlsVerifyRsaSignature))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = tlsVerifyRsaSignature &rArr; rsavp1 &rArr; rsaep &rArr; mpiExpModFast &rArr; mpiExpMod &rArr; mpiMontgomeryRed &rArr; mpiMontgomeryMul &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiInit
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiImport
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetByteLength
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiFree
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiExport
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsavp1
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifyRsaEm
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifySignature
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifyServerKeySignature
</UL>

<P><STRONG><a name="[481]"></a>tlsVerifyServerKeySignature</STRONG> (Thumb, 312 bytes, Stack size 40 bytes, tls_client_misc.o(i.tlsVerifyServerKeySignature))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = tlsVerifyServerKeySignature &rArr; tlsVerifyEcdsaSignature &rArr; ecdsaVerifySignature &rArr; ecTwinMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1Update
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1Final
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5Update
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5Final
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifyRsaSignature
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifyEcdsaSignature
</UL>
<BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseServerKeyExchange
</UL>

<P><STRONG><a name="[471]"></a>tlsVerifySignature</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, tls_signature.o(i.tlsVerifySignature))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = tlsVerifySignature &rArr; tlsVerifyEcdsaSignature &rArr; ecdsaVerifySignature &rArr; ecTwinMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFinalizeTranscriptHash
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifyRsaSignature
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsVerifyEcdsaSignature
</UL>
<BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificateVerify
</UL>

<P><STRONG><a name="[4a0]"></a>tlsWrite</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, tls.o(i.tlsWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312 + Unknown Stack Size
<LI>Call Chain = tlsWrite &rArr; tlsConnect &rArr; tlsPerformHandshake &rArr; tlsPerformClientHandshake &rArr; tlsReceiveHandshakeMessage &rArr; tlsParseHandshakeMessage &rArr; tlsParseServerHandshakeMessage &rArr; tlsParseCertificate &rArr; tlsParseCertificateList &rArr; tlsValidateCertificate &rArr; x509ValidateCertificate &rArr; x509VerifySignature &rArr; x509VerifyEcdsaSignature &rArr; ecdsaVerifySignature &rArr; ecTwinMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsConnect
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsWriteProtocolData
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsProcessError
</UL>
<BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketSendData
</UL>

<P><STRONG><a name="[450]"></a>tlsWriteEcPoint</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tls_misc.o(i.tlsWriteEcPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tlsWriteEcPoint &rArr; ecExport &rArr; mpiExport
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecExport
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatClientKeyParams
</UL>

<P><STRONG><a name="[484]"></a>tlsWriteProtocolData</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, tls_record.o(i.tlsWriteProtocolData))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = tlsWriteProtocolData &rArr; tlsWriteRecord &rArr; tlsEncryptRecord &rArr; tlsEncryptAeadRecord &rArr; chacha20Poly1305Encrypt &rArr; poly1305Final &rArr; poly1305ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsWriteRecord
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsWrite
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendAlert
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendHandshakeMessage
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSendChangeCipherSpec
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsPerformClientHandshake
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsShutdownEx
</UL>

<P><STRONG><a name="[4a1]"></a>tlsWriteRecord</STRONG> (Thumb, 208 bytes, Stack size 64 bytes, tls_record.o(i.tlsWriteRecord))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = tlsWriteRecord &rArr; tlsEncryptRecord &rArr; tlsEncryptAeadRecord &rArr; chacha20Poly1305Encrypt &rArr; poly1305Final &rArr; poly1305ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsEncryptRecord
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsWriteProtocolData
</UL>

<P><STRONG><a name="[305]"></a>trngGetRandomData</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, stm32f4xx_crypto_trng.o(i.trngGetRandomData))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = trngGetRandomData &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_GenerateRandomNumber
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3aa]"></a>trngInit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_crypto_trng.o(i.trngInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = trngInit &rArr; HAL_RNG_Init &rArr; HAL_RNG_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_DeInit
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xxCryptoInit
</UL>

<P><STRONG><a name="[233]"></a>udpAllocBuffer</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, udp.o(i.udpAllocBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = udpAllocBuffer &rArr; ipAllocBuffer &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipAllocBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagram
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrSendResponse
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendResponse
</UL>

<P><STRONG><a name="[252]"></a>udpAttachRxCallback</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, udp.o(i.udpAttachRxCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = udpAttachRxCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsInit
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrResponderInit
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
</UL>

<P><STRONG><a name="[24a]"></a>udpDetachRxCallback</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, udp.o(i.udpDetachRxCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = udpDetachRxCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsProcessResponse
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsDeleteEntry
</UL>

<P><STRONG><a name="[251]"></a>udpGetDynamicPort</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, udp.o(i.udpGetDynamicPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = udpGetDynamicPort &rArr; netGetRand &rArr; netGetRandBit
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netGetRand
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketAllocate
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsResolve
</UL>

<P><STRONG><a name="[33a]"></a>udpInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, udp.o(i.udpInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = udpInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[4a2]"></a>udpInvokeRxCallback</STRONG> (Thumb, 88 bytes, Stack size 64 bytes, udp.o(i.udpInvokeRxCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = udpInvokeRxCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
</UL>

<P><STRONG><a name="[2ef]"></a>udpProcessDatagram</STRONG> (Thumb, 402 bytes, Stack size 64 bytes, udp.o(i.udpProcessDatagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = udpProcessDatagram &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAlloc
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferCopy
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpUpdateEvents
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpInvokeRxCallback
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4ProcessDatagram
</UL>

<P><STRONG><a name="[3a3]"></a>udpReceiveDatagram</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, udp.o(i.udpReceiveDatagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = udpReceiveDatagram &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osWaitForEvent
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResetEvent
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferRead
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpUpdateEvents
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceiveEx
</UL>

<P><STRONG><a name="[237]"></a>udpSendBuffer</STRONG> (Thumb, 210 bytes, Stack size 72 bytes, udp.o(i.udpSendBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swapInt16
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferGetLength
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAt
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipv4SelectSourceAddr
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipSendDatagram
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipCalcUpperLayerChecksumEx
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendDatagram
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendQuery
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dnsSendQuery
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendRequest
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDiscover
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpClientSendDecline
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llmnrSendResponse
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbnsSendResponse
</UL>

<P><STRONG><a name="[3a6]"></a>udpSendDatagram</STRONG> (Thumb, 170 bytes, Stack size 72 bytes, udp.o(i.udpSendDatagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = udpSendDatagram &rArr; udpSendBuffer &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferAppend
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netBufferFree
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipIsMulticastAddr
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpSendBuffer
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpAllocBuffer
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSendTo
</UL>

<P><STRONG><a name="[33f]"></a>udpUpdateEvents</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, udp.o(i.udpUpdateEvents))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = udpUpdateEvents &rArr; osSetEvent &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketRegisterEvents
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netProcessLinkChange
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpReceiveDatagram
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udpProcessDatagram
</UL>

<P><STRONG><a name="[36e]"></a>uxListRemove</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[373]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[379]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[370]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[36f]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[372]"></a>vPortEnterCritical</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[374]"></a>vPortExitCritical</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[34f]"></a>vPortFree</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, heap_3.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
</UL>

<P><STRONG><a name="[500]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[4a3]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, port.o(i.vPortValidateInterruptPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>

<P><STRONG><a name="[34e]"></a>vQueueDelete</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, queue.o(i.vQueueDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueUnregisterQueue
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDeleteEvent
</UL>

<P><STRONG><a name="[4a5]"></a>vQueueUnregisterQueue</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, queue.o(i.vQueueUnregisterQueue))
<BR><BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>

<P><STRONG><a name="[34d]"></a>vTaskDelay</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelayTask
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[504]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[37e]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[4a6]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[4a7]"></a>vTaskPriorityDisinheritAfterTimeout</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, tasks.o(i.vTaskPriorityDisinheritAfterTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityDisinheritAfterTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[351]"></a>vTaskStartScheduler</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = vTaskStartScheduler &rArr; xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[357]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[dd]"></a>vTaskSwitchContext</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[4a9]"></a>webSocketChangeState</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, web_socket_misc.o(i.webSocketChangeState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = webSocketChangeState
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>
<BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketConnect
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketClose
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketVerifyServerHandshake
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketVerifyClientHandshake
</UL>

<P><STRONG><a name="[4c6]"></a>webSocketCheckStatusCode</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, web_socket_misc.o(i.webSocketCheckStatusCode))
<BR><BR>[Called By]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketParseFrameHeader
</UL>

<P><STRONG><a name="[4c7]"></a>webSocketCheckUtf8Stream</STRONG> (Thumb, 274 bytes, Stack size 20 bytes, web_socket_misc.o(i.webSocketCheckUtf8Stream))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = webSocketCheckUtf8Stream
</UL>
<BR>[Called By]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketParseFrameHeader
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketReceiveEx
</UL>

<P><STRONG><a name="[1b5]"></a>webSocketClient</STRONG> (Thumb, 590 bytes, Stack size 320 bytes, main.o(i.webSocketClient))
<BR><BR>[Stack]<UL><LI>Max Depth = 1824 + Unknown Stack Size
<LI>Call Chain = webSocketClient &rArr; webSocketShutdown &rArr; webSocketReceive &rArr; webSocketReceiveEx &rArr; webSocketReceiveData &rArr; tlsRead &rArr; tlsConnect &rArr; tlsPerformHandshake &rArr; tlsPerformClientHandshake &rArr; tlsReceiveHandshakeMessage &rArr; tlsParseHandshakeMessage &rArr; tlsParseServerHandshakeMessage &rArr; tlsParseCertificate &rArr; tlsParseCertificateList &rArr; tlsValidateCertificate &rArr; x509ValidateCertificate &rArr; x509VerifySignature &rArr; x509VerifyEcdsaSignature &rArr; ecdsaVerifySignature &rArr; ecTwinMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketShutdown
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketSetTimeout
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketSetHost
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketSend
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketReceive
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketOpen
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketIsRxReady
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketConnect
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketClose
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketPoll
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelayTask
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHostByName
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask03
</UL>

<P><STRONG><a name="[84]"></a>webSocketClientRngCallback</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i.webSocketClientRngCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = webSocketClientRngCallback &rArr; yarrowRead &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[4b2]"></a>webSocketClose</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, web_socket.o(i.webSocketClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = webSocketClose &rArr; webSocketCloseConnection &rArr; socketClose &rArr; tcpAbort &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketCloseConnection
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketChangeState
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFreeSessionState
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketClient
</UL>

<P><STRONG><a name="[4b4]"></a>webSocketCloseConnection</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, web_socket_transport.o(i.webSocketCloseConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = webSocketCloseConnection &rArr; socketClose &rArr; tcpAbort &rArr; tcpSendResetSegment &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketClose
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSaveSessionState
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFree
</UL>
<BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketConnect
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketClose
</UL>

<P><STRONG><a name="[4ad]"></a>webSocketConnect</STRONG> (Thumb, 340 bytes, Stack size 48 bytes, web_socket.o(i.webSocketConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 1448 + Unknown Stack Size
<LI>Call Chain = webSocketConnect &rArr; webSocketParseHandshake &rArr; webSocketReceiveData &rArr; tlsRead &rArr; tlsConnect &rArr; tlsPerformHandshake &rArr; tlsPerformClientHandshake &rArr; tlsReceiveHandshakeMessage &rArr; tlsParseHandshakeMessage &rArr; tlsParseServerHandshakeMessage &rArr; tlsParseCertificate &rArr; tlsParseCertificateList &rArr; tlsValidateCertificate &rArr; x509ValidateCertificate &rArr; x509VerifySignature &rArr; x509VerifyEcdsaSignature &rArr; ecdsaVerifySignature &rArr; ecTwinMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strSafeCopy
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketSendData
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketReceiveData
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketParseHandshake
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketOpenConnection
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketGenerateClientKey
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketFormatClientHandshake
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketEstablishConnection
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketCloseConnection
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketClient
</UL>

<P><STRONG><a name="[4bc]"></a>webSocketDecodePercentEncodedString</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, web_socket_misc.o(i.webSocketDecodePercentEncodedString))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = webSocketDecodePercentEncodedString &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketParseRequestLine
</UL>

<P><STRONG><a name="[4b6]"></a>webSocketEstablishConnection</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, web_socket_transport.o(i.webSocketEstablishConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280 + Unknown Stack Size
<LI>Call Chain = webSocketEstablishConnection &rArr; tlsConnect &rArr; tlsPerformHandshake &rArr; tlsPerformClientHandshake &rArr; tlsReceiveHandshakeMessage &rArr; tlsParseHandshakeMessage &rArr; tlsParseServerHandshakeMessage &rArr; tlsParseCertificate &rArr; tlsParseCertificateList &rArr; tlsValidateCertificate &rArr; x509ValidateCertificate &rArr; x509VerifySignature &rArr; x509VerifyEcdsaSignature &rArr; ecdsaVerifySignature &rArr; ecTwinMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketConnect
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsConnect
</UL>
<BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketConnect
</UL>

<P><STRONG><a name="[4b8]"></a>webSocketFormatClientHandshake</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, web_socket_misc.o(i.webSocketFormatClientHandshake))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = webSocketFormatClientHandshake &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketConnect
</UL>

<P><STRONG><a name="[4bd]"></a>webSocketFormatCloseFrame</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, web_socket_frame.o(i.webSocketFormatCloseFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = webSocketFormatCloseFrame &rArr; webSocketFormatFrameHeader
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketFormatFrameHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketShutdown
</UL>

<P><STRONG><a name="[4be]"></a>webSocketFormatFrameHeader</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, web_socket_frame.o(i.webSocketFormatFrameHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = webSocketFormatFrameHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketFormatCloseFrame
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketSendEx
</UL>

<P><STRONG><a name="[4b7]"></a>webSocketGenerateClientKey</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, web_socket_misc.o(i.webSocketGenerateClientKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = webSocketGenerateClientKey &rArr; base64Encode
</UL>
<BR>[Calls]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64Encode
</UL>
<BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketConnect
</UL>

<P><STRONG><a name="[339]"></a>webSocketInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, web_socket.o(i.webSocketInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = webSocketInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netInit
</UL>

<P><STRONG><a name="[4af]"></a>webSocketIsRxReady</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, web_socket.o(i.webSocketIsRxReady))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketClient
</UL>

<P><STRONG><a name="[4aa]"></a>webSocketOpen</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, web_socket.o(i.webSocketOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = webSocketOpen &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsInitSessionState
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketClient
</UL>

<P><STRONG><a name="[4b5]"></a>webSocketOpenConnection</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, web_socket_transport.o(i.webSocketOpenConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = webSocketOpenConnection &rArr; socketOpen &rArr; socketAllocate &rArr; tcpKillOldestConnection &rArr; tcpDeleteControlBlock &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSetInterface
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketOpen
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSetTimeout
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSetSocketCallbacks
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsSetConnectionEnd
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsRestoreSessionState
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketConnect
</UL>

<P><STRONG><a name="[4c3]"></a>webSocketParseConnectionField</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, web_socket_misc.o(i.webSocketParseConnectionField))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = webSocketParseConnectionField &rArr; strcasecmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strTrimWhitespace
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok_r
</UL>
<BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketParseHeaderField
</UL>

<P><STRONG><a name="[4c5]"></a>webSocketParseFrameHeader</STRONG> (Thumb, 444 bytes, Stack size 32 bytes, web_socket_frame.o(i.webSocketParseFrameHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = webSocketParseFrameHeader &rArr; webSocketCheckUtf8Stream
</UL>
<BR>[Calls]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketCheckStatusCode
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketCheckUtf8Stream
</UL>
<BR>[Called By]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketReceiveEx
</UL>

<P><STRONG><a name="[4ba]"></a>webSocketParseHandshake</STRONG> (Thumb, 428 bytes, Stack size 48 bytes, web_socket_misc.o(i.webSocketParseHandshake))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400 + Unknown Stack Size
<LI>Call Chain = webSocketParseHandshake &rArr; webSocketReceiveData &rArr; tlsRead &rArr; tlsConnect &rArr; tlsPerformHandshake &rArr; tlsPerformClientHandshake &rArr; tlsReceiveHandshakeMessage &rArr; tlsParseHandshakeMessage &rArr; tlsParseServerHandshakeMessage &rArr; tlsParseCertificate &rArr; tlsParseCertificateList &rArr; tlsValidateCertificate &rArr; x509ValidateCertificate &rArr; x509VerifySignature &rArr; x509VerifyEcdsaSignature &rArr; ecdsaVerifySignature &rArr; ecTwinMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketVerifyServerHandshake
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketVerifyClientHandshake
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketParseStatusLine
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketParseRequestLine
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketParseHeaderField
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketReceiveData
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketConnect
</UL>

<P><STRONG><a name="[4cd]"></a>webSocketParseHeaderField</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, web_socket_misc.o(i.webSocketParseHeaderField))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = webSocketParseHeaderField &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strTrimWhitespace
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strSafeCopy
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketParseConnectionField
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketParseHandshake
</UL>

<P><STRONG><a name="[4c9]"></a>webSocketParseRequestLine</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, web_socket_misc.o(i.webSocketParseRequestLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = webSocketParseRequestLine &rArr; webSocketDecodePercentEncodedString &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketDecodePercentEncodedString
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok_r
</UL>
<BR>[Called By]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketParseHandshake
</UL>

<P><STRONG><a name="[4ca]"></a>webSocketParseStatusLine</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, web_socket_misc.o(i.webSocketParseStatusLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = webSocketParseStatusLine &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok_r
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketParseHandshake
</UL>

<P><STRONG><a name="[4b0]"></a>webSocketReceive</STRONG> (Thumb, 22 bytes, Stack size 40 bytes, web_socket.o(i.webSocketReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464 + Unknown Stack Size
<LI>Call Chain = webSocketReceive &rArr; webSocketReceiveEx &rArr; webSocketReceiveData &rArr; tlsRead &rArr; tlsConnect &rArr; tlsPerformHandshake &rArr; tlsPerformClientHandshake &rArr; tlsReceiveHandshakeMessage &rArr; tlsParseHandshakeMessage &rArr; tlsParseServerHandshakeMessage &rArr; tlsParseCertificate &rArr; tlsParseCertificateList &rArr; tlsValidateCertificate &rArr; x509ValidateCertificate &rArr; x509VerifySignature &rArr; x509VerifyEcdsaSignature &rArr; ecdsaVerifySignature &rArr; ecTwinMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketReceiveEx
</UL>
<BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketShutdown
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketClient
</UL>

<P><STRONG><a name="[4bb]"></a>webSocketReceiveData</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, web_socket_transport.o(i.webSocketReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352 + Unknown Stack Size
<LI>Call Chain = webSocketReceiveData &rArr; tlsRead &rArr; tlsConnect &rArr; tlsPerformHandshake &rArr; tlsPerformClientHandshake &rArr; tlsReceiveHandshakeMessage &rArr; tlsParseHandshakeMessage &rArr; tlsParseServerHandshakeMessage &rArr; tlsParseCertificate &rArr; tlsParseCertificateList &rArr; tlsValidateCertificate &rArr; x509ValidateCertificate &rArr; x509VerifySignature &rArr; x509VerifyEcdsaSignature &rArr; ecdsaVerifySignature &rArr; ecTwinMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceive
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsRead
</UL>
<BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketConnect
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketParseHandshake
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketReceiveEx
</UL>

<P><STRONG><a name="[4ce]"></a>webSocketReceiveEx</STRONG> (Thumb, 580 bytes, Stack size 72 bytes, web_socket.o(i.webSocketReceiveEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424 + Unknown Stack Size
<LI>Call Chain = webSocketReceiveEx &rArr; webSocketReceiveData &rArr; tlsRead &rArr; tlsConnect &rArr; tlsPerformHandshake &rArr; tlsPerformClientHandshake &rArr; tlsReceiveHandshakeMessage &rArr; tlsParseHandshakeMessage &rArr; tlsParseServerHandshakeMessage &rArr; tlsParseCertificate &rArr; tlsParseCertificateList &rArr; tlsValidateCertificate &rArr; x509ValidateCertificate &rArr; x509VerifySignature &rArr; x509VerifyEcdsaSignature &rArr; ecdsaVerifySignature &rArr; ecTwinMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketReceiveData
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketParseFrameHeader
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketCheckUtf8Stream
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketReceive
</UL>

<P><STRONG><a name="[312]"></a>webSocketRegisterRandCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, web_socket.o(i.webSocketRegisterRandCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4ae]"></a>webSocketSend</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, web_socket.o(i.webSocketSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416 + Unknown Stack Size
<LI>Call Chain = webSocketSend &rArr; webSocketSendEx &rArr; webSocketSendData &rArr; tlsWrite &rArr; tlsConnect &rArr; tlsPerformHandshake &rArr; tlsPerformClientHandshake &rArr; tlsReceiveHandshakeMessage &rArr; tlsParseHandshakeMessage &rArr; tlsParseServerHandshakeMessage &rArr; tlsParseCertificate &rArr; tlsParseCertificateList &rArr; tlsValidateCertificate &rArr; x509ValidateCertificate &rArr; x509VerifySignature &rArr; x509VerifyEcdsaSignature &rArr; ecdsaVerifySignature &rArr; ecTwinMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketSendEx
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketClient
</UL>

<P><STRONG><a name="[4b9]"></a>webSocketSendData</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, web_socket_transport.o(i.webSocketSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328 + Unknown Stack Size
<LI>Call Chain = webSocketSendData &rArr; tlsWrite &rArr; tlsConnect &rArr; tlsPerformHandshake &rArr; tlsPerformClientHandshake &rArr; tlsReceiveHandshakeMessage &rArr; tlsParseHandshakeMessage &rArr; tlsParseServerHandshakeMessage &rArr; tlsParseCertificate &rArr; tlsParseCertificateList &rArr; tlsValidateCertificate &rArr; x509ValidateCertificate &rArr; x509VerifySignature &rArr; x509VerifyEcdsaSignature &rArr; ecdsaVerifySignature &rArr; ecTwinMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSend
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketShutdown
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketConnect
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketSendEx
</UL>

<P><STRONG><a name="[4cf]"></a>webSocketSendEx</STRONG> (Thumb, 336 bytes, Stack size 64 bytes, web_socket.o(i.webSocketSendEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392 + Unknown Stack Size
<LI>Call Chain = webSocketSendEx &rArr; webSocketSendData &rArr; tlsWrite &rArr; tlsConnect &rArr; tlsPerformHandshake &rArr; tlsPerformClientHandshake &rArr; tlsReceiveHandshakeMessage &rArr; tlsParseHandshakeMessage &rArr; tlsParseServerHandshakeMessage &rArr; tlsParseCertificate &rArr; tlsParseCertificateList &rArr; tlsValidateCertificate &rArr; x509ValidateCertificate &rArr; x509VerifySignature &rArr; x509VerifyEcdsaSignature &rArr; ecdsaVerifySignature &rArr; ecTwinMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketSendData
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketFormatFrameHeader
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketSend
</UL>

<P><STRONG><a name="[4ac]"></a>webSocketSetHost</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, web_socket.o(i.webSocketSetHost))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = webSocketSetHost &rArr; strSafeCopy &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strSafeCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketClient
</UL>

<P><STRONG><a name="[4ab]"></a>webSocketSetTimeout</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, web_socket.o(i.webSocketSetTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = webSocketSetTimeout &rArr; socketSetTimeout &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketSetTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketClient
</UL>

<P><STRONG><a name="[4b1]"></a>webSocketShutdown</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, web_socket.o(i.webSocketShutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504 + Unknown Stack Size
<LI>Call Chain = webSocketShutdown &rArr; webSocketReceive &rArr; webSocketReceiveEx &rArr; webSocketReceiveData &rArr; tlsRead &rArr; tlsConnect &rArr; tlsPerformHandshake &rArr; tlsPerformClientHandshake &rArr; tlsReceiveHandshakeMessage &rArr; tlsParseHandshakeMessage &rArr; tlsParseServerHandshakeMessage &rArr; tlsParseCertificate &rArr; tlsParseCertificateList &rArr; tlsValidateCertificate &rArr; x509ValidateCertificate &rArr; x509VerifySignature &rArr; x509VerifyEcdsaSignature &rArr; ecdsaVerifySignature &rArr; ecTwinMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketReceive
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketShutdownConnection
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketSendData
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketFormatCloseFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketClient
</UL>

<P><STRONG><a name="[4d0]"></a>webSocketShutdownConnection</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, web_socket_transport.o(i.webSocketShutdownConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = webSocketShutdownConnection &rArr; socketReceive &rArr; socketReceiveEx &rArr; tcpReceive &rArr; tcpUpdateReceiveWindow &rArr; tcpSendSegment &rArr; ipSendDatagram &rArr; ipv4SendDatagram &rArr; ipv4FragmentDatagram &rArr; ipv4SendPacket &rArr; arpResolve &rArr; arpSendRequest &rArr; ethAllocBuffer &rArr; netBufferAlloc &rArr; netBufferFree &rArr; netBufferSetLength &rArr; memPoolAlloc &rArr; __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketReceive
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socketShutdown
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsShutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketShutdown
</UL>

<P><STRONG><a name="[4cb]"></a>webSocketVerifyClientHandshake</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, web_socket_misc.o(i.webSocketVerifyClientHandshake))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = webSocketVerifyClientHandshake &rArr; webSocketVerifyClientKey &rArr; base64Decode
</UL>
<BR>[Calls]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketVerifyClientKey
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketChangeState
</UL>
<BR>[Called By]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketParseHandshake
</UL>

<P><STRONG><a name="[4d2]"></a>webSocketVerifyClientKey</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, web_socket_misc.o(i.webSocketVerifyClientKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = webSocketVerifyClientKey &rArr; base64Decode
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64Decode
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketVerifyClientHandshake
</UL>

<P><STRONG><a name="[4cc]"></a>webSocketVerifyServerHandshake</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, web_socket_misc.o(i.webSocketVerifyServerHandshake))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = webSocketVerifyServerHandshake &rArr; webSocketVerifyServerKey &rArr; sha1Final &rArr; sha1Update &rArr; sha1ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketVerifyServerKey
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketChangeState
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketParseHandshake
</UL>

<P><STRONG><a name="[4d3]"></a>webSocketVerifyServerKey</STRONG> (Thumb, 96 bytes, Stack size 120 bytes, web_socket_misc.o(i.webSocketVerifyServerKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = webSocketVerifyServerKey &rArr; sha1Final &rArr; sha1Update &rArr; sha1ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1Update
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1Final
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64Encode
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketVerifyServerHandshake
</UL>

<P><STRONG><a name="[28b]"></a>x25519</STRONG> (Thumb, 462 bytes, Stack size 56 bytes, x25519.o(i.x25519))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = x25519 &rArr; curve25519Inv &rArr; curve25519Pwr2 &rArr; curve25519Sqr &rArr; curve25519Mul &rArr; curve25519Red &rArr; curve25519Select
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAllocMem
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osFreeMem
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curve25519Swap
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curve25519Sub
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curve25519Sqr
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curve25519SetInt
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curve25519Red
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curve25519MulInt
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curve25519Mul
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curve25519Inv
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curve25519Import
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curve25519Export
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curve25519Copy
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curve25519Add
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhGenerateKeyPair
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdhComputeSharedSecret
</UL>

<P><STRONG><a name="[46d]"></a>x509CheckNameConstraints</STRONG> (Thumb, 206 bytes, Stack size 192 bytes, x509_cert_validate.o(i.x509CheckNameConstraints))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = x509CheckNameConstraints &rArr; x509ParseName &rArr; x509ParseNameAttribute &rArr; asn1ReadOid &rArr; asn1ReadTag
</UL>
<BR>[Calls]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509CompareSubtree
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseName
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseGeneralSubtree
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsValidateCertificate
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificateList
</UL>

<P><STRONG><a name="[46b]"></a>x509CheckSubjectName</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, x509_cert_validate.o(i.x509CheckSubjectName))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = x509CheckSubjectName &rArr; x509ParseGeneralName &rArr; asn1ReadTag
</UL>
<BR>[Calls]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509CompareSubjectName
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseGeneralName
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificateList
</UL>

<P><STRONG><a name="[463]"></a>x509CompareName</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, x509_cert_validate.o(i.x509CompareName))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = x509CompareName &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ValidateCertificate
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsIsCertificateAcceptable
</UL>

<P><STRONG><a name="[4db]"></a>x509CompareSubjectName</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, x509_cert_validate.o(i.x509CompareSubjectName))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = x509CompareSubjectName &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509CheckSubjectName
</UL>

<P><STRONG><a name="[4d9]"></a>x509CompareSubtree</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, x509_cert_validate.o(i.x509CompareSubtree))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = x509CompareSubtree &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509CheckNameConstraints
</UL>

<P><STRONG><a name="[493]"></a>x509GetCurveInfo</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, x509_common.o(i.x509GetCurveInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = x509GetCurveInfo &rArr; ecGetCurveInfo &rArr; oidComp
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oidComp
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecGetCurveInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509VerifyEcdsaSignature
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsReadSubjectPublicKey
</UL>

<P><STRONG><a name="[4dc]"></a>x509GetSignHashAlgo</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, x509_common.o(i.x509GetSignHashAlgo))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = x509GetSignHashAlgo &rArr; oidComp
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oidComp
</UL>
<BR>[Called By]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509VerifySignature
</UL>

<P><STRONG><a name="[360]"></a>x509ImportEcParameters</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, x509_key_parse.o(i.x509ImportEcParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = x509ImportEcParameters &rArr; ecLoadDomainParameters &rArr; mpiImport &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecLoadDomainParameters
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecGetCurveInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemImportEcParameters
</UL>

<P><STRONG><a name="[492]"></a>x509ImportRsaPublicKey</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, x509_key_parse.o(i.x509ImportRsaPublicKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = x509ImportRsaPublicKey &rArr; mpiImport &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oidComp
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiImport
</UL>
<BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509VerifyRsaSignature
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsReadSubjectPublicKey
</UL>

<P><STRONG><a name="[453]"></a>x509IsSignAlgoSupported</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, x509_common.o(i.x509IsSignAlgoSupported))
<BR><BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsFormatSignatureAlgorithmsExtension
</UL>

<P><STRONG><a name="[4dd]"></a>x509ParseAlgorithmIdentifier</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, x509_key_parse.o(i.x509ParseAlgorithmIdentifier))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = x509ParseAlgorithmIdentifier &rArr; x509ParseDsaParameters &rArr; asn1ReadSequence &rArr; asn1ReadTag
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadOid
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckOid
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadSequence
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseEcParameters
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseDsaParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseSubjectPublicKeyInfo
</UL>

<P><STRONG><a name="[4de]"></a>x509ParseAuthorityKeyId</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, x509_cert_parse.o(i.x509ParseAuthorityKeyId), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadSequence
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseExtensions
</UL>

<P><STRONG><a name="[4df]"></a>x509ParseBasicConstraints</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, x509_cert_parse.o(i.x509ParseBasicConstraints), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadInt32
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadSequence
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckTag
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseExtensions
</UL>

<P><STRONG><a name="[462]"></a>x509ParseCertificate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, x509_cert_parse.o(i.x509ParseCertificate))
<BR><BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsValidateCertificate
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsIsCertificateAcceptable
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificateList
</UL>

<P><STRONG><a name="[4e0]"></a>x509ParseCertificateEx</STRONG> (Thumb, 148 bytes, Stack size 56 bytes, x509_cert_parse.o(i.x509ParseCertificateEx), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oidComp
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseTbsCertificate
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseSignatureValue
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseSignatureAlgo
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[36b]"></a>x509ParseDsaParameters</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, x509_key_parse.o(i.x509ParseDsaParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = x509ParseDsaParameters &rArr; asn1ReadSequence &rArr; asn1ReadTag
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadSequence
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckTag
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseAlgorithmIdentifier
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ParsePrivateKeyAlgo
</UL>

<P><STRONG><a name="[4e4]"></a>x509ParseDsaPublicKey</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, x509_key_parse.o(i.x509ParseDsaPublicKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = x509ParseDsaPublicKey &rArr; asn1ReadTag
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckTag
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseSubjectPublicKeyInfo
</UL>

<P><STRONG><a name="[35e]"></a>x509ParseEcParameters</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, x509_key_parse.o(i.x509ParseEcParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = x509ParseEcParameters &rArr; asn1ReadOid &rArr; asn1ReadTag
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadOid
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseAlgorithmIdentifier
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ParsePrivateKeyAlgo
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs8ParseEcPrivateKey
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemImportEcParameters
</UL>

<P><STRONG><a name="[4f4]"></a>x509ParseEcPublicKey</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, x509_key_parse.o(i.x509ParseEcPublicKey))
<BR><BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseSubjectPublicKeyInfo
</UL>

<P><STRONG><a name="[4e5]"></a>x509ParseExtendedKeyUsage</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, x509_cert_parse.o(i.x509ParseExtendedKeyUsage), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadOid
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oidComp
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadSequence
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseExtensions
</UL>

<P><STRONG><a name="[4e6]"></a>x509ParseExtension</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, x509_cert_parse.o(i.x509ParseExtension), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadOid
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadOctetString
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadSequence
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckTag
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseExtensions
</UL>

<P><STRONG><a name="[4e7]"></a>x509ParseExtensions</STRONG> (Thumb, 422 bytes, Stack size 72 bytes, x509_cert_parse.o(i.x509ParseExtensions), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oidComp
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadSequence
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckTag
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseSubjectKeyId
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseSubjectAltName
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseNsCertType
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseNameConstraints
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseKeyUsage
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseExtension
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseExtendedKeyUsage
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseBasicConstraints
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseAuthorityKeyId
</UL>
<BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseTbsCertificate
</UL>

<P><STRONG><a name="[4da]"></a>x509ParseGeneralName</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, x509_cert_parse.o(i.x509ParseGeneralName))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = x509ParseGeneralName &rArr; asn1ReadTag
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
</UL>
<BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509CheckSubjectName
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseSubjectAltName
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseGeneralSubtree
</UL>

<P><STRONG><a name="[4d7]"></a>x509ParseGeneralSubtree</STRONG> (Thumb, 38 bytes, Stack size 40 bytes, x509_cert_parse.o(i.x509ParseGeneralSubtree))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = x509ParseGeneralSubtree &rArr; x509ParseGeneralName &rArr; asn1ReadTag
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadSequence
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseGeneralName
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509CheckNameConstraints
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseGeneralSubtrees
</UL>

<P><STRONG><a name="[4ed]"></a>x509ParseGeneralSubtrees</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, x509_cert_parse.o(i.x509ParseGeneralSubtrees), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseGeneralSubtree
</UL>
<BR>[Called By]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseNameConstraints
</UL>

<P><STRONG><a name="[4ee]"></a>x509ParseInt</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, x509_cert_parse.o(i.x509ParseInt), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseTime
</UL>

<P><STRONG><a name="[4ef]"></a>x509ParseIssuerUniqueId</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, x509_cert_parse.o(i.x509ParseIssuerUniqueId), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckTag
</UL>
<BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseTbsCertificate
</UL>

<P><STRONG><a name="[4e9]"></a>x509ParseKeyUsage</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, x509_cert_parse.o(i.x509ParseKeyUsage), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverseInt8
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckTag
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseExtensions
</UL>

<P><STRONG><a name="[4d8]"></a>x509ParseName</STRONG> (Thumb, 482 bytes, Stack size 64 bytes, x509_cert_parse.o(i.x509ParseName))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = x509ParseName &rArr; x509ParseNameAttribute &rArr; asn1ReadOid &rArr; asn1ReadTag
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oidComp
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadSequence
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseNameAttribute
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509CheckNameConstraints
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseTbsCertificate
</UL>

<P><STRONG><a name="[4f1]"></a>x509ParseNameAttribute</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, x509_cert_parse.o(i.x509ParseNameAttribute))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = x509ParseNameAttribute &rArr; asn1ReadOid &rArr; asn1ReadTag
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadOid
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadSequence
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckTag
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseName
</UL>

<P><STRONG><a name="[4e8]"></a>x509ParseNameConstraints</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, x509_cert_parse.o(i.x509ParseNameConstraints), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadSequence
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseGeneralSubtrees
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseExtensions
</UL>

<P><STRONG><a name="[4ec]"></a>x509ParseNsCertType</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, x509_cert_parse.o(i.x509ParseNsCertType), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reverseInt8
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckTag
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseExtensions
</UL>

<P><STRONG><a name="[4f2]"></a>x509ParseRsaPublicKey</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, x509_key_parse.o(i.x509ParseRsaPublicKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = x509ParseRsaPublicKey &rArr; asn1ReadSequence &rArr; asn1ReadTag
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadSequence
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckTag
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseSubjectPublicKeyInfo
</UL>

<P><STRONG><a name="[4f3]"></a>x509ParseSerialNumber</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, x509_cert_parse.o(i.x509ParseSerialNumber), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckTag
</UL>
<BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseTbsCertificate
</UL>

<P><STRONG><a name="[4e2]"></a>x509ParseSignatureAlgo</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, x509_cert_parse.o(i.x509ParseSignatureAlgo), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadOid
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadSequence
</UL>
<BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseTbsCertificate
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseCertificateEx
</UL>

<P><STRONG><a name="[4e3]"></a>x509ParseSignatureValue</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, x509_cert_parse.o(i.x509ParseSignatureValue), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckTag
</UL>
<BR>[Called By]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseCertificateEx
</UL>

<P><STRONG><a name="[4ea]"></a>x509ParseSubjectAltName</STRONG> (Thumb, 112 bytes, Stack size 64 bytes, x509_cert_parse.o(i.x509ParseSubjectAltName), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadSequence
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseGeneralName
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseExtensions
</UL>

<P><STRONG><a name="[4eb]"></a>x509ParseSubjectKeyId</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, x509_cert_parse.o(i.x509ParseSubjectKeyId), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadOctetString
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseExtensions
</UL>

<P><STRONG><a name="[362]"></a>x509ParseSubjectPublicKeyInfo</STRONG> (Thumb, 232 bytes, Stack size 56 bytes, x509_key_parse.o(i.x509ParseSubjectPublicKeyInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = x509ParseSubjectPublicKeyInfo &rArr; x509ParseAlgorithmIdentifier &rArr; x509ParseDsaParameters &rArr; asn1ReadSequence &rArr; asn1ReadTag
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oidComp
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadSequence
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckTag
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseRsaPublicKey
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseEcPublicKey
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseDsaPublicKey
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseAlgorithmIdentifier
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseTbsCertificate
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pemImportEcParameters
</UL>

<P><STRONG><a name="[4f5]"></a>x509ParseSubjectUniqueId</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, x509_cert_parse.o(i.x509ParseSubjectUniqueId), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckTag
</UL>
<BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseTbsCertificate
</UL>

<P><STRONG><a name="[4e1]"></a>x509ParseTbsCertificate</STRONG> (Thumb, 296 bytes, Stack size 56 bytes, x509_cert_parse.o(i.x509ParseTbsCertificate), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseVersion
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseValidity
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseSubjectUniqueId
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseSignatureAlgo
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseSerialNumber
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseName
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseIssuerUniqueId
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseExtensions
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseSubjectPublicKeyInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseCertificateEx
</UL>

<P><STRONG><a name="[4f8]"></a>x509ParseTime</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, x509_cert_parse.o(i.x509ParseTime), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckTag
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseInt
</UL>
<BR>[Called By]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseValidity
</UL>

<P><STRONG><a name="[4f7]"></a>x509ParseValidity</STRONG> (Thumb, 62 bytes, Stack size 48 bytes, x509_cert_parse.o(i.x509ParseValidity), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadSequence
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseTime
</UL>
<BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseTbsCertificate
</UL>

<P><STRONG><a name="[4f6]"></a>x509ParseVersion</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, x509_cert_parse.o(i.x509ParseVersion), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadInt32
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1ReadTag
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asn1CheckTag
</UL>
<BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ParseTbsCertificate
</UL>

<P><STRONG><a name="[46c]"></a>x509ValidateCertificate</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, x509_cert_validate.o(i.x509ValidateCertificate))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = x509ValidateCertificate &rArr; x509VerifySignature &rArr; x509VerifyEcdsaSignature &rArr; ecdsaVerifySignature &rArr; ecTwinMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentUnixTime
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convertUnixTimeToDate
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compareDateTime
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509VerifySignature
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509CompareName
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsValidateCertificate
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsParseCertificateList
</UL>

<P><STRONG><a name="[4fc]"></a>x509VerifyEcdsaSignature</STRONG> (Thumb, 152 bytes, Stack size 256 bytes, x509_signature.o(i.x509VerifyEcdsaSignature))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = x509VerifyEcdsaSignature &rArr; ecdsaVerifySignature &rArr; ecTwinMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecLoadDomainParameters
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecImport
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecInitPublicKey
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecInitDomainParameters
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFreePublicKey
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecFreeDomainParameters
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaVerifySignature
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaReadSignature
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaInitSignature
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecdsaFreeSignature
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509GetCurveInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509VerifySignature
</UL>

<P><STRONG><a name="[4fd]"></a>x509VerifyRsaSignature</STRONG> (Thumb, 100 bytes, Stack size 120 bytes, x509_signature.o(i.x509VerifyRsaSignature))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = x509VerifyRsaSignature &rArr; rsassaPkcs1v15Verify &rArr; rsavp1 &rArr; rsaep &rArr; mpiExpModFast &rArr; mpiExpMod &rArr; mpiMontgomeryRed &rArr; mpiMontgomeryMul &rArr; mpiSub &rArr; mpiAddAbs &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpiGetBitLength
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ImportRsaPublicKey
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsassaPkcs1v15Verify
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaInitPublicKey
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaFreePublicKey
</UL>
<BR>[Called By]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509VerifySignature
</UL>

<P><STRONG><a name="[4fb]"></a>x509VerifySignature</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, x509_signature.o(i.x509VerifySignature))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = x509VerifySignature &rArr; x509VerifyEcdsaSignature &rArr; ecdsaVerifySignature &rArr; ecTwinMult &rArr; ecFullSub &rArr; ecFullAdd &rArr; ecAdd &rArr; ecSqrMod &rArr; mpiMul &rArr; mpiCopy &rArr; mpiGrow &rArr; osAllocMem &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509VerifyRsaSignature
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509VerifyEcdsaSignature
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509GetSignHashAlgo
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ValidateCertificate
</UL>

<P><STRONG><a name="[4fe]"></a>xBeeAPIhandle</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, xbee.o(i.xBeeAPIhandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = xBeeAPIhandle &rArr; DecodeWeatherNodesensor &rArr; StringSearch
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecodeWeatherNodesensor
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xBeeChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xBeeFunction
</UL>

<P><STRONG><a name="[4ff]"></a>xBeeChecksum</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, xbee.o(i.xBeeChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xBeeChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xBeeAPIhandle
</UL>

<P><STRONG><a name="[1b2]"></a>xBeeFunction</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, xbee.o(i.xBeeFunction))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = xBeeFunction &rArr; xBeeAPIhandle &rArr; DecodeWeatherNodesensor &rArr; StringSearch
</UL>
<BR>[Calls]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xBeeAPIhandle
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask02
</UL>

<P><STRONG><a name="[1b8]"></a>xBeeTimer</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, xbee.o(i.xBeeTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = xBeeTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
</UL>

<P><STRONG><a name="[4a8]"></a>xPortStartScheduler</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[34b]"></a>xQueueCreateMutex</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, queue.o(i.xQueueCreateMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateMutex
</UL>

<P><STRONG><a name="[34a]"></a>xQueueGenericCreate</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateEvent
</UL>

<P><STRONG><a name="[503]"></a>xQueueGenericReset</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[352]"></a>xQueueGenericSend</STRONG> (Thumb, 346 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEvent
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
</UL>

<P><STRONG><a name="[356]"></a>xQueueGiveFromISR</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, queue.o(i.xQueueGiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSetEventFromIsr
</UL>

<P><STRONG><a name="[348]"></a>xQueueSemaphoreTake</STRONG> (Thumb, 372 bytes, Stack size 48 bytes, queue.o(i.xQueueSemaphoreTake))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osWaitForEvent
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResetEvent
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
</UL>

<P><STRONG><a name="[505]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[34c]"></a>xTaskCreate</STRONG> (Thumb, 86 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateTask
</UL>

<P><STRONG><a name="[354]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSuspendAllTasks
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[350]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetSystemTime
</UL>

<P><STRONG><a name="[1b6]"></a>xTaskIncrementTick</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[376]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[507]"></a>xTaskPriorityInherit</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[37d]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[355]"></a>xTaskResumeAll</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osResumeAllTasks
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[509]"></a>yarrowFastReseed</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, yarrow.o(i.yarrowFastReseed))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = yarrowFastReseed &rArr; sha256Final &rArr; sha256Update &rArr; sha256ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Update
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Final
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aesInit
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aesEncryptBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowSeed
</UL>

<P><STRONG><a name="[50a]"></a>yarrowGenerateBlock</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, yarrow.o(i.yarrowGenerateBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = yarrowGenerateBlock &rArr; aesEncryptBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aesEncryptBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowRead
</UL>

<P><STRONG><a name="[306]"></a>yarrowInit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, yarrow.o(i.yarrowInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = yarrowInit &rArr; osCreateMutex &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCreateMutex
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4b3]"></a>yarrowRead</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, yarrow.o(i.yarrowRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = yarrowRead &rArr; osReleaseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osReleaseMutex
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAcquireMutex
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aesInit
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowGenerateBlock
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webSocketClientRngCallback
</UL>

<P><STRONG><a name="[307]"></a>yarrowSeed</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, yarrow.o(i.yarrowSeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = yarrowSeed &rArr; yarrowFastReseed &rArr; sha256Final &rArr; sha256Update &rArr; sha256ProcessBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256Update
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yarrowFastReseed
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[c8]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[54a]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[54b]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1a5]"></a>MX_GPIO_Init</STRONG> (Thumb, 206 bytes, Stack size 56 bytes, main.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a7]"></a>MX_TIM2_Init</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, main.o(i.MX_TIM2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MX_TIM2_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a9]"></a>MX_TIM5_Init</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, main.o(i.MX_TIM5_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MX_TIM5_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1cc]"></a>IntToUnicode</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, usbd_desc.o(i.IntToUnicode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IntToUnicode
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_FS_SerialStrDescriptor
</UL>

<P><STRONG><a name="[13]"></a>CDC_Control_FS</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_cdc_if.o(i.CDC_Control_FS))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_if.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>CDC_DeInit_FS</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_cdc_if.o(i.CDC_DeInit_FS))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_if.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>CDC_Init_FS</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbd_cdc_if.o(i.CDC_Init_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CDC_Init_FS
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_SetTxBuffer
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_SetRxBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_if.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>CDC_Receive_FS</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbd_cdc_if.o(i.CDC_Receive_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CDC_Receive_FS &rArr; USBD_CDC_ReceivePacket &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_SetRxBuffer
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CDC_ReceivePacket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_if.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>CDC_TransmitCplt_FS</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbd_cdc_if.o(i.CDC_TransmitCplt_FS))
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc_if.o(.data)
</UL>
<P><STRONG><a name="[15c]"></a>PCD_EP_OutXfrComplete_int</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, stm32f4xx_hal_pcd.o(i.PCD_EP_OutXfrComplete_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = PCD_EP_OutXfrComplete_int &rArr; HAL_PCD_DataOutStageCallback &rArr; USBD_LL_DataOutStage &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EP0_OutStart
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_DataOutStageCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[163]"></a>PCD_WriteEmptyTxFifo</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, stm32f4xx_hal_pcd.o(i.PCD_WriteEmptyTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PCD_WriteEmptyTxFifo &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PCD_IRQHandler
</UL>

<P><STRONG><a name="[1e2]"></a>USB_CoreReset</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_CoreReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_CoreReset
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreInit
</UL>

<P><STRONG><a name="[13e]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[191]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[18f]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[190]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[81]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[19d]"></a>UART_EndRxTransfer</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>

<P><STRONG><a name="[19c]"></a>UART_Receive_IT</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1a4]"></a>UART_SetConfig</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[375]"></a>prvCopyDataToQueue</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[37b]"></a>prvIsQueueEmpty</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[37c]"></a>prvUnlockQueue</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[36d]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[371]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvAddNewTaskToReadyList
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[377]"></a>prvDeleteTCB</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[88]"></a>prvIdleTask</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvIdleTask &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[378]"></a>prvInitialiseNewTask</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[508]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[358]"></a>makeFreeRtosPriority</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmsis_os.o(i.makeFreeRtosPriority))
<BR><BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[87]"></a>prvTaskExitError</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[1db]"></a>SWAPBYTE</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, usbd_ctlreq.o(i.SWAPBYTE))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ParseSetupRequest
</UL>

<P><STRONG><a name="[1cd]"></a>USBD_GetDescriptor</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, usbd_ctlreq.o(i.USBD_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USBD_GetDescriptor &rArr; USBD_CtlSendData &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1dc]"></a>USBD_SetConfig</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, usbd_ctlreq.o(i.USBD_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USBD_SetConfig &rArr; USBD_CtlSendStatus &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendStatus
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetClassConfig
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ClrClassConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StdDevReq
</UL>

<P><STRONG><a name="[1a]"></a>USBD_CDC_DataIn</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, usbd_cdc.o(i.USBD_CDC_DataIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBD_CDC_DataIn &rArr; USBD_LL_Transmit &rArr; HAL_PCD_EP_Transmit &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>USBD_CDC_DataOut</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, usbd_cdc.o(i.USBD_CDC_DataOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_CDC_DataOut
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_GetRxDataSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>USBD_CDC_DeInit</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, usbd_cdc.o(i.USBD_CDC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USBD_CDC_DeInit &rArr; USBD_LL_CloseEP &rArr; HAL_PCD_EP_Close &rArr; USB_DeactivateEndpoint
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_static_free
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_CloseEP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>USBD_CDC_EP0_RxReady</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usbd_cdc.o(i.USBD_CDC_EP0_RxReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_CDC_EP0_RxReady
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>USBD_CDC_GetFSCfgDesc</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, usbd_cdc.o(i.USBD_CDC_GetFSCfgDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USBD_CDC_GetFSCfgDesc &rArr; USBD_GetEpDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetEpDesc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>USBD_CDC_GetHSCfgDesc</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, usbd_cdc.o(i.USBD_CDC_GetHSCfgDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USBD_CDC_GetHSCfgDesc &rArr; USBD_GetEpDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetEpDesc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>USBD_CDC_GetOtherSpeedCfgDesc</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, usbd_cdc.o(i.USBD_CDC_GetOtherSpeedCfgDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USBD_CDC_GetOtherSpeedCfgDesc &rArr; USBD_GetEpDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetEpDesc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>USBD_CDC_Init</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, usbd_cdc.o(i.USBD_CDC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USBD_CDC_Init &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_static_malloc
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_PrepareReceive
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_LL_OpenEP
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>USBD_CDC_Setup</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, usbd_cdc.o(i.USBD_CDC_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USBD_CDC_Setup &rArr; USBD_CtlPrepareRx &rArr; USBD_LL_PrepareReceive &rArr; HAL_PCD_EP_Receive &rArr; USB_EPStartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlPrepareRx
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlSendData
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtlError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbd_cdc.o(.data)
</UL>
<P><STRONG><a name="[7f]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
